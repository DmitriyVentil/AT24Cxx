
stm32-AT24Cxx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005618  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  080057a8  080057a8  000157a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058f8  080058f8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080058f8  080058f8  000158f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005900  08005900  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005900  08005900  00015900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005904  08005904  00015904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005908  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  20000070  08005978  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  08005978  0002016c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eaa0  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f12  00000000  00000000  0002eb40  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c70  00000000  00000000  00030a58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b68  00000000  00000000  000316c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000375d  00000000  00000000  00032230  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a419  00000000  00000000  0003598d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000eb274  00000000  00000000  0003fda6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012b01a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039d0  00000000  00000000  0012b098  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005790 	.word	0x08005790

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005790 	.word	0x08005790

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <AT24C16_Block_Count>:
//16384 бит (2048 байта)

// Функция обновления адреса блока 256 байтов
// Не используется пользователем
uint8_t AT24C16_Block_Count(uint8_t Dev_Adr,uint16_t Mem_Adr)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	460a      	mov	r2, r1
 800057a:	71fb      	strb	r3, [r7, #7]
 800057c:	4613      	mov	r3, r2
 800057e:	80bb      	strh	r3, [r7, #4]

	if(Mem_Adr>0x6FF){Dev_Adr=(Dev_Adr | 0x0E) & 0xFE;}
 8000580:	88bb      	ldrh	r3, [r7, #4]
 8000582:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8000586:	d307      	bcc.n	8000598 <AT24C16_Block_Count+0x28>
 8000588:	79fb      	ldrb	r3, [r7, #7]
 800058a:	f043 030e 	orr.w	r3, r3, #14
 800058e:	b2db      	uxtb	r3, r3
 8000590:	f023 0301 	bic.w	r3, r3, #1
 8000594:	71fb      	strb	r3, [r7, #7]
 8000596:	e045      	b.n	8000624 <AT24C16_Block_Count+0xb4>
	else if(Mem_Adr>0x5FF){Dev_Adr=(Dev_Adr | 0x0C) & 0xFC;}
 8000598:	88bb      	ldrh	r3, [r7, #4]
 800059a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800059e:	d307      	bcc.n	80005b0 <AT24C16_Block_Count+0x40>
 80005a0:	79fb      	ldrb	r3, [r7, #7]
 80005a2:	f043 030c 	orr.w	r3, r3, #12
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	f023 0303 	bic.w	r3, r3, #3
 80005ac:	71fb      	strb	r3, [r7, #7]
 80005ae:	e039      	b.n	8000624 <AT24C16_Block_Count+0xb4>
	else if(Mem_Adr>0x4FF){Dev_Adr=(Dev_Adr | 0x0A) & 0xFA;}
 80005b0:	88bb      	ldrh	r3, [r7, #4]
 80005b2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80005b6:	d307      	bcc.n	80005c8 <AT24C16_Block_Count+0x58>
 80005b8:	79fb      	ldrb	r3, [r7, #7]
 80005ba:	f043 030a 	orr.w	r3, r3, #10
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	f023 0305 	bic.w	r3, r3, #5
 80005c4:	71fb      	strb	r3, [r7, #7]
 80005c6:	e02d      	b.n	8000624 <AT24C16_Block_Count+0xb4>
	else if(Mem_Adr>0x3FF){Dev_Adr=(Dev_Adr | 0x08) & 0xF8;}
 80005c8:	88bb      	ldrh	r3, [r7, #4]
 80005ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80005ce:	d307      	bcc.n	80005e0 <AT24C16_Block_Count+0x70>
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	f043 0308 	orr.w	r3, r3, #8
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	f023 0307 	bic.w	r3, r3, #7
 80005dc:	71fb      	strb	r3, [r7, #7]
 80005de:	e021      	b.n	8000624 <AT24C16_Block_Count+0xb4>
	else if(Mem_Adr>0x2FF){Dev_Adr=(Dev_Adr | 0x06) & 0xF6;}
 80005e0:	88bb      	ldrh	r3, [r7, #4]
 80005e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80005e6:	d307      	bcc.n	80005f8 <AT24C16_Block_Count+0x88>
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	f043 0306 	orr.w	r3, r3, #6
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	f023 0309 	bic.w	r3, r3, #9
 80005f4:	71fb      	strb	r3, [r7, #7]
 80005f6:	e015      	b.n	8000624 <AT24C16_Block_Count+0xb4>
	else if(Mem_Adr>0x1FF){Dev_Adr=(Dev_Adr | 0x04)& 0xF4;}
 80005f8:	88bb      	ldrh	r3, [r7, #4]
 80005fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80005fe:	d307      	bcc.n	8000610 <AT24C16_Block_Count+0xa0>
 8000600:	79fb      	ldrb	r3, [r7, #7]
 8000602:	f043 0304 	orr.w	r3, r3, #4
 8000606:	b2db      	uxtb	r3, r3
 8000608:	f023 030b 	bic.w	r3, r3, #11
 800060c:	71fb      	strb	r3, [r7, #7]
 800060e:	e009      	b.n	8000624 <AT24C16_Block_Count+0xb4>
	else if(Mem_Adr>0xFF){Dev_Adr=(Dev_Adr | 0x02)& 0xF2;}
 8000610:	88bb      	ldrh	r3, [r7, #4]
 8000612:	2bff      	cmp	r3, #255	; 0xff
 8000614:	d906      	bls.n	8000624 <AT24C16_Block_Count+0xb4>
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	f043 0302 	orr.w	r3, r3, #2
 800061c:	b2db      	uxtb	r3, r3
 800061e:	f023 030d 	bic.w	r3, r3, #13
 8000622:	71fb      	strb	r3, [r7, #7]

	return Dev_Adr;
 8000624:	79fb      	ldrb	r3, [r7, #7]
}
 8000626:	4618      	mov	r0, r3
 8000628:	370c      	adds	r7, #12
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
	...

08000634 <AT24C16_Write>:
 Mem_Adr - адрес начала записи
 data - буфер записи
 Data_Size - размер данных записи
*/
void AT24C16_Write(uint8_t Dev_Adr, uint16_t Mem_Adr,uint8_t* data, uint16_t Data_Size)
{
 8000634:	b590      	push	{r4, r7, lr}
 8000636:	b08b      	sub	sp, #44	; 0x2c
 8000638:	af04      	add	r7, sp, #16
 800063a:	60ba      	str	r2, [r7, #8]
 800063c:	461a      	mov	r2, r3
 800063e:	4603      	mov	r3, r0
 8000640:	73fb      	strb	r3, [r7, #15]
 8000642:	460b      	mov	r3, r1
 8000644:	81bb      	strh	r3, [r7, #12]
 8000646:	4613      	mov	r3, r2
 8000648:	80fb      	strh	r3, [r7, #6]
	uint8_t Page_count=Mem_Adr%16;
 800064a:	89bb      	ldrh	r3, [r7, #12]
 800064c:	b2db      	uxtb	r3, r3
 800064e:	f003 030f 	and.w	r3, r3, #15
 8000652:	75bb      	strb	r3, [r7, #22]
	Dev_Adr=AT24C16_Block_Count(Dev_Adr,Mem_Adr);
 8000654:	89ba      	ldrh	r2, [r7, #12]
 8000656:	7bfb      	ldrb	r3, [r7, #15]
 8000658:	4611      	mov	r1, r2
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff ff88 	bl	8000570 <AT24C16_Block_Count>
 8000660:	4603      	mov	r3, r0
 8000662:	73fb      	strb	r3, [r7, #15]
	if((16-Page_count)>Data_Size)
 8000664:	7dbb      	ldrb	r3, [r7, #22]
 8000666:	f1c3 0210 	rsb	r2, r3, #16
 800066a:	88fb      	ldrh	r3, [r7, #6]
 800066c:	429a      	cmp	r2, r3
 800066e:	dd11      	ble.n	8000694 <AT24C16_Write+0x60>
	{
		while(HAL_I2C_Mem_Write(AT24C16_I2C, Dev_Adr, Mem_Adr, 1, data, Data_Size, 100)){};
 8000670:	bf00      	nop
 8000672:	7bfb      	ldrb	r3, [r7, #15]
 8000674:	b299      	uxth	r1, r3
 8000676:	89ba      	ldrh	r2, [r7, #12]
 8000678:	2364      	movs	r3, #100	; 0x64
 800067a:	9302      	str	r3, [sp, #8]
 800067c:	88fb      	ldrh	r3, [r7, #6]
 800067e:	9301      	str	r3, [sp, #4]
 8000680:	68bb      	ldr	r3, [r7, #8]
 8000682:	9300      	str	r3, [sp, #0]
 8000684:	2301      	movs	r3, #1
 8000686:	4847      	ldr	r0, [pc, #284]	; (80007a4 <AT24C16_Write+0x170>)
 8000688:	f001 fc5a 	bl	8001f40 <HAL_I2C_Mem_Write>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d1ef      	bne.n	8000672 <AT24C16_Write+0x3e>
 8000692:	e02a      	b.n	80006ea <AT24C16_Write+0xb6>
	}
	else
	{
		while(HAL_I2C_Mem_Write(AT24C16_I2C, Dev_Adr, Mem_Adr, 1, data, (16-Page_count), 100)){};
 8000694:	bf00      	nop
 8000696:	7bfb      	ldrb	r3, [r7, #15]
 8000698:	b299      	uxth	r1, r3
 800069a:	7dbb      	ldrb	r3, [r7, #22]
 800069c:	b29b      	uxth	r3, r3
 800069e:	f1c3 0310 	rsb	r3, r3, #16
 80006a2:	b29b      	uxth	r3, r3
 80006a4:	89b8      	ldrh	r0, [r7, #12]
 80006a6:	2264      	movs	r2, #100	; 0x64
 80006a8:	9202      	str	r2, [sp, #8]
 80006aa:	9301      	str	r3, [sp, #4]
 80006ac:	68bb      	ldr	r3, [r7, #8]
 80006ae:	9300      	str	r3, [sp, #0]
 80006b0:	2301      	movs	r3, #1
 80006b2:	4602      	mov	r2, r0
 80006b4:	483b      	ldr	r0, [pc, #236]	; (80007a4 <AT24C16_Write+0x170>)
 80006b6:	f001 fc43 	bl	8001f40 <HAL_I2C_Mem_Write>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d1ea      	bne.n	8000696 <AT24C16_Write+0x62>
		Data_Size=Data_Size-(16-Page_count);
 80006c0:	7dbb      	ldrb	r3, [r7, #22]
 80006c2:	b29a      	uxth	r2, r3
 80006c4:	88fb      	ldrh	r3, [r7, #6]
 80006c6:	4413      	add	r3, r2
 80006c8:	b29b      	uxth	r3, r3
 80006ca:	3b10      	subs	r3, #16
 80006cc:	80fb      	strh	r3, [r7, #6]
		Mem_Adr=Mem_Adr+(16-Page_count);
 80006ce:	7dbb      	ldrb	r3, [r7, #22]
 80006d0:	b29b      	uxth	r3, r3
 80006d2:	89ba      	ldrh	r2, [r7, #12]
 80006d4:	1ad3      	subs	r3, r2, r3
 80006d6:	b29b      	uxth	r3, r3
 80006d8:	3310      	adds	r3, #16
 80006da:	81bb      	strh	r3, [r7, #12]
		data=data+(16-Page_count);
 80006dc:	7dbb      	ldrb	r3, [r7, #22]
 80006de:	f1c3 0310 	rsb	r3, r3, #16
 80006e2:	461a      	mov	r2, r3
 80006e4:	68bb      	ldr	r3, [r7, #8]
 80006e6:	4413      	add	r3, r2
 80006e8:	60bb      	str	r3, [r7, #8]
	}

	for(uint8_t i=0;i<Data_Size/16;i++)
 80006ea:	2300      	movs	r3, #0
 80006ec:	75fb      	strb	r3, [r7, #23]
 80006ee:	e023      	b.n	8000738 <AT24C16_Write+0x104>
	{
		Dev_Adr=AT24C16_Block_Count(Dev_Adr,Mem_Adr);
 80006f0:	89ba      	ldrh	r2, [r7, #12]
 80006f2:	7bfb      	ldrb	r3, [r7, #15]
 80006f4:	4611      	mov	r1, r2
 80006f6:	4618      	mov	r0, r3
 80006f8:	f7ff ff3a 	bl	8000570 <AT24C16_Block_Count>
 80006fc:	4603      	mov	r3, r0
 80006fe:	73fb      	strb	r3, [r7, #15]
		while(HAL_I2C_Mem_Write(AT24C16_I2C, Dev_Adr, Mem_Adr, 1, data+16*i, 16, 100)){};
 8000700:	bf00      	nop
 8000702:	7bfb      	ldrb	r3, [r7, #15]
 8000704:	b299      	uxth	r1, r3
 8000706:	7dfb      	ldrb	r3, [r7, #23]
 8000708:	011b      	lsls	r3, r3, #4
 800070a:	461a      	mov	r2, r3
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	4413      	add	r3, r2
 8000710:	89b8      	ldrh	r0, [r7, #12]
 8000712:	2264      	movs	r2, #100	; 0x64
 8000714:	9202      	str	r2, [sp, #8]
 8000716:	2210      	movs	r2, #16
 8000718:	9201      	str	r2, [sp, #4]
 800071a:	9300      	str	r3, [sp, #0]
 800071c:	2301      	movs	r3, #1
 800071e:	4602      	mov	r2, r0
 8000720:	4820      	ldr	r0, [pc, #128]	; (80007a4 <AT24C16_Write+0x170>)
 8000722:	f001 fc0d 	bl	8001f40 <HAL_I2C_Mem_Write>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d1ea      	bne.n	8000702 <AT24C16_Write+0xce>
		Mem_Adr=Mem_Adr+16;
 800072c:	89bb      	ldrh	r3, [r7, #12]
 800072e:	3310      	adds	r3, #16
 8000730:	81bb      	strh	r3, [r7, #12]
	for(uint8_t i=0;i<Data_Size/16;i++)
 8000732:	7dfb      	ldrb	r3, [r7, #23]
 8000734:	3301      	adds	r3, #1
 8000736:	75fb      	strb	r3, [r7, #23]
 8000738:	7dfb      	ldrb	r3, [r7, #23]
 800073a:	b29a      	uxth	r2, r3
 800073c:	88fb      	ldrh	r3, [r7, #6]
 800073e:	091b      	lsrs	r3, r3, #4
 8000740:	b29b      	uxth	r3, r3
 8000742:	429a      	cmp	r2, r3
 8000744:	d3d4      	bcc.n	80006f0 <AT24C16_Write+0xbc>
	}
	if(Data_Size%16!=0)
 8000746:	88fb      	ldrh	r3, [r7, #6]
 8000748:	f003 030f 	and.w	r3, r3, #15
 800074c:	b29b      	uxth	r3, r3
 800074e:	2b00      	cmp	r3, #0
 8000750:	d023      	beq.n	800079a <AT24C16_Write+0x166>
	{
		Dev_Adr=AT24C16_Block_Count(Dev_Adr,Mem_Adr);
 8000752:	89ba      	ldrh	r2, [r7, #12]
 8000754:	7bfb      	ldrb	r3, [r7, #15]
 8000756:	4611      	mov	r1, r2
 8000758:	4618      	mov	r0, r3
 800075a:	f7ff ff09 	bl	8000570 <AT24C16_Block_Count>
 800075e:	4603      	mov	r3, r0
 8000760:	73fb      	strb	r3, [r7, #15]
		while(HAL_I2C_Mem_Write(AT24C16_I2C, Dev_Adr, Mem_Adr, 1, data+16*(Data_Size/16), Data_Size%16, 100)){};
 8000762:	bf00      	nop
 8000764:	7bfb      	ldrb	r3, [r7, #15]
 8000766:	b298      	uxth	r0, r3
 8000768:	88fb      	ldrh	r3, [r7, #6]
 800076a:	091b      	lsrs	r3, r3, #4
 800076c:	b29b      	uxth	r3, r3
 800076e:	011b      	lsls	r3, r3, #4
 8000770:	461a      	mov	r2, r3
 8000772:	68bb      	ldr	r3, [r7, #8]
 8000774:	4413      	add	r3, r2
 8000776:	88fa      	ldrh	r2, [r7, #6]
 8000778:	f002 020f 	and.w	r2, r2, #15
 800077c:	b292      	uxth	r2, r2
 800077e:	89bc      	ldrh	r4, [r7, #12]
 8000780:	2164      	movs	r1, #100	; 0x64
 8000782:	9102      	str	r1, [sp, #8]
 8000784:	9201      	str	r2, [sp, #4]
 8000786:	9300      	str	r3, [sp, #0]
 8000788:	2301      	movs	r3, #1
 800078a:	4622      	mov	r2, r4
 800078c:	4601      	mov	r1, r0
 800078e:	4805      	ldr	r0, [pc, #20]	; (80007a4 <AT24C16_Write+0x170>)
 8000790:	f001 fbd6 	bl	8001f40 <HAL_I2C_Mem_Write>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d1e4      	bne.n	8000764 <AT24C16_Write+0x130>
	}
}
 800079a:	bf00      	nop
 800079c:	371c      	adds	r7, #28
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd90      	pop	{r4, r7, pc}
 80007a2:	bf00      	nop
 80007a4:	20000098 	.word	0x20000098

080007a8 <AT24C16_Read>:
 Mem_Adr - адрес начала чтения
 data - буфер чтения
 Data_Size - размер данных чтения
*/
void AT24C16_Read(uint8_t Dev_Adr, uint16_t Mem_Adr,uint8_t* data, uint16_t Data_Size)
{
 80007a8:	b590      	push	{r4, r7, lr}
 80007aa:	b08b      	sub	sp, #44	; 0x2c
 80007ac:	af04      	add	r7, sp, #16
 80007ae:	60ba      	str	r2, [r7, #8]
 80007b0:	461a      	mov	r2, r3
 80007b2:	4603      	mov	r3, r0
 80007b4:	73fb      	strb	r3, [r7, #15]
 80007b6:	460b      	mov	r3, r1
 80007b8:	81bb      	strh	r3, [r7, #12]
 80007ba:	4613      	mov	r3, r2
 80007bc:	80fb      	strh	r3, [r7, #6]

	uint8_t Page_count=Mem_Adr%16;
 80007be:	89bb      	ldrh	r3, [r7, #12]
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	f003 030f 	and.w	r3, r3, #15
 80007c6:	757b      	strb	r3, [r7, #21]

	Dev_Adr=AT24C16_Block_Count(Dev_Adr,Mem_Adr);
 80007c8:	89ba      	ldrh	r2, [r7, #12]
 80007ca:	7bfb      	ldrb	r3, [r7, #15]
 80007cc:	4611      	mov	r1, r2
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff fece 	bl	8000570 <AT24C16_Block_Count>
 80007d4:	4603      	mov	r3, r0
 80007d6:	73fb      	strb	r3, [r7, #15]
	if((16-Page_count)>Data_Size)
 80007d8:	7d7b      	ldrb	r3, [r7, #21]
 80007da:	f1c3 0210 	rsb	r2, r3, #16
 80007de:	88fb      	ldrh	r3, [r7, #6]
 80007e0:	429a      	cmp	r2, r3
 80007e2:	dd11      	ble.n	8000808 <AT24C16_Read+0x60>
	{
		while(HAL_I2C_Mem_Read(AT24C16_I2C, Dev_Adr, Mem_Adr, 1, data,Data_Size, 100)){};
 80007e4:	bf00      	nop
 80007e6:	7bfb      	ldrb	r3, [r7, #15]
 80007e8:	b299      	uxth	r1, r3
 80007ea:	89ba      	ldrh	r2, [r7, #12]
 80007ec:	2364      	movs	r3, #100	; 0x64
 80007ee:	9302      	str	r3, [sp, #8]
 80007f0:	88fb      	ldrh	r3, [r7, #6]
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	9300      	str	r3, [sp, #0]
 80007f8:	2301      	movs	r3, #1
 80007fa:	4846      	ldr	r0, [pc, #280]	; (8000914 <AT24C16_Read+0x16c>)
 80007fc:	f001 fcb4 	bl	8002168 <HAL_I2C_Mem_Read>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d1ef      	bne.n	80007e6 <AT24C16_Read+0x3e>
 8000806:	e02a      	b.n	800085e <AT24C16_Read+0xb6>
	}
	else
	{
		while(HAL_I2C_Mem_Read(AT24C16_I2C, Dev_Adr, Mem_Adr, 1, data, (16-Page_count), 100)){};
 8000808:	bf00      	nop
 800080a:	7bfb      	ldrb	r3, [r7, #15]
 800080c:	b299      	uxth	r1, r3
 800080e:	7d7b      	ldrb	r3, [r7, #21]
 8000810:	b29b      	uxth	r3, r3
 8000812:	f1c3 0310 	rsb	r3, r3, #16
 8000816:	b29b      	uxth	r3, r3
 8000818:	89b8      	ldrh	r0, [r7, #12]
 800081a:	2264      	movs	r2, #100	; 0x64
 800081c:	9202      	str	r2, [sp, #8]
 800081e:	9301      	str	r3, [sp, #4]
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	9300      	str	r3, [sp, #0]
 8000824:	2301      	movs	r3, #1
 8000826:	4602      	mov	r2, r0
 8000828:	483a      	ldr	r0, [pc, #232]	; (8000914 <AT24C16_Read+0x16c>)
 800082a:	f001 fc9d 	bl	8002168 <HAL_I2C_Mem_Read>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d1ea      	bne.n	800080a <AT24C16_Read+0x62>
		Data_Size=Data_Size-(16-Page_count);
 8000834:	7d7b      	ldrb	r3, [r7, #21]
 8000836:	b29a      	uxth	r2, r3
 8000838:	88fb      	ldrh	r3, [r7, #6]
 800083a:	4413      	add	r3, r2
 800083c:	b29b      	uxth	r3, r3
 800083e:	3b10      	subs	r3, #16
 8000840:	80fb      	strh	r3, [r7, #6]
		Mem_Adr=Mem_Adr+(16-Page_count);
 8000842:	7d7b      	ldrb	r3, [r7, #21]
 8000844:	b29b      	uxth	r3, r3
 8000846:	89ba      	ldrh	r2, [r7, #12]
 8000848:	1ad3      	subs	r3, r2, r3
 800084a:	b29b      	uxth	r3, r3
 800084c:	3310      	adds	r3, #16
 800084e:	81bb      	strh	r3, [r7, #12]
		data=data+(16-Page_count);
 8000850:	7d7b      	ldrb	r3, [r7, #21]
 8000852:	f1c3 0310 	rsb	r3, r3, #16
 8000856:	461a      	mov	r2, r3
 8000858:	68bb      	ldr	r3, [r7, #8]
 800085a:	4413      	add	r3, r2
 800085c:	60bb      	str	r3, [r7, #8]
	}
	for(uint16_t i=0;i<Data_Size/16;i++)
 800085e:	2300      	movs	r3, #0
 8000860:	82fb      	strh	r3, [r7, #22]
 8000862:	e023      	b.n	80008ac <AT24C16_Read+0x104>
	{
		Dev_Adr=AT24C16_Block_Count(Dev_Adr,Mem_Adr);
 8000864:	89ba      	ldrh	r2, [r7, #12]
 8000866:	7bfb      	ldrb	r3, [r7, #15]
 8000868:	4611      	mov	r1, r2
 800086a:	4618      	mov	r0, r3
 800086c:	f7ff fe80 	bl	8000570 <AT24C16_Block_Count>
 8000870:	4603      	mov	r3, r0
 8000872:	73fb      	strb	r3, [r7, #15]
		while(HAL_I2C_Mem_Read(AT24C16_I2C, Dev_Adr, Mem_Adr, 1, data+16*i, 16, 100)){};
 8000874:	bf00      	nop
 8000876:	7bfb      	ldrb	r3, [r7, #15]
 8000878:	b299      	uxth	r1, r3
 800087a:	8afb      	ldrh	r3, [r7, #22]
 800087c:	011b      	lsls	r3, r3, #4
 800087e:	461a      	mov	r2, r3
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	4413      	add	r3, r2
 8000884:	89b8      	ldrh	r0, [r7, #12]
 8000886:	2264      	movs	r2, #100	; 0x64
 8000888:	9202      	str	r2, [sp, #8]
 800088a:	2210      	movs	r2, #16
 800088c:	9201      	str	r2, [sp, #4]
 800088e:	9300      	str	r3, [sp, #0]
 8000890:	2301      	movs	r3, #1
 8000892:	4602      	mov	r2, r0
 8000894:	481f      	ldr	r0, [pc, #124]	; (8000914 <AT24C16_Read+0x16c>)
 8000896:	f001 fc67 	bl	8002168 <HAL_I2C_Mem_Read>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d1ea      	bne.n	8000876 <AT24C16_Read+0xce>
		Mem_Adr=Mem_Adr+16;
 80008a0:	89bb      	ldrh	r3, [r7, #12]
 80008a2:	3310      	adds	r3, #16
 80008a4:	81bb      	strh	r3, [r7, #12]
	for(uint16_t i=0;i<Data_Size/16;i++)
 80008a6:	8afb      	ldrh	r3, [r7, #22]
 80008a8:	3301      	adds	r3, #1
 80008aa:	82fb      	strh	r3, [r7, #22]
 80008ac:	88fb      	ldrh	r3, [r7, #6]
 80008ae:	091b      	lsrs	r3, r3, #4
 80008b0:	b29b      	uxth	r3, r3
 80008b2:	8afa      	ldrh	r2, [r7, #22]
 80008b4:	429a      	cmp	r2, r3
 80008b6:	d3d5      	bcc.n	8000864 <AT24C16_Read+0xbc>
	}
	if(Data_Size%16!=0)
 80008b8:	88fb      	ldrh	r3, [r7, #6]
 80008ba:	f003 030f 	and.w	r3, r3, #15
 80008be:	b29b      	uxth	r3, r3
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d023      	beq.n	800090c <AT24C16_Read+0x164>
	{
		Dev_Adr=AT24C16_Block_Count(Dev_Adr,Mem_Adr);
 80008c4:	89ba      	ldrh	r2, [r7, #12]
 80008c6:	7bfb      	ldrb	r3, [r7, #15]
 80008c8:	4611      	mov	r1, r2
 80008ca:	4618      	mov	r0, r3
 80008cc:	f7ff fe50 	bl	8000570 <AT24C16_Block_Count>
 80008d0:	4603      	mov	r3, r0
 80008d2:	73fb      	strb	r3, [r7, #15]
		while(HAL_I2C_Mem_Read(AT24C16_I2C, Dev_Adr, Mem_Adr, 1, data+16*(Data_Size/16), Data_Size%16, 100)){};
 80008d4:	bf00      	nop
 80008d6:	7bfb      	ldrb	r3, [r7, #15]
 80008d8:	b298      	uxth	r0, r3
 80008da:	88fb      	ldrh	r3, [r7, #6]
 80008dc:	091b      	lsrs	r3, r3, #4
 80008de:	b29b      	uxth	r3, r3
 80008e0:	011b      	lsls	r3, r3, #4
 80008e2:	461a      	mov	r2, r3
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	4413      	add	r3, r2
 80008e8:	88fa      	ldrh	r2, [r7, #6]
 80008ea:	f002 020f 	and.w	r2, r2, #15
 80008ee:	b292      	uxth	r2, r2
 80008f0:	89bc      	ldrh	r4, [r7, #12]
 80008f2:	2164      	movs	r1, #100	; 0x64
 80008f4:	9102      	str	r1, [sp, #8]
 80008f6:	9201      	str	r2, [sp, #4]
 80008f8:	9300      	str	r3, [sp, #0]
 80008fa:	2301      	movs	r3, #1
 80008fc:	4622      	mov	r2, r4
 80008fe:	4601      	mov	r1, r0
 8000900:	4804      	ldr	r0, [pc, #16]	; (8000914 <AT24C16_Read+0x16c>)
 8000902:	f001 fc31 	bl	8002168 <HAL_I2C_Mem_Read>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d1e4      	bne.n	80008d6 <AT24C16_Read+0x12e>
	}
}
 800090c:	bf00      	nop
 800090e:	371c      	adds	r7, #28
 8000910:	46bd      	mov	sp, r7
 8000912:	bd90      	pop	{r4, r7, pc}
 8000914:	20000098 	.word	0x20000098

08000918 <AT24C16_Search_Last>:
 Mem_Adr_Start - Начальный адрес(включая указанный адрес), с которого начинается поиск от 0 до 2047 (2048 адресов)
 Mem_Adr_Stop - Конечный адрес(включая указанный адрес), на котором заканчивается поиск от 0 до 2047 (2048 адресов)
 Возвращается адрес ближайшего пустого элемента
*/
uint16_t AT24C16_Search_Last(uint8_t Dev_Adr, uint16_t Mem_Adr_Start, uint16_t Mem_Adr_Stop)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b08c      	sub	sp, #48	; 0x30
 800091c:	af04      	add	r7, sp, #16
 800091e:	4603      	mov	r3, r0
 8000920:	71fb      	strb	r3, [r7, #7]
 8000922:	460b      	mov	r3, r1
 8000924:	80bb      	strh	r3, [r7, #4]
 8000926:	4613      	mov	r3, r2
 8000928:	807b      	strh	r3, [r7, #2]
	uint8_t Page_count=Mem_Adr_Start%16;
 800092a:	88bb      	ldrh	r3, [r7, #4]
 800092c:	b2db      	uxtb	r3, r3
 800092e:	f003 030f 	and.w	r3, r3, #15
 8000932:	767b      	strb	r3, [r7, #25]
	uint16_t Data_Size=Mem_Adr_Stop+1-Mem_Adr_Start;
 8000934:	887a      	ldrh	r2, [r7, #2]
 8000936:	88bb      	ldrh	r3, [r7, #4]
 8000938:	1ad3      	subs	r3, r2, r3
 800093a:	b29b      	uxth	r3, r3
 800093c:	3301      	adds	r3, #1
 800093e:	83fb      	strh	r3, [r7, #30]
	uint8_t data[16]={0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0};
 8000940:	f107 0308 	add.w	r3, r7, #8
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]
	uint8_t last_Adr_count=0;
 800094e:	2300      	movs	r3, #0
 8000950:	777b      	strb	r3, [r7, #29]
	Dev_Adr=AT24C16_Block_Count(Dev_Adr,Mem_Adr_Start);
 8000952:	88ba      	ldrh	r2, [r7, #4]
 8000954:	79fb      	ldrb	r3, [r7, #7]
 8000956:	4611      	mov	r1, r2
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff fe09 	bl	8000570 <AT24C16_Block_Count>
 800095e:	4603      	mov	r3, r0
 8000960:	71fb      	strb	r3, [r7, #7]
	if((16-Page_count)>Data_Size)
 8000962:	7e7b      	ldrb	r3, [r7, #25]
 8000964:	f1c3 0210 	rsb	r2, r3, #16
 8000968:	8bfb      	ldrh	r3, [r7, #30]
 800096a:	429a      	cmp	r2, r3
 800096c:	dd12      	ble.n	8000994 <AT24C16_Search_Last+0x7c>
	{
		while(HAL_I2C_Mem_Read(AT24C16_I2C, Dev_Adr, Mem_Adr_Start, 1, data, Data_Size, 100)){};
 800096e:	bf00      	nop
 8000970:	79fb      	ldrb	r3, [r7, #7]
 8000972:	b299      	uxth	r1, r3
 8000974:	88ba      	ldrh	r2, [r7, #4]
 8000976:	2364      	movs	r3, #100	; 0x64
 8000978:	9302      	str	r3, [sp, #8]
 800097a:	8bfb      	ldrh	r3, [r7, #30]
 800097c:	9301      	str	r3, [sp, #4]
 800097e:	f107 0308 	add.w	r3, r7, #8
 8000982:	9300      	str	r3, [sp, #0]
 8000984:	2301      	movs	r3, #1
 8000986:	4862      	ldr	r0, [pc, #392]	; (8000b10 <AT24C16_Search_Last+0x1f8>)
 8000988:	f001 fbee 	bl	8002168 <HAL_I2C_Mem_Read>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d1ee      	bne.n	8000970 <AT24C16_Search_Last+0x58>
 8000992:	e01d      	b.n	80009d0 <AT24C16_Search_Last+0xb8>
	}
	else
	{
		while(HAL_I2C_Mem_Read(AT24C16_I2C, Dev_Adr, Mem_Adr_Start, 1, data, (16-Page_count), 100)){};
 8000994:	bf00      	nop
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	b299      	uxth	r1, r3
 800099a:	7e7b      	ldrb	r3, [r7, #25]
 800099c:	b29b      	uxth	r3, r3
 800099e:	f1c3 0310 	rsb	r3, r3, #16
 80009a2:	b29b      	uxth	r3, r3
 80009a4:	88b8      	ldrh	r0, [r7, #4]
 80009a6:	2264      	movs	r2, #100	; 0x64
 80009a8:	9202      	str	r2, [sp, #8]
 80009aa:	9301      	str	r3, [sp, #4]
 80009ac:	f107 0308 	add.w	r3, r7, #8
 80009b0:	9300      	str	r3, [sp, #0]
 80009b2:	2301      	movs	r3, #1
 80009b4:	4602      	mov	r2, r0
 80009b6:	4856      	ldr	r0, [pc, #344]	; (8000b10 <AT24C16_Search_Last+0x1f8>)
 80009b8:	f001 fbd6 	bl	8002168 <HAL_I2C_Mem_Read>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d1e9      	bne.n	8000996 <AT24C16_Search_Last+0x7e>
		Data_Size=Data_Size-(16-Page_count);
 80009c2:	7e7b      	ldrb	r3, [r7, #25]
 80009c4:	b29a      	uxth	r2, r3
 80009c6:	8bfb      	ldrh	r3, [r7, #30]
 80009c8:	4413      	add	r3, r2
 80009ca:	b29b      	uxth	r3, r3
 80009cc:	3b10      	subs	r3, #16
 80009ce:	83fb      	strh	r3, [r7, #30]
	}
	for(last_Adr_count=0;last_Adr_count<16;last_Adr_count++)
 80009d0:	2300      	movs	r3, #0
 80009d2:	777b      	strb	r3, [r7, #29]
 80009d4:	e010      	b.n	80009f8 <AT24C16_Search_Last+0xe0>
	{
		if(data[last_Adr_count]==0xFF)
 80009d6:	7f7b      	ldrb	r3, [r7, #29]
 80009d8:	f107 0220 	add.w	r2, r7, #32
 80009dc:	4413      	add	r3, r2
 80009de:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80009e2:	2bff      	cmp	r3, #255	; 0xff
 80009e4:	d105      	bne.n	80009f2 <AT24C16_Search_Last+0xda>
		   return (Mem_Adr_Start+last_Adr_count);
 80009e6:	7f7b      	ldrb	r3, [r7, #29]
 80009e8:	b29a      	uxth	r2, r3
 80009ea:	88bb      	ldrh	r3, [r7, #4]
 80009ec:	4413      	add	r3, r2
 80009ee:	b29b      	uxth	r3, r3
 80009f0:	e089      	b.n	8000b06 <AT24C16_Search_Last+0x1ee>
	for(last_Adr_count=0;last_Adr_count<16;last_Adr_count++)
 80009f2:	7f7b      	ldrb	r3, [r7, #29]
 80009f4:	3301      	adds	r3, #1
 80009f6:	777b      	strb	r3, [r7, #29]
 80009f8:	7f7b      	ldrb	r3, [r7, #29]
 80009fa:	2b0f      	cmp	r3, #15
 80009fc:	d9eb      	bls.n	80009d6 <AT24C16_Search_Last+0xbe>
	}
	Mem_Adr_Start=Mem_Adr_Start+(16-Page_count);
 80009fe:	7e7b      	ldrb	r3, [r7, #25]
 8000a00:	b29b      	uxth	r3, r3
 8000a02:	88ba      	ldrh	r2, [r7, #4]
 8000a04:	1ad3      	subs	r3, r2, r3
 8000a06:	b29b      	uxth	r3, r3
 8000a08:	3310      	adds	r3, #16
 8000a0a:	80bb      	strh	r3, [r7, #4]
	for(uint16_t i=0;i<Data_Size/16;i++)
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	837b      	strh	r3, [r7, #26]
 8000a10:	e036      	b.n	8000a80 <AT24C16_Search_Last+0x168>
	{
		Dev_Adr=AT24C16_Block_Count(Dev_Adr,Mem_Adr_Start);
 8000a12:	88ba      	ldrh	r2, [r7, #4]
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	4611      	mov	r1, r2
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff fda9 	bl	8000570 <AT24C16_Block_Count>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	71fb      	strb	r3, [r7, #7]
		while(HAL_I2C_Mem_Read(AT24C16_I2C, Dev_Adr, Mem_Adr_Start, 1, data, 16, 100)){};
 8000a22:	bf00      	nop
 8000a24:	79fb      	ldrb	r3, [r7, #7]
 8000a26:	b299      	uxth	r1, r3
 8000a28:	88ba      	ldrh	r2, [r7, #4]
 8000a2a:	2364      	movs	r3, #100	; 0x64
 8000a2c:	9302      	str	r3, [sp, #8]
 8000a2e:	2310      	movs	r3, #16
 8000a30:	9301      	str	r3, [sp, #4]
 8000a32:	f107 0308 	add.w	r3, r7, #8
 8000a36:	9300      	str	r3, [sp, #0]
 8000a38:	2301      	movs	r3, #1
 8000a3a:	4835      	ldr	r0, [pc, #212]	; (8000b10 <AT24C16_Search_Last+0x1f8>)
 8000a3c:	f001 fb94 	bl	8002168 <HAL_I2C_Mem_Read>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d1ee      	bne.n	8000a24 <AT24C16_Search_Last+0x10c>
		for(last_Adr_count=0;last_Adr_count<16;last_Adr_count++)
 8000a46:	2300      	movs	r3, #0
 8000a48:	777b      	strb	r3, [r7, #29]
 8000a4a:	e010      	b.n	8000a6e <AT24C16_Search_Last+0x156>
			{
				if(data[last_Adr_count]==0xFF)
 8000a4c:	7f7b      	ldrb	r3, [r7, #29]
 8000a4e:	f107 0220 	add.w	r2, r7, #32
 8000a52:	4413      	add	r3, r2
 8000a54:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000a58:	2bff      	cmp	r3, #255	; 0xff
 8000a5a:	d105      	bne.n	8000a68 <AT24C16_Search_Last+0x150>
				   return (Mem_Adr_Start+last_Adr_count);
 8000a5c:	7f7b      	ldrb	r3, [r7, #29]
 8000a5e:	b29a      	uxth	r2, r3
 8000a60:	88bb      	ldrh	r3, [r7, #4]
 8000a62:	4413      	add	r3, r2
 8000a64:	b29b      	uxth	r3, r3
 8000a66:	e04e      	b.n	8000b06 <AT24C16_Search_Last+0x1ee>
		for(last_Adr_count=0;last_Adr_count<16;last_Adr_count++)
 8000a68:	7f7b      	ldrb	r3, [r7, #29]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	777b      	strb	r3, [r7, #29]
 8000a6e:	7f7b      	ldrb	r3, [r7, #29]
 8000a70:	2b0f      	cmp	r3, #15
 8000a72:	d9eb      	bls.n	8000a4c <AT24C16_Search_Last+0x134>
			}
		Mem_Adr_Start=Mem_Adr_Start+16;
 8000a74:	88bb      	ldrh	r3, [r7, #4]
 8000a76:	3310      	adds	r3, #16
 8000a78:	80bb      	strh	r3, [r7, #4]
	for(uint16_t i=0;i<Data_Size/16;i++)
 8000a7a:	8b7b      	ldrh	r3, [r7, #26]
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	837b      	strh	r3, [r7, #26]
 8000a80:	8bfb      	ldrh	r3, [r7, #30]
 8000a82:	091b      	lsrs	r3, r3, #4
 8000a84:	b29b      	uxth	r3, r3
 8000a86:	8b7a      	ldrh	r2, [r7, #26]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	d3c2      	bcc.n	8000a12 <AT24C16_Search_Last+0xfa>
	}
	if(Data_Size%16!=0)
 8000a8c:	8bfb      	ldrh	r3, [r7, #30]
 8000a8e:	f003 030f 	and.w	r3, r3, #15
 8000a92:	b29b      	uxth	r3, r3
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d01d      	beq.n	8000ad4 <AT24C16_Search_Last+0x1bc>
	{
		Dev_Adr=AT24C16_Block_Count(Dev_Adr,Mem_Adr_Start);
 8000a98:	88ba      	ldrh	r2, [r7, #4]
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	4611      	mov	r1, r2
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f7ff fd66 	bl	8000570 <AT24C16_Block_Count>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	71fb      	strb	r3, [r7, #7]
		while(HAL_I2C_Mem_Read(AT24C16_I2C, Dev_Adr, Mem_Adr_Start, 1, data, Data_Size%16, 100)){};
 8000aa8:	bf00      	nop
 8000aaa:	79fb      	ldrb	r3, [r7, #7]
 8000aac:	b299      	uxth	r1, r3
 8000aae:	8bfb      	ldrh	r3, [r7, #30]
 8000ab0:	f003 030f 	and.w	r3, r3, #15
 8000ab4:	b29b      	uxth	r3, r3
 8000ab6:	88b8      	ldrh	r0, [r7, #4]
 8000ab8:	2264      	movs	r2, #100	; 0x64
 8000aba:	9202      	str	r2, [sp, #8]
 8000abc:	9301      	str	r3, [sp, #4]
 8000abe:	f107 0308 	add.w	r3, r7, #8
 8000ac2:	9300      	str	r3, [sp, #0]
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	4602      	mov	r2, r0
 8000ac8:	4811      	ldr	r0, [pc, #68]	; (8000b10 <AT24C16_Search_Last+0x1f8>)
 8000aca:	f001 fb4d 	bl	8002168 <HAL_I2C_Mem_Read>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d1ea      	bne.n	8000aaa <AT24C16_Search_Last+0x192>
	}
	for(last_Adr_count=0;last_Adr_count<16;last_Adr_count++)
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	777b      	strb	r3, [r7, #29]
 8000ad8:	e010      	b.n	8000afc <AT24C16_Search_Last+0x1e4>
	{
		if(data[last_Adr_count]==0xFF)
 8000ada:	7f7b      	ldrb	r3, [r7, #29]
 8000adc:	f107 0220 	add.w	r2, r7, #32
 8000ae0:	4413      	add	r3, r2
 8000ae2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000ae6:	2bff      	cmp	r3, #255	; 0xff
 8000ae8:	d105      	bne.n	8000af6 <AT24C16_Search_Last+0x1de>
		   return (Mem_Adr_Start+last_Adr_count);
 8000aea:	7f7b      	ldrb	r3, [r7, #29]
 8000aec:	b29a      	uxth	r2, r3
 8000aee:	88bb      	ldrh	r3, [r7, #4]
 8000af0:	4413      	add	r3, r2
 8000af2:	b29b      	uxth	r3, r3
 8000af4:	e007      	b.n	8000b06 <AT24C16_Search_Last+0x1ee>
	for(last_Adr_count=0;last_Adr_count<16;last_Adr_count++)
 8000af6:	7f7b      	ldrb	r3, [r7, #29]
 8000af8:	3301      	adds	r3, #1
 8000afa:	777b      	strb	r3, [r7, #29]
 8000afc:	7f7b      	ldrb	r3, [r7, #29]
 8000afe:	2b0f      	cmp	r3, #15
 8000b00:	d9eb      	bls.n	8000ada <AT24C16_Search_Last+0x1c2>
	}

	return 2048;
 8000b02:	f44f 6300 	mov.w	r3, #2048	; 0x800
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3720      	adds	r7, #32
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20000098 	.word	0x20000098

08000b14 <AT24C16_Erase>:
 Dev_Adr - адрес AT24C16
 Mem_Adr_Start - Начальный адрес(включая указанный адрес), с которого начинается удаление от 0 до 2047 (2048 адресов)
 Mem_Adr_Stop - Конечный адрес(включая указанный адрес), на котором заканчивается удаление от 0 до 2047 (2048 адресов)
*/
void AT24C16_Erase(uint8_t Dev_Adr, uint16_t Mem_Adr_Start, uint16_t Mem_Adr_Stop)
{
 8000b14:	b590      	push	{r4, r7, lr}
 8000b16:	b08d      	sub	sp, #52	; 0x34
 8000b18:	af04      	add	r7, sp, #16
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	71fb      	strb	r3, [r7, #7]
 8000b1e:	460b      	mov	r3, r1
 8000b20:	80bb      	strh	r3, [r7, #4]
 8000b22:	4613      	mov	r3, r2
 8000b24:	807b      	strh	r3, [r7, #2]
	uint8_t EraseBuff[16]={0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF};
 8000b26:	4b54      	ldr	r3, [pc, #336]	; (8000c78 <AT24C16_Erase+0x164>)
 8000b28:	f107 040c 	add.w	r4, r7, #12
 8000b2c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b2e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t Page_count=Mem_Adr_Start%16;
 8000b32:	88bb      	ldrh	r3, [r7, #4]
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	f003 030f 	and.w	r3, r3, #15
 8000b3a:	773b      	strb	r3, [r7, #28]
	uint16_t Data_Size=Mem_Adr_Stop+1-Mem_Adr_Start;
 8000b3c:	887a      	ldrh	r2, [r7, #2]
 8000b3e:	88bb      	ldrh	r3, [r7, #4]
 8000b40:	1ad3      	subs	r3, r2, r3
 8000b42:	b29b      	uxth	r3, r3
 8000b44:	3301      	adds	r3, #1
 8000b46:	83fb      	strh	r3, [r7, #30]
	Dev_Adr=AT24C16_Block_Count(Dev_Adr,Mem_Adr_Start);
 8000b48:	88ba      	ldrh	r2, [r7, #4]
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	4611      	mov	r1, r2
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f7ff fd0e 	bl	8000570 <AT24C16_Block_Count>
 8000b54:	4603      	mov	r3, r0
 8000b56:	71fb      	strb	r3, [r7, #7]
	if((16-Page_count)>Data_Size)
 8000b58:	7f3b      	ldrb	r3, [r7, #28]
 8000b5a:	f1c3 0210 	rsb	r2, r3, #16
 8000b5e:	8bfb      	ldrh	r3, [r7, #30]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	dd12      	ble.n	8000b8a <AT24C16_Erase+0x76>
	{
		while(HAL_I2C_Mem_Write(AT24C16_I2C, Dev_Adr, Mem_Adr_Start, 1, EraseBuff, Data_Size, 100)){};
 8000b64:	bf00      	nop
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	b299      	uxth	r1, r3
 8000b6a:	88ba      	ldrh	r2, [r7, #4]
 8000b6c:	2364      	movs	r3, #100	; 0x64
 8000b6e:	9302      	str	r3, [sp, #8]
 8000b70:	8bfb      	ldrh	r3, [r7, #30]
 8000b72:	9301      	str	r3, [sp, #4]
 8000b74:	f107 030c 	add.w	r3, r7, #12
 8000b78:	9300      	str	r3, [sp, #0]
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	483f      	ldr	r0, [pc, #252]	; (8000c7c <AT24C16_Erase+0x168>)
 8000b7e:	f001 f9df 	bl	8001f40 <HAL_I2C_Mem_Write>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d1ee      	bne.n	8000b66 <AT24C16_Erase+0x52>
 8000b88:	e024      	b.n	8000bd4 <AT24C16_Erase+0xc0>
	}
	else
	{
		while(HAL_I2C_Mem_Write(AT24C16_I2C, Dev_Adr, Mem_Adr_Start, 1, EraseBuff, (16-Page_count), 100)){};
 8000b8a:	bf00      	nop
 8000b8c:	79fb      	ldrb	r3, [r7, #7]
 8000b8e:	b299      	uxth	r1, r3
 8000b90:	7f3b      	ldrb	r3, [r7, #28]
 8000b92:	b29b      	uxth	r3, r3
 8000b94:	f1c3 0310 	rsb	r3, r3, #16
 8000b98:	b29b      	uxth	r3, r3
 8000b9a:	88b8      	ldrh	r0, [r7, #4]
 8000b9c:	2264      	movs	r2, #100	; 0x64
 8000b9e:	9202      	str	r2, [sp, #8]
 8000ba0:	9301      	str	r3, [sp, #4]
 8000ba2:	f107 030c 	add.w	r3, r7, #12
 8000ba6:	9300      	str	r3, [sp, #0]
 8000ba8:	2301      	movs	r3, #1
 8000baa:	4602      	mov	r2, r0
 8000bac:	4833      	ldr	r0, [pc, #204]	; (8000c7c <AT24C16_Erase+0x168>)
 8000bae:	f001 f9c7 	bl	8001f40 <HAL_I2C_Mem_Write>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d1e9      	bne.n	8000b8c <AT24C16_Erase+0x78>
		Data_Size=Data_Size-(16-Page_count);
 8000bb8:	7f3b      	ldrb	r3, [r7, #28]
 8000bba:	b29a      	uxth	r2, r3
 8000bbc:	8bfb      	ldrh	r3, [r7, #30]
 8000bbe:	4413      	add	r3, r2
 8000bc0:	b29b      	uxth	r3, r3
 8000bc2:	3b10      	subs	r3, #16
 8000bc4:	83fb      	strh	r3, [r7, #30]
		Mem_Adr_Start=Mem_Adr_Start+(16-Page_count);
 8000bc6:	7f3b      	ldrb	r3, [r7, #28]
 8000bc8:	b29b      	uxth	r3, r3
 8000bca:	88ba      	ldrh	r2, [r7, #4]
 8000bcc:	1ad3      	subs	r3, r2, r3
 8000bce:	b29b      	uxth	r3, r3
 8000bd0:	3310      	adds	r3, #16
 8000bd2:	80bb      	strh	r3, [r7, #4]
	}

	for(uint8_t i=0;i<Data_Size/16;i++)
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	777b      	strb	r3, [r7, #29]
 8000bd8:	e01f      	b.n	8000c1a <AT24C16_Erase+0x106>
	{
		Dev_Adr=AT24C16_Block_Count(Dev_Adr,Mem_Adr_Start);
 8000bda:	88ba      	ldrh	r2, [r7, #4]
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	4611      	mov	r1, r2
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff fcc5 	bl	8000570 <AT24C16_Block_Count>
 8000be6:	4603      	mov	r3, r0
 8000be8:	71fb      	strb	r3, [r7, #7]
		while(HAL_I2C_Mem_Write(AT24C16_I2C, Dev_Adr, Mem_Adr_Start, 1, EraseBuff, 16, 100)){};
 8000bea:	bf00      	nop
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	b299      	uxth	r1, r3
 8000bf0:	88ba      	ldrh	r2, [r7, #4]
 8000bf2:	2364      	movs	r3, #100	; 0x64
 8000bf4:	9302      	str	r3, [sp, #8]
 8000bf6:	2310      	movs	r3, #16
 8000bf8:	9301      	str	r3, [sp, #4]
 8000bfa:	f107 030c 	add.w	r3, r7, #12
 8000bfe:	9300      	str	r3, [sp, #0]
 8000c00:	2301      	movs	r3, #1
 8000c02:	481e      	ldr	r0, [pc, #120]	; (8000c7c <AT24C16_Erase+0x168>)
 8000c04:	f001 f99c 	bl	8001f40 <HAL_I2C_Mem_Write>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d1ee      	bne.n	8000bec <AT24C16_Erase+0xd8>
		Mem_Adr_Start=Mem_Adr_Start+16;
 8000c0e:	88bb      	ldrh	r3, [r7, #4]
 8000c10:	3310      	adds	r3, #16
 8000c12:	80bb      	strh	r3, [r7, #4]
	for(uint8_t i=0;i<Data_Size/16;i++)
 8000c14:	7f7b      	ldrb	r3, [r7, #29]
 8000c16:	3301      	adds	r3, #1
 8000c18:	777b      	strb	r3, [r7, #29]
 8000c1a:	7f7b      	ldrb	r3, [r7, #29]
 8000c1c:	b29a      	uxth	r2, r3
 8000c1e:	8bfb      	ldrh	r3, [r7, #30]
 8000c20:	091b      	lsrs	r3, r3, #4
 8000c22:	b29b      	uxth	r3, r3
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d3d8      	bcc.n	8000bda <AT24C16_Erase+0xc6>
	}
	if(Data_Size%16!=0)
 8000c28:	8bfb      	ldrh	r3, [r7, #30]
 8000c2a:	f003 030f 	and.w	r3, r3, #15
 8000c2e:	b29b      	uxth	r3, r3
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d01d      	beq.n	8000c70 <AT24C16_Erase+0x15c>
	{
		Dev_Adr=AT24C16_Block_Count(Dev_Adr,Mem_Adr_Start);
 8000c34:	88ba      	ldrh	r2, [r7, #4]
 8000c36:	79fb      	ldrb	r3, [r7, #7]
 8000c38:	4611      	mov	r1, r2
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f7ff fc98 	bl	8000570 <AT24C16_Block_Count>
 8000c40:	4603      	mov	r3, r0
 8000c42:	71fb      	strb	r3, [r7, #7]
		while(HAL_I2C_Mem_Write(AT24C16_I2C, Dev_Adr, Mem_Adr_Start, 1, EraseBuff, Data_Size%16, 100)){};
 8000c44:	bf00      	nop
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	b299      	uxth	r1, r3
 8000c4a:	8bfb      	ldrh	r3, [r7, #30]
 8000c4c:	f003 030f 	and.w	r3, r3, #15
 8000c50:	b29b      	uxth	r3, r3
 8000c52:	88b8      	ldrh	r0, [r7, #4]
 8000c54:	2264      	movs	r2, #100	; 0x64
 8000c56:	9202      	str	r2, [sp, #8]
 8000c58:	9301      	str	r3, [sp, #4]
 8000c5a:	f107 030c 	add.w	r3, r7, #12
 8000c5e:	9300      	str	r3, [sp, #0]
 8000c60:	2301      	movs	r3, #1
 8000c62:	4602      	mov	r2, r0
 8000c64:	4805      	ldr	r0, [pc, #20]	; (8000c7c <AT24C16_Erase+0x168>)
 8000c66:	f001 f96b 	bl	8001f40 <HAL_I2C_Mem_Write>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d1ea      	bne.n	8000c46 <AT24C16_Erase+0x132>
	}
}
 8000c70:	bf00      	nop
 8000c72:	3724      	adds	r7, #36	; 0x24
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd90      	pop	{r4, r7, pc}
 8000c78:	080057a8 	.word	0x080057a8
 8000c7c:	20000098 	.word	0x20000098

08000c80 <__io_putchar>:
	ITM_SendChar(ch);
	return(ch);
}
*/
int __io_putchar(int ch)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]

	 HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000c88:	1d39      	adds	r1, r7, #4
 8000c8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c8e:	2201      	movs	r2, #1
 8000c90:	4803      	ldr	r0, [pc, #12]	; (8000ca0 <__io_putchar+0x20>)
 8000c92:	f003 f983 	bl	8003f9c <HAL_UART_Transmit>
	 return ch;
 8000c96:	687b      	ldr	r3, [r7, #4]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3708      	adds	r7, #8
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	200000e4 	.word	0x200000e4

08000ca4 <_write>:

int  _write(int file, char *ptr, int len)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b086      	sub	sp, #24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	60f8      	str	r0, [r7, #12]
 8000cac:	60b9      	str	r1, [r7, #8]
 8000cae:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	617b      	str	r3, [r7, #20]
 8000cb4:	e009      	b.n	8000cca <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	1c5a      	adds	r2, r3, #1
 8000cba:	60ba      	str	r2, [r7, #8]
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff ffde 	bl	8000c80 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	617b      	str	r3, [r7, #20]
 8000cca:	697a      	ldr	r2, [r7, #20]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	429a      	cmp	r2, r3
 8000cd0:	dbf1      	blt.n	8000cb6 <_write+0x12>
	}
	return   len;
 8000cd2:	687b      	ldr	r3, [r7, #4]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3718      	adds	r7, #24
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	f5ad 5d80 	sub.w	sp, sp, #4096	; 0x1000
 8000ce2:	b086      	sub	sp, #24
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ce6:	f000 fd57 	bl	8001798 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cea:	f000 fa45 	bl	8001178 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cee:	f000 fb2b 	bl	8001348 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000cf2:	f000 fab9 	bl	8001268 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000cf6:	f000 faf7 	bl	80012e8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t dataWrite[2048];
  uint8_t dataRead[2048];


  for(uint16_t i=0;i<256;i++)
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8000d00:	f102 0216 	add.w	r2, r2, #22
 8000d04:	8013      	strh	r3, [r2, #0]
 8000d06:	e018      	b.n	8000d3a <main+0x5e>
  {

	  dataWrite[i]=i;
 8000d08:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8000d0c:	f103 0316 	add.w	r3, r3, #22
 8000d10:	881b      	ldrh	r3, [r3, #0]
 8000d12:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8000d16:	f102 0216 	add.w	r2, r2, #22
 8000d1a:	8812      	ldrh	r2, [r2, #0]
 8000d1c:	b2d1      	uxtb	r1, r2
 8000d1e:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 8000d22:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0;i<256;i++)
 8000d24:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8000d28:	f103 0316 	add.w	r3, r3, #22
 8000d2c:	881b      	ldrh	r3, [r3, #0]
 8000d2e:	3301      	adds	r3, #1
 8000d30:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8000d34:	f102 0216 	add.w	r2, r2, #22
 8000d38:	8013      	strh	r3, [r2, #0]
 8000d3a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8000d3e:	f103 0316 	add.w	r3, r3, #22
 8000d42:	881b      	ldrh	r3, [r3, #0]
 8000d44:	2bff      	cmp	r3, #255	; 0xff
 8000d46:	d9df      	bls.n	8000d08 <main+0x2c>
  }
  for(uint16_t i=256;i<512;i++)
 8000d48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d4c:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8000d50:	f102 0214 	add.w	r2, r2, #20
 8000d54:	8013      	strh	r3, [r2, #0]
 8000d56:	e018      	b.n	8000d8a <main+0xae>
  {

	  dataWrite[i]=i-256;
 8000d58:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8000d5c:	f103 0314 	add.w	r3, r3, #20
 8000d60:	881b      	ldrh	r3, [r3, #0]
 8000d62:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8000d66:	f102 0214 	add.w	r2, r2, #20
 8000d6a:	8812      	ldrh	r2, [r2, #0]
 8000d6c:	b2d1      	uxtb	r1, r2
 8000d6e:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 8000d72:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=256;i<512;i++)
 8000d74:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8000d78:	f103 0314 	add.w	r3, r3, #20
 8000d7c:	881b      	ldrh	r3, [r3, #0]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8000d84:	f102 0214 	add.w	r2, r2, #20
 8000d88:	8013      	strh	r3, [r2, #0]
 8000d8a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8000d8e:	f103 0314 	add.w	r3, r3, #20
 8000d92:	881b      	ldrh	r3, [r3, #0]
 8000d94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d98:	d3de      	bcc.n	8000d58 <main+0x7c>
  }
  for(uint16_t i=512;i<768;i++)
 8000d9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d9e:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8000da2:	f102 0212 	add.w	r2, r2, #18
 8000da6:	8013      	strh	r3, [r2, #0]
 8000da8:	e018      	b.n	8000ddc <main+0x100>
  {

	  dataWrite[i]=i-512;
 8000daa:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8000dae:	f103 0312 	add.w	r3, r3, #18
 8000db2:	881b      	ldrh	r3, [r3, #0]
 8000db4:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8000db8:	f102 0212 	add.w	r2, r2, #18
 8000dbc:	8812      	ldrh	r2, [r2, #0]
 8000dbe:	b2d1      	uxtb	r1, r2
 8000dc0:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 8000dc4:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=512;i<768;i++)
 8000dc6:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8000dca:	f103 0312 	add.w	r3, r3, #18
 8000dce:	881b      	ldrh	r3, [r3, #0]
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8000dd6:	f102 0212 	add.w	r2, r2, #18
 8000dda:	8013      	strh	r3, [r2, #0]
 8000ddc:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8000de0:	f103 0312 	add.w	r3, r3, #18
 8000de4:	881b      	ldrh	r3, [r3, #0]
 8000de6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000dea:	d3de      	bcc.n	8000daa <main+0xce>
  }
  for(uint16_t i=768;i<1024;i++)
 8000dec:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000df0:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8000df4:	f102 0210 	add.w	r2, r2, #16
 8000df8:	8013      	strh	r3, [r2, #0]
 8000dfa:	e018      	b.n	8000e2e <main+0x152>
  {

	  dataWrite[i]=i-768;
 8000dfc:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8000e00:	f103 0310 	add.w	r3, r3, #16
 8000e04:	881b      	ldrh	r3, [r3, #0]
 8000e06:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8000e0a:	f102 0210 	add.w	r2, r2, #16
 8000e0e:	8812      	ldrh	r2, [r2, #0]
 8000e10:	b2d1      	uxtb	r1, r2
 8000e12:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 8000e16:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=768;i<1024;i++)
 8000e18:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8000e1c:	f103 0310 	add.w	r3, r3, #16
 8000e20:	881b      	ldrh	r3, [r3, #0]
 8000e22:	3301      	adds	r3, #1
 8000e24:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8000e28:	f102 0210 	add.w	r2, r2, #16
 8000e2c:	8013      	strh	r3, [r2, #0]
 8000e2e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8000e32:	f103 0310 	add.w	r3, r3, #16
 8000e36:	881b      	ldrh	r3, [r3, #0]
 8000e38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e3c:	d3de      	bcc.n	8000dfc <main+0x120>
  }
  for(uint16_t i=1024;i<1280;i++)
 8000e3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e42:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8000e46:	f102 020e 	add.w	r2, r2, #14
 8000e4a:	8013      	strh	r3, [r2, #0]
 8000e4c:	e018      	b.n	8000e80 <main+0x1a4>
  {

	  dataWrite[i]=i-1024;
 8000e4e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8000e52:	f103 030e 	add.w	r3, r3, #14
 8000e56:	881b      	ldrh	r3, [r3, #0]
 8000e58:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8000e5c:	f102 020e 	add.w	r2, r2, #14
 8000e60:	8812      	ldrh	r2, [r2, #0]
 8000e62:	b2d1      	uxtb	r1, r2
 8000e64:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 8000e68:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=1024;i<1280;i++)
 8000e6a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8000e6e:	f103 030e 	add.w	r3, r3, #14
 8000e72:	881b      	ldrh	r3, [r3, #0]
 8000e74:	3301      	adds	r3, #1
 8000e76:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8000e7a:	f102 020e 	add.w	r2, r2, #14
 8000e7e:	8013      	strh	r3, [r2, #0]
 8000e80:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8000e84:	f103 030e 	add.w	r3, r3, #14
 8000e88:	881b      	ldrh	r3, [r3, #0]
 8000e8a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000e8e:	d3de      	bcc.n	8000e4e <main+0x172>
  }
  for(uint16_t i=1280;i<1536;i++)
 8000e90:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000e94:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8000e98:	f102 020c 	add.w	r2, r2, #12
 8000e9c:	8013      	strh	r3, [r2, #0]
 8000e9e:	e018      	b.n	8000ed2 <main+0x1f6>
  {

	  dataWrite[i]=i-1280;
 8000ea0:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8000ea4:	f103 030c 	add.w	r3, r3, #12
 8000ea8:	881b      	ldrh	r3, [r3, #0]
 8000eaa:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8000eae:	f102 020c 	add.w	r2, r2, #12
 8000eb2:	8812      	ldrh	r2, [r2, #0]
 8000eb4:	b2d1      	uxtb	r1, r2
 8000eb6:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 8000eba:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=1280;i<1536;i++)
 8000ebc:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8000ec0:	f103 030c 	add.w	r3, r3, #12
 8000ec4:	881b      	ldrh	r3, [r3, #0]
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8000ecc:	f102 020c 	add.w	r2, r2, #12
 8000ed0:	8013      	strh	r3, [r2, #0]
 8000ed2:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8000ed6:	f103 030c 	add.w	r3, r3, #12
 8000eda:	881b      	ldrh	r3, [r3, #0]
 8000edc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8000ee0:	d3de      	bcc.n	8000ea0 <main+0x1c4>
  }
  for(uint16_t i=1536;i<1792;i++)
 8000ee2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000ee6:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8000eea:	f102 020a 	add.w	r2, r2, #10
 8000eee:	8013      	strh	r3, [r2, #0]
 8000ef0:	e018      	b.n	8000f24 <main+0x248>
  {

	  dataWrite[i]=i-1536;
 8000ef2:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8000ef6:	f103 030a 	add.w	r3, r3, #10
 8000efa:	881b      	ldrh	r3, [r3, #0]
 8000efc:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8000f00:	f102 020a 	add.w	r2, r2, #10
 8000f04:	8812      	ldrh	r2, [r2, #0]
 8000f06:	b2d1      	uxtb	r1, r2
 8000f08:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 8000f0c:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=1536;i<1792;i++)
 8000f0e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8000f12:	f103 030a 	add.w	r3, r3, #10
 8000f16:	881b      	ldrh	r3, [r3, #0]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8000f1e:	f102 020a 	add.w	r2, r2, #10
 8000f22:	8013      	strh	r3, [r2, #0]
 8000f24:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8000f28:	f103 030a 	add.w	r3, r3, #10
 8000f2c:	881b      	ldrh	r3, [r3, #0]
 8000f2e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8000f32:	d3de      	bcc.n	8000ef2 <main+0x216>
  }
  for(uint16_t i=1792;i<2048;i++)
 8000f34:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000f38:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8000f3c:	f102 0208 	add.w	r2, r2, #8
 8000f40:	8013      	strh	r3, [r2, #0]
 8000f42:	e018      	b.n	8000f76 <main+0x29a>
  {

	  dataWrite[i]=i-1792;
 8000f44:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8000f48:	f103 0308 	add.w	r3, r3, #8
 8000f4c:	881b      	ldrh	r3, [r3, #0]
 8000f4e:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8000f52:	f102 0208 	add.w	r2, r2, #8
 8000f56:	8812      	ldrh	r2, [r2, #0]
 8000f58:	b2d1      	uxtb	r1, r2
 8000f5a:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 8000f5e:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=1792;i<2048;i++)
 8000f60:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8000f64:	f103 0308 	add.w	r3, r3, #8
 8000f68:	881b      	ldrh	r3, [r3, #0]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8000f70:	f102 0208 	add.w	r2, r2, #8
 8000f74:	8013      	strh	r3, [r2, #0]
 8000f76:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8000f7a:	f103 0308 	add.w	r3, r3, #8
 8000f7e:	881b      	ldrh	r3, [r3, #0]
 8000f80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000f84:	d3de      	bcc.n	8000f44 <main+0x268>
  }
  dataWrite[255]=20;
 8000f86:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 8000f8a:	2214      	movs	r2, #20
 8000f8c:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
  dataWrite[511]=30;
 8000f90:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 8000f94:	221e      	movs	r2, #30
 8000f96:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
  dataWrite[767]=40;
 8000f9a:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 8000f9e:	2228      	movs	r2, #40	; 0x28
 8000fa0:	f883 22ff 	strb.w	r2, [r3, #767]	; 0x2ff
  dataWrite[1023]=50;
 8000fa4:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 8000fa8:	2232      	movs	r2, #50	; 0x32
 8000faa:	f883 23ff 	strb.w	r2, [r3, #1023]	; 0x3ff
  dataWrite[1279]=60;
 8000fae:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 8000fb2:	223c      	movs	r2, #60	; 0x3c
 8000fb4:	f883 24ff 	strb.w	r2, [r3, #1279]	; 0x4ff
  dataWrite[1535]=70;
 8000fb8:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 8000fbc:	2246      	movs	r2, #70	; 0x46
 8000fbe:	f883 25ff 	strb.w	r2, [r3, #1535]	; 0x5ff
  dataWrite[1791]=80;
 8000fc2:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 8000fc6:	2250      	movs	r2, #80	; 0x50
 8000fc8:	f883 26ff 	strb.w	r2, [r3, #1791]	; 0x6ff
  dataWrite[2047]=90;
 8000fcc:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 8000fd0:	225a      	movs	r2, #90	; 0x5a
 8000fd2:	f883 27ff 	strb.w	r2, [r3, #2047]	; 0x7ff
  AT24C16_Erase(Adr_AT24C16,0,2047);
 8000fd6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000fda:	2100      	movs	r1, #0
 8000fdc:	20a0      	movs	r0, #160	; 0xa0
 8000fde:	f7ff fd99 	bl	8000b14 <AT24C16_Erase>
  AT24C16_Write(Adr_AT24C16,0,dataWrite,2048);
 8000fe2:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 8000fe6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000fea:	2100      	movs	r1, #0
 8000fec:	20a0      	movs	r0, #160	; 0xa0
 8000fee:	f7ff fb21 	bl	8000634 <AT24C16_Write>
  AT24C16_Read(Adr_AT24C16,0,dataRead,2048);
 8000ff2:	f107 0218 	add.w	r2, r7, #24
 8000ff6:	3a18      	subs	r2, #24
 8000ff8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	20a0      	movs	r0, #160	; 0xa0
 8001000:	f7ff fbd2 	bl	80007a8 <AT24C16_Read>
  uint16_t ADR=AT24C16_Search_Last(Adr_AT24C16,5,2047);
 8001004:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001008:	2105      	movs	r1, #5
 800100a:	20a0      	movs	r0, #160	; 0xa0
 800100c:	f7ff fc84 	bl	8000918 <AT24C16_Search_Last>
 8001010:	4603      	mov	r3, r0
 8001012:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001016:	f102 0202 	add.w	r2, r2, #2
 800101a:	8013      	strh	r3, [r2, #0]
  printf("Last adr=%d\n",ADR);
 800101c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001020:	f103 0302 	add.w	r3, r3, #2
 8001024:	881b      	ldrh	r3, [r3, #0]
 8001026:	4619      	mov	r1, r3
 8001028:	484c      	ldr	r0, [pc, #304]	; (800115c <main+0x480>)
 800102a:	f003 fc69 	bl	8004900 <iprintf>
  printf("START1\n");
 800102e:	484c      	ldr	r0, [pc, #304]	; (8001160 <main+0x484>)
 8001030:	f003 fcda 	bl	80049e8 <puts>
  for(uint16_t i=0;i<2048;i++)
 8001034:	2300      	movs	r3, #0
 8001036:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800103a:	f102 0206 	add.w	r2, r2, #6
 800103e:	8013      	strh	r3, [r2, #0]
 8001040:	e01c      	b.n	800107c <main+0x3a0>
  {
	  printf("mass[%d]=%d\n",i,dataRead[i]);
 8001042:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001046:	f103 0306 	add.w	r3, r3, #6
 800104a:	8819      	ldrh	r1, [r3, #0]
 800104c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001050:	f103 0306 	add.w	r3, r3, #6
 8001054:	881a      	ldrh	r2, [r3, #0]
 8001056:	f107 0318 	add.w	r3, r7, #24
 800105a:	3b18      	subs	r3, #24
 800105c:	5c9b      	ldrb	r3, [r3, r2]
 800105e:	461a      	mov	r2, r3
 8001060:	4840      	ldr	r0, [pc, #256]	; (8001164 <main+0x488>)
 8001062:	f003 fc4d 	bl	8004900 <iprintf>
  for(uint16_t i=0;i<2048;i++)
 8001066:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800106a:	f103 0306 	add.w	r3, r3, #6
 800106e:	881b      	ldrh	r3, [r3, #0]
 8001070:	3301      	adds	r3, #1
 8001072:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001076:	f102 0206 	add.w	r2, r2, #6
 800107a:	8013      	strh	r3, [r2, #0]
 800107c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001080:	f103 0306 	add.w	r3, r3, #6
 8001084:	881b      	ldrh	r3, [r3, #0]
 8001086:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800108a:	d3da      	bcc.n	8001042 <main+0x366>
  }
  printf("END1\n");
 800108c:	4836      	ldr	r0, [pc, #216]	; (8001168 <main+0x48c>)
 800108e:	f003 fcab 	bl	80049e8 <puts>
  printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
 8001092:	4836      	ldr	r0, [pc, #216]	; (800116c <main+0x490>)
 8001094:	f003 fca8 	bl	80049e8 <puts>

  AT24C16_Erase(Adr_AT24C16,0,2047);
 8001098:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800109c:	2100      	movs	r1, #0
 800109e:	20a0      	movs	r0, #160	; 0xa0
 80010a0:	f7ff fd38 	bl	8000b14 <AT24C16_Erase>
  AT24C16_Write(Adr_AT24C16,5,dataWrite,17);
 80010a4:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 80010a8:	2311      	movs	r3, #17
 80010aa:	2105      	movs	r1, #5
 80010ac:	20a0      	movs	r0, #160	; 0xa0
 80010ae:	f7ff fac1 	bl	8000634 <AT24C16_Write>
  AT24C16_Read(Adr_AT24C16,0,dataRead,2048);
 80010b2:	f107 0218 	add.w	r2, r7, #24
 80010b6:	3a18      	subs	r2, #24
 80010b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80010bc:	2100      	movs	r1, #0
 80010be:	20a0      	movs	r0, #160	; 0xa0
 80010c0:	f7ff fb72 	bl	80007a8 <AT24C16_Read>

ADR=AT24C16_Search_Last(Adr_AT24C16,5,2047);
 80010c4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80010c8:	2105      	movs	r1, #5
 80010ca:	20a0      	movs	r0, #160	; 0xa0
 80010cc:	f7ff fc24 	bl	8000918 <AT24C16_Search_Last>
 80010d0:	4603      	mov	r3, r0
 80010d2:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80010d6:	f102 0202 	add.w	r2, r2, #2
 80010da:	8013      	strh	r3, [r2, #0]
  printf("Last adr=%d\n",ADR);
 80010dc:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80010e0:	f103 0302 	add.w	r3, r3, #2
 80010e4:	881b      	ldrh	r3, [r3, #0]
 80010e6:	4619      	mov	r1, r3
 80010e8:	481c      	ldr	r0, [pc, #112]	; (800115c <main+0x480>)
 80010ea:	f003 fc09 	bl	8004900 <iprintf>
  printf("START2\n");
 80010ee:	4820      	ldr	r0, [pc, #128]	; (8001170 <main+0x494>)
 80010f0:	f003 fc7a 	bl	80049e8 <puts>
  for(uint16_t i=0;i<2048;i++)
 80010f4:	2300      	movs	r3, #0
 80010f6:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80010fa:	f102 0204 	add.w	r2, r2, #4
 80010fe:	8013      	strh	r3, [r2, #0]
 8001100:	e01c      	b.n	800113c <main+0x460>
  {
	  printf("mass[%d]=%d\n",i,dataRead[i]);
 8001102:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001106:	f103 0304 	add.w	r3, r3, #4
 800110a:	8819      	ldrh	r1, [r3, #0]
 800110c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001110:	f103 0304 	add.w	r3, r3, #4
 8001114:	881a      	ldrh	r2, [r3, #0]
 8001116:	f107 0318 	add.w	r3, r7, #24
 800111a:	3b18      	subs	r3, #24
 800111c:	5c9b      	ldrb	r3, [r3, r2]
 800111e:	461a      	mov	r2, r3
 8001120:	4810      	ldr	r0, [pc, #64]	; (8001164 <main+0x488>)
 8001122:	f003 fbed 	bl	8004900 <iprintf>
  for(uint16_t i=0;i<2048;i++)
 8001126:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800112a:	f103 0304 	add.w	r3, r3, #4
 800112e:	881b      	ldrh	r3, [r3, #0]
 8001130:	3301      	adds	r3, #1
 8001132:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001136:	f102 0204 	add.w	r2, r2, #4
 800113a:	8013      	strh	r3, [r2, #0]
 800113c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001140:	f103 0304 	add.w	r3, r3, #4
 8001144:	881b      	ldrh	r3, [r3, #0]
 8001146:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800114a:	d3da      	bcc.n	8001102 <main+0x426>
  }


  printf("END2\n");
 800114c:	4809      	ldr	r0, [pc, #36]	; (8001174 <main+0x498>)
 800114e:	f003 fc4b 	bl	80049e8 <puts>
  HAL_Delay(100);
 8001152:	2064      	movs	r0, #100	; 0x64
 8001154:	f000 fb9c 	bl	8001890 <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001158:	e7fe      	b.n	8001158 <main+0x47c>
 800115a:	bf00      	nop
 800115c:	080057b8 	.word	0x080057b8
 8001160:	080057c8 	.word	0x080057c8
 8001164:	080057d0 	.word	0x080057d0
 8001168:	080057e0 	.word	0x080057e0
 800116c:	080057e8 	.word	0x080057e8
 8001170:	08005808 	.word	0x08005808
 8001174:	08005810 	.word	0x08005810

08001178 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b0b8      	sub	sp, #224	; 0xe0
 800117c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800117e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001182:	2244      	movs	r2, #68	; 0x44
 8001184:	2100      	movs	r1, #0
 8001186:	4618      	mov	r0, r3
 8001188:	f003 fbb2 	bl	80048f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800118c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
 800119a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800119c:	463b      	mov	r3, r7
 800119e:	2288      	movs	r2, #136	; 0x88
 80011a0:	2100      	movs	r1, #0
 80011a2:	4618      	mov	r0, r3
 80011a4:	f003 fba4 	bl	80048f0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011a8:	2302      	movs	r3, #2
 80011aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011b6:	2310      	movs	r3, #16
 80011b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011bc:	2302      	movs	r3, #2
 80011be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011c2:	2302      	movs	r3, #2
 80011c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80011c8:	2301      	movs	r3, #1
 80011ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 8;
 80011ce:	2308      	movs	r3, #8
 80011d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80011d4:	2307      	movs	r3, #7
 80011d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011da:	2302      	movs	r3, #2
 80011dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011e0:	2302      	movs	r3, #2
 80011e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011e6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011ea:	4618      	mov	r0, r3
 80011ec:	f001 fbee 	bl	80029cc <HAL_RCC_OscConfig>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <SystemClock_Config+0x82>
  {
    Error_Handler();
 80011f6:	f000 f90f 	bl	8001418 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011fa:	230f      	movs	r3, #15
 80011fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001200:	2303      	movs	r3, #3
 8001202:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001206:	2380      	movs	r3, #128	; 0x80
 8001208:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800120c:	2300      	movs	r3, #0
 800120e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001212:	2300      	movs	r3, #0
 8001214:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001218:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800121c:	2101      	movs	r1, #1
 800121e:	4618      	mov	r0, r3
 8001220:	f001 ffba 	bl	8003198 <HAL_RCC_ClockConfig>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800122a:	f000 f8f5 	bl	8001418 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 800122e:	2342      	movs	r3, #66	; 0x42
 8001230:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001232:	2300      	movs	r3, #0
 8001234:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001236:	2300      	movs	r3, #0
 8001238:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800123a:	463b      	mov	r3, r7
 800123c:	4618      	mov	r0, r3
 800123e:	f002 f9af 	bl	80035a0 <HAL_RCCEx_PeriphCLKConfig>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001248:	f000 f8e6 	bl	8001418 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800124c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001250:	f001 fb66 	bl	8002920 <HAL_PWREx_ControlVoltageScaling>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800125a:	f000 f8dd 	bl	8001418 <Error_Handler>
  }
}
 800125e:	bf00      	nop
 8001260:	37e0      	adds	r7, #224	; 0xe0
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
	...

08001268 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800126c:	4b1b      	ldr	r3, [pc, #108]	; (80012dc <MX_I2C1_Init+0x74>)
 800126e:	4a1c      	ldr	r2, [pc, #112]	; (80012e0 <MX_I2C1_Init+0x78>)
 8001270:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8001272:	4b1a      	ldr	r3, [pc, #104]	; (80012dc <MX_I2C1_Init+0x74>)
 8001274:	4a1b      	ldr	r2, [pc, #108]	; (80012e4 <MX_I2C1_Init+0x7c>)
 8001276:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001278:	4b18      	ldr	r3, [pc, #96]	; (80012dc <MX_I2C1_Init+0x74>)
 800127a:	2200      	movs	r2, #0
 800127c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800127e:	4b17      	ldr	r3, [pc, #92]	; (80012dc <MX_I2C1_Init+0x74>)
 8001280:	2201      	movs	r2, #1
 8001282:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001284:	4b15      	ldr	r3, [pc, #84]	; (80012dc <MX_I2C1_Init+0x74>)
 8001286:	2200      	movs	r2, #0
 8001288:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800128a:	4b14      	ldr	r3, [pc, #80]	; (80012dc <MX_I2C1_Init+0x74>)
 800128c:	2200      	movs	r2, #0
 800128e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001290:	4b12      	ldr	r3, [pc, #72]	; (80012dc <MX_I2C1_Init+0x74>)
 8001292:	2200      	movs	r2, #0
 8001294:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001296:	4b11      	ldr	r3, [pc, #68]	; (80012dc <MX_I2C1_Init+0x74>)
 8001298:	2200      	movs	r2, #0
 800129a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800129c:	4b0f      	ldr	r3, [pc, #60]	; (80012dc <MX_I2C1_Init+0x74>)
 800129e:	2200      	movs	r2, #0
 80012a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012a2:	480e      	ldr	r0, [pc, #56]	; (80012dc <MX_I2C1_Init+0x74>)
 80012a4:	f000 fdbc 	bl	8001e20 <HAL_I2C_Init>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80012ae:	f000 f8b3 	bl	8001418 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012b2:	2100      	movs	r1, #0
 80012b4:	4809      	ldr	r0, [pc, #36]	; (80012dc <MX_I2C1_Init+0x74>)
 80012b6:	f001 fa8d 	bl	80027d4 <HAL_I2CEx_ConfigAnalogFilter>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80012c0:	f000 f8aa 	bl	8001418 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012c4:	2100      	movs	r1, #0
 80012c6:	4805      	ldr	r0, [pc, #20]	; (80012dc <MX_I2C1_Init+0x74>)
 80012c8:	f001 facf 	bl	800286a <HAL_I2CEx_ConfigDigitalFilter>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80012d2:	f000 f8a1 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20000098 	.word	0x20000098
 80012e0:	40005400 	.word	0x40005400
 80012e4:	00707cbb 	.word	0x00707cbb

080012e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012ec:	4b14      	ldr	r3, [pc, #80]	; (8001340 <MX_USART2_UART_Init+0x58>)
 80012ee:	4a15      	ldr	r2, [pc, #84]	; (8001344 <MX_USART2_UART_Init+0x5c>)
 80012f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012f2:	4b13      	ldr	r3, [pc, #76]	; (8001340 <MX_USART2_UART_Init+0x58>)
 80012f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012fa:	4b11      	ldr	r3, [pc, #68]	; (8001340 <MX_USART2_UART_Init+0x58>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001300:	4b0f      	ldr	r3, [pc, #60]	; (8001340 <MX_USART2_UART_Init+0x58>)
 8001302:	2200      	movs	r2, #0
 8001304:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001306:	4b0e      	ldr	r3, [pc, #56]	; (8001340 <MX_USART2_UART_Init+0x58>)
 8001308:	2200      	movs	r2, #0
 800130a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800130c:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <MX_USART2_UART_Init+0x58>)
 800130e:	220c      	movs	r2, #12
 8001310:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001312:	4b0b      	ldr	r3, [pc, #44]	; (8001340 <MX_USART2_UART_Init+0x58>)
 8001314:	2200      	movs	r2, #0
 8001316:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001318:	4b09      	ldr	r3, [pc, #36]	; (8001340 <MX_USART2_UART_Init+0x58>)
 800131a:	2200      	movs	r2, #0
 800131c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800131e:	4b08      	ldr	r3, [pc, #32]	; (8001340 <MX_USART2_UART_Init+0x58>)
 8001320:	2200      	movs	r2, #0
 8001322:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001324:	4b06      	ldr	r3, [pc, #24]	; (8001340 <MX_USART2_UART_Init+0x58>)
 8001326:	2200      	movs	r2, #0
 8001328:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800132a:	4805      	ldr	r0, [pc, #20]	; (8001340 <MX_USART2_UART_Init+0x58>)
 800132c:	f002 fde8 	bl	8003f00 <HAL_UART_Init>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001336:	f000 f86f 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	200000e4 	.word	0x200000e4
 8001344:	40004400 	.word	0x40004400

08001348 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b08a      	sub	sp, #40	; 0x28
 800134c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134e:	f107 0314 	add.w	r3, r7, #20
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]
 8001358:	609a      	str	r2, [r3, #8]
 800135a:	60da      	str	r2, [r3, #12]
 800135c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800135e:	4b2b      	ldr	r3, [pc, #172]	; (800140c <MX_GPIO_Init+0xc4>)
 8001360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001362:	4a2a      	ldr	r2, [pc, #168]	; (800140c <MX_GPIO_Init+0xc4>)
 8001364:	f043 0304 	orr.w	r3, r3, #4
 8001368:	64d3      	str	r3, [r2, #76]	; 0x4c
 800136a:	4b28      	ldr	r3, [pc, #160]	; (800140c <MX_GPIO_Init+0xc4>)
 800136c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136e:	f003 0304 	and.w	r3, r3, #4
 8001372:	613b      	str	r3, [r7, #16]
 8001374:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001376:	4b25      	ldr	r3, [pc, #148]	; (800140c <MX_GPIO_Init+0xc4>)
 8001378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137a:	4a24      	ldr	r2, [pc, #144]	; (800140c <MX_GPIO_Init+0xc4>)
 800137c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001380:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001382:	4b22      	ldr	r3, [pc, #136]	; (800140c <MX_GPIO_Init+0xc4>)
 8001384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800138e:	4b1f      	ldr	r3, [pc, #124]	; (800140c <MX_GPIO_Init+0xc4>)
 8001390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001392:	4a1e      	ldr	r2, [pc, #120]	; (800140c <MX_GPIO_Init+0xc4>)
 8001394:	f043 0301 	orr.w	r3, r3, #1
 8001398:	64d3      	str	r3, [r2, #76]	; 0x4c
 800139a:	4b1c      	ldr	r3, [pc, #112]	; (800140c <MX_GPIO_Init+0xc4>)
 800139c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	60bb      	str	r3, [r7, #8]
 80013a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a6:	4b19      	ldr	r3, [pc, #100]	; (800140c <MX_GPIO_Init+0xc4>)
 80013a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013aa:	4a18      	ldr	r2, [pc, #96]	; (800140c <MX_GPIO_Init+0xc4>)
 80013ac:	f043 0302 	orr.w	r3, r3, #2
 80013b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013b2:	4b16      	ldr	r3, [pc, #88]	; (800140c <MX_GPIO_Init+0xc4>)
 80013b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	607b      	str	r3, [r7, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013be:	2200      	movs	r2, #0
 80013c0:	2120      	movs	r1, #32
 80013c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013c6:	f000 fd13 	bl	8001df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013d0:	4b0f      	ldr	r3, [pc, #60]	; (8001410 <MX_GPIO_Init+0xc8>)
 80013d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013d8:	f107 0314 	add.w	r3, r7, #20
 80013dc:	4619      	mov	r1, r3
 80013de:	480d      	ldr	r0, [pc, #52]	; (8001414 <MX_GPIO_Init+0xcc>)
 80013e0:	f000 fb5e 	bl	8001aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80013e4:	2320      	movs	r3, #32
 80013e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e8:	2301      	movs	r3, #1
 80013ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f0:	2300      	movs	r3, #0
 80013f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80013f4:	f107 0314 	add.w	r3, r7, #20
 80013f8:	4619      	mov	r1, r3
 80013fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013fe:	f000 fb4f 	bl	8001aa0 <HAL_GPIO_Init>

}
 8001402:	bf00      	nop
 8001404:	3728      	adds	r7, #40	; 0x28
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40021000 	.word	0x40021000
 8001410:	10210000 	.word	0x10210000
 8001414:	48000800 	.word	0x48000800

08001418 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800141c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800141e:	e7fe      	b.n	800141e <Error_Handler+0x6>

08001420 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001426:	4b0f      	ldr	r3, [pc, #60]	; (8001464 <HAL_MspInit+0x44>)
 8001428:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800142a:	4a0e      	ldr	r2, [pc, #56]	; (8001464 <HAL_MspInit+0x44>)
 800142c:	f043 0301 	orr.w	r3, r3, #1
 8001430:	6613      	str	r3, [r2, #96]	; 0x60
 8001432:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <HAL_MspInit+0x44>)
 8001434:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	607b      	str	r3, [r7, #4]
 800143c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800143e:	4b09      	ldr	r3, [pc, #36]	; (8001464 <HAL_MspInit+0x44>)
 8001440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001442:	4a08      	ldr	r2, [pc, #32]	; (8001464 <HAL_MspInit+0x44>)
 8001444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001448:	6593      	str	r3, [r2, #88]	; 0x58
 800144a:	4b06      	ldr	r3, [pc, #24]	; (8001464 <HAL_MspInit+0x44>)
 800144c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800144e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001452:	603b      	str	r3, [r7, #0]
 8001454:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	40021000 	.word	0x40021000

08001468 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b08a      	sub	sp, #40	; 0x28
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001470:	f107 0314 	add.w	r3, r7, #20
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	605a      	str	r2, [r3, #4]
 800147a:	609a      	str	r2, [r3, #8]
 800147c:	60da      	str	r2, [r3, #12]
 800147e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a17      	ldr	r2, [pc, #92]	; (80014e4 <HAL_I2C_MspInit+0x7c>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d127      	bne.n	80014da <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800148a:	4b17      	ldr	r3, [pc, #92]	; (80014e8 <HAL_I2C_MspInit+0x80>)
 800148c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800148e:	4a16      	ldr	r2, [pc, #88]	; (80014e8 <HAL_I2C_MspInit+0x80>)
 8001490:	f043 0302 	orr.w	r3, r3, #2
 8001494:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001496:	4b14      	ldr	r3, [pc, #80]	; (80014e8 <HAL_I2C_MspInit+0x80>)
 8001498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	613b      	str	r3, [r7, #16]
 80014a0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014a2:	23c0      	movs	r3, #192	; 0xc0
 80014a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014a6:	2312      	movs	r3, #18
 80014a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014aa:	2301      	movs	r3, #1
 80014ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ae:	2303      	movs	r3, #3
 80014b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014b2:	2304      	movs	r3, #4
 80014b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b6:	f107 0314 	add.w	r3, r7, #20
 80014ba:	4619      	mov	r1, r3
 80014bc:	480b      	ldr	r0, [pc, #44]	; (80014ec <HAL_I2C_MspInit+0x84>)
 80014be:	f000 faef 	bl	8001aa0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014c2:	4b09      	ldr	r3, [pc, #36]	; (80014e8 <HAL_I2C_MspInit+0x80>)
 80014c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014c6:	4a08      	ldr	r2, [pc, #32]	; (80014e8 <HAL_I2C_MspInit+0x80>)
 80014c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014cc:	6593      	str	r3, [r2, #88]	; 0x58
 80014ce:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <HAL_I2C_MspInit+0x80>)
 80014d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80014da:	bf00      	nop
 80014dc:	3728      	adds	r7, #40	; 0x28
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40005400 	.word	0x40005400
 80014e8:	40021000 	.word	0x40021000
 80014ec:	48000400 	.word	0x48000400

080014f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b08a      	sub	sp, #40	; 0x28
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f8:	f107 0314 	add.w	r3, r7, #20
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a17      	ldr	r2, [pc, #92]	; (800156c <HAL_UART_MspInit+0x7c>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d128      	bne.n	8001564 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001512:	4b17      	ldr	r3, [pc, #92]	; (8001570 <HAL_UART_MspInit+0x80>)
 8001514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001516:	4a16      	ldr	r2, [pc, #88]	; (8001570 <HAL_UART_MspInit+0x80>)
 8001518:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800151c:	6593      	str	r3, [r2, #88]	; 0x58
 800151e:	4b14      	ldr	r3, [pc, #80]	; (8001570 <HAL_UART_MspInit+0x80>)
 8001520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001526:	613b      	str	r3, [r7, #16]
 8001528:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800152a:	4b11      	ldr	r3, [pc, #68]	; (8001570 <HAL_UART_MspInit+0x80>)
 800152c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152e:	4a10      	ldr	r2, [pc, #64]	; (8001570 <HAL_UART_MspInit+0x80>)
 8001530:	f043 0301 	orr.w	r3, r3, #1
 8001534:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001536:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <HAL_UART_MspInit+0x80>)
 8001538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001542:	230c      	movs	r3, #12
 8001544:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001546:	2302      	movs	r3, #2
 8001548:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800154e:	2303      	movs	r3, #3
 8001550:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001552:	2307      	movs	r3, #7
 8001554:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001556:	f107 0314 	add.w	r3, r7, #20
 800155a:	4619      	mov	r1, r3
 800155c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001560:	f000 fa9e 	bl	8001aa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001564:	bf00      	nop
 8001566:	3728      	adds	r7, #40	; 0x28
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40004400 	.word	0x40004400
 8001570:	40021000 	.word	0x40021000

08001574 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001578:	e7fe      	b.n	8001578 <NMI_Handler+0x4>

0800157a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800157a:	b480      	push	{r7}
 800157c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800157e:	e7fe      	b.n	800157e <HardFault_Handler+0x4>

08001580 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001584:	e7fe      	b.n	8001584 <MemManage_Handler+0x4>

08001586 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001586:	b480      	push	{r7}
 8001588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800158a:	e7fe      	b.n	800158a <BusFault_Handler+0x4>

0800158c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001590:	e7fe      	b.n	8001590 <UsageFault_Handler+0x4>

08001592 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001592:	b480      	push	{r7}
 8001594:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015a4:	bf00      	nop
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr

080015ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ae:	b480      	push	{r7}
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015b2:	bf00      	nop
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015c0:	f000 f946 	bl	8001850 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015c4:	bf00      	nop
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b086      	sub	sp, #24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	60b9      	str	r1, [r7, #8]
 80015d2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015d4:	2300      	movs	r3, #0
 80015d6:	617b      	str	r3, [r7, #20]
 80015d8:	e00a      	b.n	80015f0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80015da:	f3af 8000 	nop.w
 80015de:	4601      	mov	r1, r0
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	1c5a      	adds	r2, r3, #1
 80015e4:	60ba      	str	r2, [r7, #8]
 80015e6:	b2ca      	uxtb	r2, r1
 80015e8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	3301      	adds	r3, #1
 80015ee:	617b      	str	r3, [r7, #20]
 80015f0:	697a      	ldr	r2, [r7, #20]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	dbf0      	blt.n	80015da <_read+0x12>
	}

return len;
 80015f8:	687b      	ldr	r3, [r7, #4]
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3718      	adds	r7, #24
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001602:	b480      	push	{r7}
 8001604:	b083      	sub	sp, #12
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
	return -1;
 800160a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800160e:	4618      	mov	r0, r3
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr

0800161a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800161a:	b480      	push	{r7}
 800161c:	b083      	sub	sp, #12
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
 8001622:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800162a:	605a      	str	r2, [r3, #4]
	return 0;
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr

0800163a <_isatty>:

int _isatty(int file)
{
 800163a:	b480      	push	{r7}
 800163c:	b083      	sub	sp, #12
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
	return 1;
 8001642:	2301      	movs	r3, #1
}
 8001644:	4618      	mov	r0, r3
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
	return 0;
 800165c:	2300      	movs	r3, #0
}
 800165e:	4618      	mov	r0, r3
 8001660:	3714      	adds	r7, #20
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
	...

0800166c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001674:	4a14      	ldr	r2, [pc, #80]	; (80016c8 <_sbrk+0x5c>)
 8001676:	4b15      	ldr	r3, [pc, #84]	; (80016cc <_sbrk+0x60>)
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001680:	4b13      	ldr	r3, [pc, #76]	; (80016d0 <_sbrk+0x64>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d102      	bne.n	800168e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001688:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <_sbrk+0x64>)
 800168a:	4a12      	ldr	r2, [pc, #72]	; (80016d4 <_sbrk+0x68>)
 800168c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800168e:	4b10      	ldr	r3, [pc, #64]	; (80016d0 <_sbrk+0x64>)
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4413      	add	r3, r2
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	429a      	cmp	r2, r3
 800169a:	d207      	bcs.n	80016ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800169c:	f003 f8fe 	bl	800489c <__errno>
 80016a0:	4602      	mov	r2, r0
 80016a2:	230c      	movs	r3, #12
 80016a4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80016a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016aa:	e009      	b.n	80016c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016ac:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <_sbrk+0x64>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016b2:	4b07      	ldr	r3, [pc, #28]	; (80016d0 <_sbrk+0x64>)
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4413      	add	r3, r2
 80016ba:	4a05      	ldr	r2, [pc, #20]	; (80016d0 <_sbrk+0x64>)
 80016bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016be:	68fb      	ldr	r3, [r7, #12]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3718      	adds	r7, #24
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	20018000 	.word	0x20018000
 80016cc:	00000400 	.word	0x00000400
 80016d0:	2000008c 	.word	0x2000008c
 80016d4:	20000170 	.word	0x20000170

080016d8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016dc:	4b17      	ldr	r3, [pc, #92]	; (800173c <SystemInit+0x64>)
 80016de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016e2:	4a16      	ldr	r2, [pc, #88]	; (800173c <SystemInit+0x64>)
 80016e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80016ec:	4b14      	ldr	r3, [pc, #80]	; (8001740 <SystemInit+0x68>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a13      	ldr	r2, [pc, #76]	; (8001740 <SystemInit+0x68>)
 80016f2:	f043 0301 	orr.w	r3, r3, #1
 80016f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80016f8:	4b11      	ldr	r3, [pc, #68]	; (8001740 <SystemInit+0x68>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80016fe:	4b10      	ldr	r3, [pc, #64]	; (8001740 <SystemInit+0x68>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a0f      	ldr	r2, [pc, #60]	; (8001740 <SystemInit+0x68>)
 8001704:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001708:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800170c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800170e:	4b0c      	ldr	r3, [pc, #48]	; (8001740 <SystemInit+0x68>)
 8001710:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001714:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001716:	4b0a      	ldr	r3, [pc, #40]	; (8001740 <SystemInit+0x68>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a09      	ldr	r2, [pc, #36]	; (8001740 <SystemInit+0x68>)
 800171c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001720:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001722:	4b07      	ldr	r3, [pc, #28]	; (8001740 <SystemInit+0x68>)
 8001724:	2200      	movs	r2, #0
 8001726:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001728:	4b04      	ldr	r3, [pc, #16]	; (800173c <SystemInit+0x64>)
 800172a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800172e:	609a      	str	r2, [r3, #8]
#endif
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	e000ed00 	.word	0xe000ed00
 8001740:	40021000 	.word	0x40021000

08001744 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001744:	f8df d034 	ldr.w	sp, [pc, #52]	; 800177c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001748:	f7ff ffc6 	bl	80016d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800174c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800174e:	e003      	b.n	8001758 <LoopCopyDataInit>

08001750 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001750:	4b0b      	ldr	r3, [pc, #44]	; (8001780 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001752:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001754:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001756:	3104      	adds	r1, #4

08001758 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001758:	480a      	ldr	r0, [pc, #40]	; (8001784 <LoopForever+0xa>)
	ldr	r3, =_edata
 800175a:	4b0b      	ldr	r3, [pc, #44]	; (8001788 <LoopForever+0xe>)
	adds	r2, r0, r1
 800175c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800175e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001760:	d3f6      	bcc.n	8001750 <CopyDataInit>
	ldr	r2, =_sbss
 8001762:	4a0a      	ldr	r2, [pc, #40]	; (800178c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001764:	e002      	b.n	800176c <LoopFillZerobss>

08001766 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001766:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001768:	f842 3b04 	str.w	r3, [r2], #4

0800176c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800176c:	4b08      	ldr	r3, [pc, #32]	; (8001790 <LoopForever+0x16>)
	cmp	r2, r3
 800176e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001770:	d3f9      	bcc.n	8001766 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001772:	f003 f899 	bl	80048a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001776:	f7ff fab1 	bl	8000cdc <main>

0800177a <LoopForever>:

LoopForever:
    b LoopForever
 800177a:	e7fe      	b.n	800177a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800177c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001780:	08005908 	.word	0x08005908
	ldr	r0, =_sdata
 8001784:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001788:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 800178c:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8001790:	2000016c 	.word	0x2000016c

08001794 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001794:	e7fe      	b.n	8001794 <ADC1_2_IRQHandler>
	...

08001798 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800179e:	2300      	movs	r3, #0
 80017a0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017a2:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <HAL_Init+0x3c>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a0b      	ldr	r2, [pc, #44]	; (80017d4 <HAL_Init+0x3c>)
 80017a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ac:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017ae:	2003      	movs	r0, #3
 80017b0:	f000 f942 	bl	8001a38 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017b4:	2000      	movs	r0, #0
 80017b6:	f000 f80f 	bl	80017d8 <HAL_InitTick>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d002      	beq.n	80017c6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	71fb      	strb	r3, [r7, #7]
 80017c4:	e001      	b.n	80017ca <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017c6:	f7ff fe2b 	bl	8001420 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017ca:	79fb      	ldrb	r3, [r7, #7]
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	40022000 	.word	0x40022000

080017d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80017e0:	2300      	movs	r3, #0
 80017e2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80017e4:	4b17      	ldr	r3, [pc, #92]	; (8001844 <HAL_InitTick+0x6c>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d023      	beq.n	8001834 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80017ec:	4b16      	ldr	r3, [pc, #88]	; (8001848 <HAL_InitTick+0x70>)
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	4b14      	ldr	r3, [pc, #80]	; (8001844 <HAL_InitTick+0x6c>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	4619      	mov	r1, r3
 80017f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80017fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001802:	4618      	mov	r0, r3
 8001804:	f000 f93f 	bl	8001a86 <HAL_SYSTICK_Config>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d10f      	bne.n	800182e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2b0f      	cmp	r3, #15
 8001812:	d809      	bhi.n	8001828 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001814:	2200      	movs	r2, #0
 8001816:	6879      	ldr	r1, [r7, #4]
 8001818:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800181c:	f000 f917 	bl	8001a4e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001820:	4a0a      	ldr	r2, [pc, #40]	; (800184c <HAL_InitTick+0x74>)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6013      	str	r3, [r2, #0]
 8001826:	e007      	b.n	8001838 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	73fb      	strb	r3, [r7, #15]
 800182c:	e004      	b.n	8001838 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	73fb      	strb	r3, [r7, #15]
 8001832:	e001      	b.n	8001838 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001838:	7bfb      	ldrb	r3, [r7, #15]
}
 800183a:	4618      	mov	r0, r3
 800183c:	3710      	adds	r7, #16
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	20000008 	.word	0x20000008
 8001848:	20000000 	.word	0x20000000
 800184c:	20000004 	.word	0x20000004

08001850 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001854:	4b06      	ldr	r3, [pc, #24]	; (8001870 <HAL_IncTick+0x20>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	461a      	mov	r2, r3
 800185a:	4b06      	ldr	r3, [pc, #24]	; (8001874 <HAL_IncTick+0x24>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4413      	add	r3, r2
 8001860:	4a04      	ldr	r2, [pc, #16]	; (8001874 <HAL_IncTick+0x24>)
 8001862:	6013      	str	r3, [r2, #0]
}
 8001864:	bf00      	nop
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	20000008 	.word	0x20000008
 8001874:	20000164 	.word	0x20000164

08001878 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  return uwTick;
 800187c:	4b03      	ldr	r3, [pc, #12]	; (800188c <HAL_GetTick+0x14>)
 800187e:	681b      	ldr	r3, [r3, #0]
}
 8001880:	4618      	mov	r0, r3
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	20000164 	.word	0x20000164

08001890 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001898:	f7ff ffee 	bl	8001878 <HAL_GetTick>
 800189c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018a8:	d005      	beq.n	80018b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80018aa:	4b09      	ldr	r3, [pc, #36]	; (80018d0 <HAL_Delay+0x40>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	461a      	mov	r2, r3
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	4413      	add	r3, r2
 80018b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018b6:	bf00      	nop
 80018b8:	f7ff ffde 	bl	8001878 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	68fa      	ldr	r2, [r7, #12]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d8f7      	bhi.n	80018b8 <HAL_Delay+0x28>
  {
  }
}
 80018c8:	bf00      	nop
 80018ca:	3710      	adds	r7, #16
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	20000008 	.word	0x20000008

080018d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f003 0307 	and.w	r3, r3, #7
 80018e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018e4:	4b0c      	ldr	r3, [pc, #48]	; (8001918 <__NVIC_SetPriorityGrouping+0x44>)
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ea:	68ba      	ldr	r2, [r7, #8]
 80018ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018f0:	4013      	ands	r3, r2
 80018f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001904:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001906:	4a04      	ldr	r2, [pc, #16]	; (8001918 <__NVIC_SetPriorityGrouping+0x44>)
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	60d3      	str	r3, [r2, #12]
}
 800190c:	bf00      	nop
 800190e:	3714      	adds	r7, #20
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	e000ed00 	.word	0xe000ed00

0800191c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001920:	4b04      	ldr	r3, [pc, #16]	; (8001934 <__NVIC_GetPriorityGrouping+0x18>)
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	0a1b      	lsrs	r3, r3, #8
 8001926:	f003 0307 	and.w	r3, r3, #7
}
 800192a:	4618      	mov	r0, r3
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	e000ed00 	.word	0xe000ed00

08001938 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	6039      	str	r1, [r7, #0]
 8001942:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001948:	2b00      	cmp	r3, #0
 800194a:	db0a      	blt.n	8001962 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	b2da      	uxtb	r2, r3
 8001950:	490c      	ldr	r1, [pc, #48]	; (8001984 <__NVIC_SetPriority+0x4c>)
 8001952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001956:	0112      	lsls	r2, r2, #4
 8001958:	b2d2      	uxtb	r2, r2
 800195a:	440b      	add	r3, r1
 800195c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001960:	e00a      	b.n	8001978 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	b2da      	uxtb	r2, r3
 8001966:	4908      	ldr	r1, [pc, #32]	; (8001988 <__NVIC_SetPriority+0x50>)
 8001968:	79fb      	ldrb	r3, [r7, #7]
 800196a:	f003 030f 	and.w	r3, r3, #15
 800196e:	3b04      	subs	r3, #4
 8001970:	0112      	lsls	r2, r2, #4
 8001972:	b2d2      	uxtb	r2, r2
 8001974:	440b      	add	r3, r1
 8001976:	761a      	strb	r2, [r3, #24]
}
 8001978:	bf00      	nop
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	e000e100 	.word	0xe000e100
 8001988:	e000ed00 	.word	0xe000ed00

0800198c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800198c:	b480      	push	{r7}
 800198e:	b089      	sub	sp, #36	; 0x24
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f003 0307 	and.w	r3, r3, #7
 800199e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	f1c3 0307 	rsb	r3, r3, #7
 80019a6:	2b04      	cmp	r3, #4
 80019a8:	bf28      	it	cs
 80019aa:	2304      	movcs	r3, #4
 80019ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	3304      	adds	r3, #4
 80019b2:	2b06      	cmp	r3, #6
 80019b4:	d902      	bls.n	80019bc <NVIC_EncodePriority+0x30>
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	3b03      	subs	r3, #3
 80019ba:	e000      	b.n	80019be <NVIC_EncodePriority+0x32>
 80019bc:	2300      	movs	r3, #0
 80019be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ca:	43da      	mvns	r2, r3
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	401a      	ands	r2, r3
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	fa01 f303 	lsl.w	r3, r1, r3
 80019de:	43d9      	mvns	r1, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e4:	4313      	orrs	r3, r2
         );
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3724      	adds	r7, #36	; 0x24
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
	...

080019f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	3b01      	subs	r3, #1
 8001a00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a04:	d301      	bcc.n	8001a0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a06:	2301      	movs	r3, #1
 8001a08:	e00f      	b.n	8001a2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a0a:	4a0a      	ldr	r2, [pc, #40]	; (8001a34 <SysTick_Config+0x40>)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a12:	210f      	movs	r1, #15
 8001a14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a18:	f7ff ff8e 	bl	8001938 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a1c:	4b05      	ldr	r3, [pc, #20]	; (8001a34 <SysTick_Config+0x40>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a22:	4b04      	ldr	r3, [pc, #16]	; (8001a34 <SysTick_Config+0x40>)
 8001a24:	2207      	movs	r2, #7
 8001a26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	e000e010 	.word	0xe000e010

08001a38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f7ff ff47 	bl	80018d4 <__NVIC_SetPriorityGrouping>
}
 8001a46:	bf00      	nop
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b086      	sub	sp, #24
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	4603      	mov	r3, r0
 8001a56:	60b9      	str	r1, [r7, #8]
 8001a58:	607a      	str	r2, [r7, #4]
 8001a5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a60:	f7ff ff5c 	bl	800191c <__NVIC_GetPriorityGrouping>
 8001a64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	68b9      	ldr	r1, [r7, #8]
 8001a6a:	6978      	ldr	r0, [r7, #20]
 8001a6c:	f7ff ff8e 	bl	800198c <NVIC_EncodePriority>
 8001a70:	4602      	mov	r2, r0
 8001a72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a76:	4611      	mov	r1, r2
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff ff5d 	bl	8001938 <__NVIC_SetPriority>
}
 8001a7e:	bf00      	nop
 8001a80:	3718      	adds	r7, #24
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b082      	sub	sp, #8
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f7ff ffb0 	bl	80019f4 <SysTick_Config>
 8001a94:	4603      	mov	r3, r0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
	...

08001aa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b087      	sub	sp, #28
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aae:	e17f      	b.n	8001db0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8001abc:	4013      	ands	r3, r2
 8001abe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	f000 8171 	beq.w	8001daa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d00b      	beq.n	8001ae8 <HAL_GPIO_Init+0x48>
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d007      	beq.n	8001ae8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001adc:	2b11      	cmp	r3, #17
 8001ade:	d003      	beq.n	8001ae8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	2b12      	cmp	r3, #18
 8001ae6:	d130      	bne.n	8001b4a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	2203      	movs	r2, #3
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	43db      	mvns	r3, r3
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	4013      	ands	r3, r2
 8001afe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	68da      	ldr	r2, [r3, #12]
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	693a      	ldr	r2, [r7, #16]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	693a      	ldr	r2, [r7, #16]
 8001b16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b1e:	2201      	movs	r2, #1
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	43db      	mvns	r3, r3
 8001b28:	693a      	ldr	r2, [r7, #16]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	091b      	lsrs	r3, r3, #4
 8001b34:	f003 0201 	and.w	r2, r3, #1
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f003 0303 	and.w	r3, r3, #3
 8001b52:	2b03      	cmp	r3, #3
 8001b54:	d118      	bne.n	8001b88 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	43db      	mvns	r3, r3
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	08db      	lsrs	r3, r3, #3
 8001b72:	f003 0201 	and.w	r2, r3, #1
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	693a      	ldr	r2, [r7, #16]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	693a      	ldr	r2, [r7, #16]
 8001b86:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	2203      	movs	r2, #3
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	689a      	ldr	r2, [r3, #8]
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	693a      	ldr	r2, [r7, #16]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d003      	beq.n	8001bc8 <HAL_GPIO_Init+0x128>
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	2b12      	cmp	r3, #18
 8001bc6:	d123      	bne.n	8001c10 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	08da      	lsrs	r2, r3, #3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	3208      	adds	r2, #8
 8001bd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	f003 0307 	and.w	r3, r3, #7
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	220f      	movs	r2, #15
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	43db      	mvns	r3, r3
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	4013      	ands	r3, r2
 8001bea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	691a      	ldr	r2, [r3, #16]
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	f003 0307 	and.w	r3, r3, #7
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	693a      	ldr	r2, [r7, #16]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	08da      	lsrs	r2, r3, #3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	3208      	adds	r2, #8
 8001c0a:	6939      	ldr	r1, [r7, #16]
 8001c0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	2203      	movs	r2, #3
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	43db      	mvns	r3, r3
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	4013      	ands	r3, r2
 8001c26:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f003 0203 	and.w	r2, r3, #3
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	693a      	ldr	r2, [r7, #16]
 8001c42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	f000 80ac 	beq.w	8001daa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c52:	4b5e      	ldr	r3, [pc, #376]	; (8001dcc <HAL_GPIO_Init+0x32c>)
 8001c54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c56:	4a5d      	ldr	r2, [pc, #372]	; (8001dcc <HAL_GPIO_Init+0x32c>)
 8001c58:	f043 0301 	orr.w	r3, r3, #1
 8001c5c:	6613      	str	r3, [r2, #96]	; 0x60
 8001c5e:	4b5b      	ldr	r3, [pc, #364]	; (8001dcc <HAL_GPIO_Init+0x32c>)
 8001c60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	60bb      	str	r3, [r7, #8]
 8001c68:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c6a:	4a59      	ldr	r2, [pc, #356]	; (8001dd0 <HAL_GPIO_Init+0x330>)
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	089b      	lsrs	r3, r3, #2
 8001c70:	3302      	adds	r3, #2
 8001c72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c76:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	f003 0303 	and.w	r3, r3, #3
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	220f      	movs	r2, #15
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	43db      	mvns	r3, r3
 8001c88:	693a      	ldr	r2, [r7, #16]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c94:	d025      	beq.n	8001ce2 <HAL_GPIO_Init+0x242>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a4e      	ldr	r2, [pc, #312]	; (8001dd4 <HAL_GPIO_Init+0x334>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d01f      	beq.n	8001cde <HAL_GPIO_Init+0x23e>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a4d      	ldr	r2, [pc, #308]	; (8001dd8 <HAL_GPIO_Init+0x338>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d019      	beq.n	8001cda <HAL_GPIO_Init+0x23a>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a4c      	ldr	r2, [pc, #304]	; (8001ddc <HAL_GPIO_Init+0x33c>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d013      	beq.n	8001cd6 <HAL_GPIO_Init+0x236>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a4b      	ldr	r2, [pc, #300]	; (8001de0 <HAL_GPIO_Init+0x340>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d00d      	beq.n	8001cd2 <HAL_GPIO_Init+0x232>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a4a      	ldr	r2, [pc, #296]	; (8001de4 <HAL_GPIO_Init+0x344>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d007      	beq.n	8001cce <HAL_GPIO_Init+0x22e>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a49      	ldr	r2, [pc, #292]	; (8001de8 <HAL_GPIO_Init+0x348>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d101      	bne.n	8001cca <HAL_GPIO_Init+0x22a>
 8001cc6:	2306      	movs	r3, #6
 8001cc8:	e00c      	b.n	8001ce4 <HAL_GPIO_Init+0x244>
 8001cca:	2307      	movs	r3, #7
 8001ccc:	e00a      	b.n	8001ce4 <HAL_GPIO_Init+0x244>
 8001cce:	2305      	movs	r3, #5
 8001cd0:	e008      	b.n	8001ce4 <HAL_GPIO_Init+0x244>
 8001cd2:	2304      	movs	r3, #4
 8001cd4:	e006      	b.n	8001ce4 <HAL_GPIO_Init+0x244>
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e004      	b.n	8001ce4 <HAL_GPIO_Init+0x244>
 8001cda:	2302      	movs	r3, #2
 8001cdc:	e002      	b.n	8001ce4 <HAL_GPIO_Init+0x244>
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e000      	b.n	8001ce4 <HAL_GPIO_Init+0x244>
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	697a      	ldr	r2, [r7, #20]
 8001ce6:	f002 0203 	and.w	r2, r2, #3
 8001cea:	0092      	lsls	r2, r2, #2
 8001cec:	4093      	lsls	r3, r2
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001cf4:	4936      	ldr	r1, [pc, #216]	; (8001dd0 <HAL_GPIO_Init+0x330>)
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	089b      	lsrs	r3, r3, #2
 8001cfa:	3302      	adds	r3, #2
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001d02:	4b3a      	ldr	r3, [pc, #232]	; (8001dec <HAL_GPIO_Init+0x34c>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	43db      	mvns	r3, r3
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d003      	beq.n	8001d26 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001d1e:	693a      	ldr	r2, [r7, #16]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d26:	4a31      	ldr	r2, [pc, #196]	; (8001dec <HAL_GPIO_Init+0x34c>)
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001d2c:	4b2f      	ldr	r3, [pc, #188]	; (8001dec <HAL_GPIO_Init+0x34c>)
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	43db      	mvns	r3, r3
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d003      	beq.n	8001d50 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d50:	4a26      	ldr	r2, [pc, #152]	; (8001dec <HAL_GPIO_Init+0x34c>)
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d56:	4b25      	ldr	r3, [pc, #148]	; (8001dec <HAL_GPIO_Init+0x34c>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	43db      	mvns	r3, r3
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	4013      	ands	r3, r2
 8001d64:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d003      	beq.n	8001d7a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d7a:	4a1c      	ldr	r2, [pc, #112]	; (8001dec <HAL_GPIO_Init+0x34c>)
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d80:	4b1a      	ldr	r3, [pc, #104]	; (8001dec <HAL_GPIO_Init+0x34c>)
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d003      	beq.n	8001da4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001d9c:	693a      	ldr	r2, [r7, #16]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001da4:	4a11      	ldr	r2, [pc, #68]	; (8001dec <HAL_GPIO_Init+0x34c>)
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	3301      	adds	r3, #1
 8001dae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	fa22 f303 	lsr.w	r3, r2, r3
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	f47f ae78 	bne.w	8001ab0 <HAL_GPIO_Init+0x10>
  }
}
 8001dc0:	bf00      	nop
 8001dc2:	371c      	adds	r7, #28
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	40010000 	.word	0x40010000
 8001dd4:	48000400 	.word	0x48000400
 8001dd8:	48000800 	.word	0x48000800
 8001ddc:	48000c00 	.word	0x48000c00
 8001de0:	48001000 	.word	0x48001000
 8001de4:	48001400 	.word	0x48001400
 8001de8:	48001800 	.word	0x48001800
 8001dec:	40010400 	.word	0x40010400

08001df0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	460b      	mov	r3, r1
 8001dfa:	807b      	strh	r3, [r7, #2]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e00:	787b      	ldrb	r3, [r7, #1]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e06:	887a      	ldrh	r2, [r7, #2]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e0c:	e002      	b.n	8001e14 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e0e:	887a      	ldrh	r2, [r7, #2]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e14:	bf00      	nop
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d101      	bne.n	8001e32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e081      	b.n	8001f36 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d106      	bne.n	8001e4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f7ff fb0e 	bl	8001468 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2224      	movs	r2, #36	; 0x24
 8001e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f022 0201 	bic.w	r2, r2, #1
 8001e62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685a      	ldr	r2, [r3, #4]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e70:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	689a      	ldr	r2, [r3, #8]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e80:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d107      	bne.n	8001e9a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	689a      	ldr	r2, [r3, #8]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e96:	609a      	str	r2, [r3, #8]
 8001e98:	e006      	b.n	8001ea8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	689a      	ldr	r2, [r3, #8]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001ea6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d104      	bne.n	8001eba <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001eb8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	6812      	ldr	r2, [r2, #0]
 8001ec4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ec8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ecc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	68da      	ldr	r2, [r3, #12]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001edc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	691a      	ldr	r2, [r3, #16]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	695b      	ldr	r3, [r3, #20]
 8001ee6:	ea42 0103 	orr.w	r1, r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	699b      	ldr	r3, [r3, #24]
 8001eee:	021a      	lsls	r2, r3, #8
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	430a      	orrs	r2, r1
 8001ef6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	69d9      	ldr	r1, [r3, #28]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6a1a      	ldr	r2, [r3, #32]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	430a      	orrs	r2, r1
 8001f06:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f042 0201 	orr.w	r2, r2, #1
 8001f16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2220      	movs	r2, #32
 8001f22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
	...

08001f40 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b088      	sub	sp, #32
 8001f44:	af02      	add	r7, sp, #8
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	4608      	mov	r0, r1
 8001f4a:	4611      	mov	r1, r2
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	4603      	mov	r3, r0
 8001f50:	817b      	strh	r3, [r7, #10]
 8001f52:	460b      	mov	r3, r1
 8001f54:	813b      	strh	r3, [r7, #8]
 8001f56:	4613      	mov	r3, r2
 8001f58:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b20      	cmp	r3, #32
 8001f64:	f040 80f9 	bne.w	800215a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f68:	6a3b      	ldr	r3, [r7, #32]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d002      	beq.n	8001f74 <HAL_I2C_Mem_Write+0x34>
 8001f6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d105      	bne.n	8001f80 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f7a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e0ed      	b.n	800215c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d101      	bne.n	8001f8e <HAL_I2C_Mem_Write+0x4e>
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	e0e6      	b.n	800215c <HAL_I2C_Mem_Write+0x21c>
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2201      	movs	r2, #1
 8001f92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001f96:	f7ff fc6f 	bl	8001878 <HAL_GetTick>
 8001f9a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	9300      	str	r3, [sp, #0]
 8001fa0:	2319      	movs	r3, #25
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fa8:	68f8      	ldr	r0, [r7, #12]
 8001faa:	f000 fac3 	bl	8002534 <I2C_WaitOnFlagUntilTimeout>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e0d1      	b.n	800215c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2221      	movs	r2, #33	; 0x21
 8001fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2240      	movs	r2, #64	; 0x40
 8001fc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6a3a      	ldr	r2, [r7, #32]
 8001fd2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001fd8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001fe0:	88f8      	ldrh	r0, [r7, #6]
 8001fe2:	893a      	ldrh	r2, [r7, #8]
 8001fe4:	8979      	ldrh	r1, [r7, #10]
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	9301      	str	r3, [sp, #4]
 8001fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fec:	9300      	str	r3, [sp, #0]
 8001fee:	4603      	mov	r3, r0
 8001ff0:	68f8      	ldr	r0, [r7, #12]
 8001ff2:	f000 f9d3 	bl	800239c <I2C_RequestMemoryWrite>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d005      	beq.n	8002008 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2200      	movs	r2, #0
 8002000:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e0a9      	b.n	800215c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800200c:	b29b      	uxth	r3, r3
 800200e:	2bff      	cmp	r3, #255	; 0xff
 8002010:	d90e      	bls.n	8002030 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	22ff      	movs	r2, #255	; 0xff
 8002016:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800201c:	b2da      	uxtb	r2, r3
 800201e:	8979      	ldrh	r1, [r7, #10]
 8002020:	2300      	movs	r3, #0
 8002022:	9300      	str	r3, [sp, #0]
 8002024:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002028:	68f8      	ldr	r0, [r7, #12]
 800202a:	f000 fba5 	bl	8002778 <I2C_TransferConfig>
 800202e:	e00f      	b.n	8002050 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002034:	b29a      	uxth	r2, r3
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800203e:	b2da      	uxtb	r2, r3
 8002040:	8979      	ldrh	r1, [r7, #10]
 8002042:	2300      	movs	r3, #0
 8002044:	9300      	str	r3, [sp, #0]
 8002046:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800204a:	68f8      	ldr	r0, [r7, #12]
 800204c:	f000 fb94 	bl	8002778 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002050:	697a      	ldr	r2, [r7, #20]
 8002052:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002054:	68f8      	ldr	r0, [r7, #12]
 8002056:	f000 faad 	bl	80025b4 <I2C_WaitOnTXISFlagUntilTimeout>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e07b      	b.n	800215c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002068:	781a      	ldrb	r2, [r3, #0]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002074:	1c5a      	adds	r2, r3, #1
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800207e:	b29b      	uxth	r3, r3
 8002080:	3b01      	subs	r3, #1
 8002082:	b29a      	uxth	r2, r3
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800208c:	3b01      	subs	r3, #1
 800208e:	b29a      	uxth	r2, r3
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002098:	b29b      	uxth	r3, r3
 800209a:	2b00      	cmp	r3, #0
 800209c:	d034      	beq.n	8002108 <HAL_I2C_Mem_Write+0x1c8>
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d130      	bne.n	8002108 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	9300      	str	r3, [sp, #0]
 80020aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ac:	2200      	movs	r2, #0
 80020ae:	2180      	movs	r1, #128	; 0x80
 80020b0:	68f8      	ldr	r0, [r7, #12]
 80020b2:	f000 fa3f 	bl	8002534 <I2C_WaitOnFlagUntilTimeout>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e04d      	b.n	800215c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	2bff      	cmp	r3, #255	; 0xff
 80020c8:	d90e      	bls.n	80020e8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	22ff      	movs	r2, #255	; 0xff
 80020ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020d4:	b2da      	uxtb	r2, r3
 80020d6:	8979      	ldrh	r1, [r7, #10]
 80020d8:	2300      	movs	r3, #0
 80020da:	9300      	str	r3, [sp, #0]
 80020dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020e0:	68f8      	ldr	r0, [r7, #12]
 80020e2:	f000 fb49 	bl	8002778 <I2C_TransferConfig>
 80020e6:	e00f      	b.n	8002108 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ec:	b29a      	uxth	r2, r3
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020f6:	b2da      	uxtb	r2, r3
 80020f8:	8979      	ldrh	r1, [r7, #10]
 80020fa:	2300      	movs	r3, #0
 80020fc:	9300      	str	r3, [sp, #0]
 80020fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002102:	68f8      	ldr	r0, [r7, #12]
 8002104:	f000 fb38 	bl	8002778 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800210c:	b29b      	uxth	r3, r3
 800210e:	2b00      	cmp	r3, #0
 8002110:	d19e      	bne.n	8002050 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002112:	697a      	ldr	r2, [r7, #20]
 8002114:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002116:	68f8      	ldr	r0, [r7, #12]
 8002118:	f000 fa8c 	bl	8002634 <I2C_WaitOnSTOPFlagUntilTimeout>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e01a      	b.n	800215c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2220      	movs	r2, #32
 800212c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	6859      	ldr	r1, [r3, #4]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	4b0a      	ldr	r3, [pc, #40]	; (8002164 <HAL_I2C_Mem_Write+0x224>)
 800213a:	400b      	ands	r3, r1
 800213c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2220      	movs	r2, #32
 8002142:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2200      	movs	r2, #0
 800214a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002156:	2300      	movs	r3, #0
 8002158:	e000      	b.n	800215c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800215a:	2302      	movs	r3, #2
  }
}
 800215c:	4618      	mov	r0, r3
 800215e:	3718      	adds	r7, #24
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	fe00e800 	.word	0xfe00e800

08002168 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b088      	sub	sp, #32
 800216c:	af02      	add	r7, sp, #8
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	4608      	mov	r0, r1
 8002172:	4611      	mov	r1, r2
 8002174:	461a      	mov	r2, r3
 8002176:	4603      	mov	r3, r0
 8002178:	817b      	strh	r3, [r7, #10]
 800217a:	460b      	mov	r3, r1
 800217c:	813b      	strh	r3, [r7, #8]
 800217e:	4613      	mov	r3, r2
 8002180:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002188:	b2db      	uxtb	r3, r3
 800218a:	2b20      	cmp	r3, #32
 800218c:	f040 80fd 	bne.w	800238a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002190:	6a3b      	ldr	r3, [r7, #32]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d002      	beq.n	800219c <HAL_I2C_Mem_Read+0x34>
 8002196:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002198:	2b00      	cmp	r3, #0
 800219a:	d105      	bne.n	80021a8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021a2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e0f1      	b.n	800238c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d101      	bne.n	80021b6 <HAL_I2C_Mem_Read+0x4e>
 80021b2:	2302      	movs	r3, #2
 80021b4:	e0ea      	b.n	800238c <HAL_I2C_Mem_Read+0x224>
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2201      	movs	r2, #1
 80021ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80021be:	f7ff fb5b 	bl	8001878 <HAL_GetTick>
 80021c2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	9300      	str	r3, [sp, #0]
 80021c8:	2319      	movs	r3, #25
 80021ca:	2201      	movs	r2, #1
 80021cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021d0:	68f8      	ldr	r0, [r7, #12]
 80021d2:	f000 f9af 	bl	8002534 <I2C_WaitOnFlagUntilTimeout>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e0d5      	b.n	800238c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2222      	movs	r2, #34	; 0x22
 80021e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2240      	movs	r2, #64	; 0x40
 80021ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2200      	movs	r2, #0
 80021f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6a3a      	ldr	r2, [r7, #32]
 80021fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002200:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2200      	movs	r2, #0
 8002206:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002208:	88f8      	ldrh	r0, [r7, #6]
 800220a:	893a      	ldrh	r2, [r7, #8]
 800220c:	8979      	ldrh	r1, [r7, #10]
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	9301      	str	r3, [sp, #4]
 8002212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002214:	9300      	str	r3, [sp, #0]
 8002216:	4603      	mov	r3, r0
 8002218:	68f8      	ldr	r0, [r7, #12]
 800221a:	f000 f913 	bl	8002444 <I2C_RequestMemoryRead>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d005      	beq.n	8002230 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e0ad      	b.n	800238c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002234:	b29b      	uxth	r3, r3
 8002236:	2bff      	cmp	r3, #255	; 0xff
 8002238:	d90e      	bls.n	8002258 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	22ff      	movs	r2, #255	; 0xff
 800223e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002244:	b2da      	uxtb	r2, r3
 8002246:	8979      	ldrh	r1, [r7, #10]
 8002248:	4b52      	ldr	r3, [pc, #328]	; (8002394 <HAL_I2C_Mem_Read+0x22c>)
 800224a:	9300      	str	r3, [sp, #0]
 800224c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002250:	68f8      	ldr	r0, [r7, #12]
 8002252:	f000 fa91 	bl	8002778 <I2C_TransferConfig>
 8002256:	e00f      	b.n	8002278 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800225c:	b29a      	uxth	r2, r3
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002266:	b2da      	uxtb	r2, r3
 8002268:	8979      	ldrh	r1, [r7, #10]
 800226a:	4b4a      	ldr	r3, [pc, #296]	; (8002394 <HAL_I2C_Mem_Read+0x22c>)
 800226c:	9300      	str	r3, [sp, #0]
 800226e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002272:	68f8      	ldr	r0, [r7, #12]
 8002274:	f000 fa80 	bl	8002778 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	9300      	str	r3, [sp, #0]
 800227c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800227e:	2200      	movs	r2, #0
 8002280:	2104      	movs	r1, #4
 8002282:	68f8      	ldr	r0, [r7, #12]
 8002284:	f000 f956 	bl	8002534 <I2C_WaitOnFlagUntilTimeout>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e07c      	b.n	800238c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229c:	b2d2      	uxtb	r2, r2
 800229e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a4:	1c5a      	adds	r2, r3, #1
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ae:	3b01      	subs	r3, #1
 80022b0:	b29a      	uxth	r2, r3
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	3b01      	subs	r3, #1
 80022be:	b29a      	uxth	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d034      	beq.n	8002338 <HAL_I2C_Mem_Read+0x1d0>
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d130      	bne.n	8002338 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	9300      	str	r3, [sp, #0]
 80022da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022dc:	2200      	movs	r2, #0
 80022de:	2180      	movs	r1, #128	; 0x80
 80022e0:	68f8      	ldr	r0, [r7, #12]
 80022e2:	f000 f927 	bl	8002534 <I2C_WaitOnFlagUntilTimeout>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e04d      	b.n	800238c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	2bff      	cmp	r3, #255	; 0xff
 80022f8:	d90e      	bls.n	8002318 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	22ff      	movs	r2, #255	; 0xff
 80022fe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002304:	b2da      	uxtb	r2, r3
 8002306:	8979      	ldrh	r1, [r7, #10]
 8002308:	2300      	movs	r3, #0
 800230a:	9300      	str	r3, [sp, #0]
 800230c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002310:	68f8      	ldr	r0, [r7, #12]
 8002312:	f000 fa31 	bl	8002778 <I2C_TransferConfig>
 8002316:	e00f      	b.n	8002338 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800231c:	b29a      	uxth	r2, r3
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002326:	b2da      	uxtb	r2, r3
 8002328:	8979      	ldrh	r1, [r7, #10]
 800232a:	2300      	movs	r3, #0
 800232c:	9300      	str	r3, [sp, #0]
 800232e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002332:	68f8      	ldr	r0, [r7, #12]
 8002334:	f000 fa20 	bl	8002778 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800233c:	b29b      	uxth	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d19a      	bne.n	8002278 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002342:	697a      	ldr	r2, [r7, #20]
 8002344:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002346:	68f8      	ldr	r0, [r7, #12]
 8002348:	f000 f974 	bl	8002634 <I2C_WaitOnSTOPFlagUntilTimeout>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e01a      	b.n	800238c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2220      	movs	r2, #32
 800235c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	6859      	ldr	r1, [r3, #4]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	4b0b      	ldr	r3, [pc, #44]	; (8002398 <HAL_I2C_Mem_Read+0x230>)
 800236a:	400b      	ands	r3, r1
 800236c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2220      	movs	r2, #32
 8002372:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2200      	movs	r2, #0
 800237a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2200      	movs	r2, #0
 8002382:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002386:	2300      	movs	r3, #0
 8002388:	e000      	b.n	800238c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800238a:	2302      	movs	r3, #2
  }
}
 800238c:	4618      	mov	r0, r3
 800238e:	3718      	adds	r7, #24
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	80002400 	.word	0x80002400
 8002398:	fe00e800 	.word	0xfe00e800

0800239c <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b086      	sub	sp, #24
 80023a0:	af02      	add	r7, sp, #8
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	4608      	mov	r0, r1
 80023a6:	4611      	mov	r1, r2
 80023a8:	461a      	mov	r2, r3
 80023aa:	4603      	mov	r3, r0
 80023ac:	817b      	strh	r3, [r7, #10]
 80023ae:	460b      	mov	r3, r1
 80023b0:	813b      	strh	r3, [r7, #8]
 80023b2:	4613      	mov	r3, r2
 80023b4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80023b6:	88fb      	ldrh	r3, [r7, #6]
 80023b8:	b2da      	uxtb	r2, r3
 80023ba:	8979      	ldrh	r1, [r7, #10]
 80023bc:	4b20      	ldr	r3, [pc, #128]	; (8002440 <I2C_RequestMemoryWrite+0xa4>)
 80023be:	9300      	str	r3, [sp, #0]
 80023c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023c4:	68f8      	ldr	r0, [r7, #12]
 80023c6:	f000 f9d7 	bl	8002778 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023ca:	69fa      	ldr	r2, [r7, #28]
 80023cc:	69b9      	ldr	r1, [r7, #24]
 80023ce:	68f8      	ldr	r0, [r7, #12]
 80023d0:	f000 f8f0 	bl	80025b4 <I2C_WaitOnTXISFlagUntilTimeout>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e02c      	b.n	8002438 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80023de:	88fb      	ldrh	r3, [r7, #6]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d105      	bne.n	80023f0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80023e4:	893b      	ldrh	r3, [r7, #8]
 80023e6:	b2da      	uxtb	r2, r3
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	629a      	str	r2, [r3, #40]	; 0x28
 80023ee:	e015      	b.n	800241c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80023f0:	893b      	ldrh	r3, [r7, #8]
 80023f2:	0a1b      	lsrs	r3, r3, #8
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	b2da      	uxtb	r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023fe:	69fa      	ldr	r2, [r7, #28]
 8002400:	69b9      	ldr	r1, [r7, #24]
 8002402:	68f8      	ldr	r0, [r7, #12]
 8002404:	f000 f8d6 	bl	80025b4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e012      	b.n	8002438 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002412:	893b      	ldrh	r3, [r7, #8]
 8002414:	b2da      	uxtb	r2, r3
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	9300      	str	r3, [sp, #0]
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	2200      	movs	r2, #0
 8002424:	2180      	movs	r1, #128	; 0x80
 8002426:	68f8      	ldr	r0, [r7, #12]
 8002428:	f000 f884 	bl	8002534 <I2C_WaitOnFlagUntilTimeout>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e000      	b.n	8002438 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002436:	2300      	movs	r3, #0
}
 8002438:	4618      	mov	r0, r3
 800243a:	3710      	adds	r7, #16
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	80002000 	.word	0x80002000

08002444 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b086      	sub	sp, #24
 8002448:	af02      	add	r7, sp, #8
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	4608      	mov	r0, r1
 800244e:	4611      	mov	r1, r2
 8002450:	461a      	mov	r2, r3
 8002452:	4603      	mov	r3, r0
 8002454:	817b      	strh	r3, [r7, #10]
 8002456:	460b      	mov	r3, r1
 8002458:	813b      	strh	r3, [r7, #8]
 800245a:	4613      	mov	r3, r2
 800245c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800245e:	88fb      	ldrh	r3, [r7, #6]
 8002460:	b2da      	uxtb	r2, r3
 8002462:	8979      	ldrh	r1, [r7, #10]
 8002464:	4b20      	ldr	r3, [pc, #128]	; (80024e8 <I2C_RequestMemoryRead+0xa4>)
 8002466:	9300      	str	r3, [sp, #0]
 8002468:	2300      	movs	r3, #0
 800246a:	68f8      	ldr	r0, [r7, #12]
 800246c:	f000 f984 	bl	8002778 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002470:	69fa      	ldr	r2, [r7, #28]
 8002472:	69b9      	ldr	r1, [r7, #24]
 8002474:	68f8      	ldr	r0, [r7, #12]
 8002476:	f000 f89d 	bl	80025b4 <I2C_WaitOnTXISFlagUntilTimeout>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d001      	beq.n	8002484 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e02c      	b.n	80024de <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002484:	88fb      	ldrh	r3, [r7, #6]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d105      	bne.n	8002496 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800248a:	893b      	ldrh	r3, [r7, #8]
 800248c:	b2da      	uxtb	r2, r3
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	629a      	str	r2, [r3, #40]	; 0x28
 8002494:	e015      	b.n	80024c2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002496:	893b      	ldrh	r3, [r7, #8]
 8002498:	0a1b      	lsrs	r3, r3, #8
 800249a:	b29b      	uxth	r3, r3
 800249c:	b2da      	uxtb	r2, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024a4:	69fa      	ldr	r2, [r7, #28]
 80024a6:	69b9      	ldr	r1, [r7, #24]
 80024a8:	68f8      	ldr	r0, [r7, #12]
 80024aa:	f000 f883 	bl	80025b4 <I2C_WaitOnTXISFlagUntilTimeout>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e012      	b.n	80024de <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80024b8:	893b      	ldrh	r3, [r7, #8]
 80024ba:	b2da      	uxtb	r2, r3
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	9300      	str	r3, [sp, #0]
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	2200      	movs	r2, #0
 80024ca:	2140      	movs	r1, #64	; 0x40
 80024cc:	68f8      	ldr	r0, [r7, #12]
 80024ce:	f000 f831 	bl	8002534 <I2C_WaitOnFlagUntilTimeout>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e000      	b.n	80024de <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	80002000 	.word	0x80002000

080024ec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d103      	bne.n	800250a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2200      	movs	r2, #0
 8002508:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	699b      	ldr	r3, [r3, #24]
 8002510:	f003 0301 	and.w	r3, r3, #1
 8002514:	2b01      	cmp	r3, #1
 8002516:	d007      	beq.n	8002528 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	699a      	ldr	r2, [r3, #24]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f042 0201 	orr.w	r2, r2, #1
 8002526:	619a      	str	r2, [r3, #24]
  }
}
 8002528:	bf00      	nop
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	603b      	str	r3, [r7, #0]
 8002540:	4613      	mov	r3, r2
 8002542:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002544:	e022      	b.n	800258c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800254c:	d01e      	beq.n	800258c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800254e:	f7ff f993 	bl	8001878 <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	683a      	ldr	r2, [r7, #0]
 800255a:	429a      	cmp	r2, r3
 800255c:	d302      	bcc.n	8002564 <I2C_WaitOnFlagUntilTimeout+0x30>
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d113      	bne.n	800258c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002568:	f043 0220 	orr.w	r2, r3, #32
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2220      	movs	r2, #32
 8002574:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2200      	movs	r2, #0
 800257c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2200      	movs	r2, #0
 8002584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e00f      	b.n	80025ac <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	699a      	ldr	r2, [r3, #24]
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	4013      	ands	r3, r2
 8002596:	68ba      	ldr	r2, [r7, #8]
 8002598:	429a      	cmp	r2, r3
 800259a:	bf0c      	ite	eq
 800259c:	2301      	moveq	r3, #1
 800259e:	2300      	movne	r3, #0
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	461a      	mov	r2, r3
 80025a4:	79fb      	ldrb	r3, [r7, #7]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d0cd      	beq.n	8002546 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3710      	adds	r7, #16
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80025c0:	e02c      	b.n	800261c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	68b9      	ldr	r1, [r7, #8]
 80025c6:	68f8      	ldr	r0, [r7, #12]
 80025c8:	f000 f870 	bl	80026ac <I2C_IsAcknowledgeFailed>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e02a      	b.n	800262c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025dc:	d01e      	beq.n	800261c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025de:	f7ff f94b 	bl	8001878 <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	68ba      	ldr	r2, [r7, #8]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d302      	bcc.n	80025f4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d113      	bne.n	800261c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f8:	f043 0220 	orr.w	r2, r3, #32
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2220      	movs	r2, #32
 8002604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2200      	movs	r2, #0
 800260c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e007      	b.n	800262c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	2b02      	cmp	r3, #2
 8002628:	d1cb      	bne.n	80025c2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800262a:	2300      	movs	r3, #0
}
 800262c:	4618      	mov	r0, r3
 800262e:	3710      	adds	r7, #16
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	60b9      	str	r1, [r7, #8]
 800263e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002640:	e028      	b.n	8002694 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	68b9      	ldr	r1, [r7, #8]
 8002646:	68f8      	ldr	r0, [r7, #12]
 8002648:	f000 f830 	bl	80026ac <I2C_IsAcknowledgeFailed>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e026      	b.n	80026a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002656:	f7ff f90f 	bl	8001878 <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	68ba      	ldr	r2, [r7, #8]
 8002662:	429a      	cmp	r2, r3
 8002664:	d302      	bcc.n	800266c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d113      	bne.n	8002694 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002670:	f043 0220 	orr.w	r2, r3, #32
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2220      	movs	r2, #32
 800267c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2200      	movs	r2, #0
 8002684:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2200      	movs	r2, #0
 800268c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e007      	b.n	80026a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	f003 0320 	and.w	r3, r3, #32
 800269e:	2b20      	cmp	r3, #32
 80026a0:	d1cf      	bne.n	8002642 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80026a2:	2300      	movs	r3, #0
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3710      	adds	r7, #16
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	f003 0310 	and.w	r3, r3, #16
 80026c2:	2b10      	cmp	r3, #16
 80026c4:	d151      	bne.n	800276a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026c6:	e022      	b.n	800270e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026ce:	d01e      	beq.n	800270e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026d0:	f7ff f8d2 	bl	8001878 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	68ba      	ldr	r2, [r7, #8]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d302      	bcc.n	80026e6 <I2C_IsAcknowledgeFailed+0x3a>
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d113      	bne.n	800270e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ea:	f043 0220 	orr.w	r2, r3, #32
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2220      	movs	r2, #32
 80026f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2200      	movs	r2, #0
 8002706:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e02e      	b.n	800276c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	699b      	ldr	r3, [r3, #24]
 8002714:	f003 0320 	and.w	r3, r3, #32
 8002718:	2b20      	cmp	r3, #32
 800271a:	d1d5      	bne.n	80026c8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2210      	movs	r2, #16
 8002722:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2220      	movs	r2, #32
 800272a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800272c:	68f8      	ldr	r0, [r7, #12]
 800272e:	f7ff fedd 	bl	80024ec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	6859      	ldr	r1, [r3, #4]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	4b0d      	ldr	r3, [pc, #52]	; (8002774 <I2C_IsAcknowledgeFailed+0xc8>)
 800273e:	400b      	ands	r3, r1
 8002740:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002746:	f043 0204 	orr.w	r2, r3, #4
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2220      	movs	r2, #32
 8002752:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e000      	b.n	800276c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	3710      	adds	r7, #16
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	fe00e800 	.word	0xfe00e800

08002778 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002778:	b480      	push	{r7}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	607b      	str	r3, [r7, #4]
 8002782:	460b      	mov	r3, r1
 8002784:	817b      	strh	r3, [r7, #10]
 8002786:	4613      	mov	r3, r2
 8002788:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	685a      	ldr	r2, [r3, #4]
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	0d5b      	lsrs	r3, r3, #21
 8002794:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002798:	4b0d      	ldr	r3, [pc, #52]	; (80027d0 <I2C_TransferConfig+0x58>)
 800279a:	430b      	orrs	r3, r1
 800279c:	43db      	mvns	r3, r3
 800279e:	ea02 0103 	and.w	r1, r2, r3
 80027a2:	897b      	ldrh	r3, [r7, #10]
 80027a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80027a8:	7a7b      	ldrb	r3, [r7, #9]
 80027aa:	041b      	lsls	r3, r3, #16
 80027ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80027b0:	431a      	orrs	r2, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	431a      	orrs	r2, r3
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	431a      	orrs	r2, r3
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	430a      	orrs	r2, r1
 80027c0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80027c2:	bf00      	nop
 80027c4:	3714      	adds	r7, #20
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	03ff63ff 	.word	0x03ff63ff

080027d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2b20      	cmp	r3, #32
 80027e8:	d138      	bne.n	800285c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d101      	bne.n	80027f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80027f4:	2302      	movs	r3, #2
 80027f6:	e032      	b.n	800285e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2224      	movs	r2, #36	; 0x24
 8002804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f022 0201 	bic.w	r2, r2, #1
 8002816:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002826:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	6819      	ldr	r1, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	683a      	ldr	r2, [r7, #0]
 8002834:	430a      	orrs	r2, r1
 8002836:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f042 0201 	orr.w	r2, r2, #1
 8002846:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2220      	movs	r2, #32
 800284c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002858:	2300      	movs	r3, #0
 800285a:	e000      	b.n	800285e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800285c:	2302      	movs	r3, #2
  }
}
 800285e:	4618      	mov	r0, r3
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr

0800286a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800286a:	b480      	push	{r7}
 800286c:	b085      	sub	sp, #20
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
 8002872:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800287a:	b2db      	uxtb	r3, r3
 800287c:	2b20      	cmp	r3, #32
 800287e:	d139      	bne.n	80028f4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002886:	2b01      	cmp	r3, #1
 8002888:	d101      	bne.n	800288e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800288a:	2302      	movs	r3, #2
 800288c:	e033      	b.n	80028f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2201      	movs	r2, #1
 8002892:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2224      	movs	r2, #36	; 0x24
 800289a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f022 0201 	bic.w	r2, r2, #1
 80028ac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80028bc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	021b      	lsls	r3, r3, #8
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	68fa      	ldr	r2, [r7, #12]
 80028ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f042 0201 	orr.w	r2, r2, #1
 80028de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2220      	movs	r2, #32
 80028e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80028f0:	2300      	movs	r3, #0
 80028f2:	e000      	b.n	80028f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80028f4:	2302      	movs	r3, #2
  }
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3714      	adds	r7, #20
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
	...

08002904 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002908:	4b04      	ldr	r3, [pc, #16]	; (800291c <HAL_PWREx_GetVoltageRange+0x18>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002910:	4618      	mov	r0, r3
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	40007000 	.word	0x40007000

08002920 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002920:	b480      	push	{r7}
 8002922:	b085      	sub	sp, #20
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800292e:	d130      	bne.n	8002992 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002930:	4b23      	ldr	r3, [pc, #140]	; (80029c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002938:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800293c:	d038      	beq.n	80029b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800293e:	4b20      	ldr	r3, [pc, #128]	; (80029c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002946:	4a1e      	ldr	r2, [pc, #120]	; (80029c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002948:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800294c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800294e:	4b1d      	ldr	r3, [pc, #116]	; (80029c4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2232      	movs	r2, #50	; 0x32
 8002954:	fb02 f303 	mul.w	r3, r2, r3
 8002958:	4a1b      	ldr	r2, [pc, #108]	; (80029c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800295a:	fba2 2303 	umull	r2, r3, r2, r3
 800295e:	0c9b      	lsrs	r3, r3, #18
 8002960:	3301      	adds	r3, #1
 8002962:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002964:	e002      	b.n	800296c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	3b01      	subs	r3, #1
 800296a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800296c:	4b14      	ldr	r3, [pc, #80]	; (80029c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800296e:	695b      	ldr	r3, [r3, #20]
 8002970:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002974:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002978:	d102      	bne.n	8002980 <HAL_PWREx_ControlVoltageScaling+0x60>
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d1f2      	bne.n	8002966 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002980:	4b0f      	ldr	r3, [pc, #60]	; (80029c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002982:	695b      	ldr	r3, [r3, #20]
 8002984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002988:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800298c:	d110      	bne.n	80029b0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e00f      	b.n	80029b2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002992:	4b0b      	ldr	r3, [pc, #44]	; (80029c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800299a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800299e:	d007      	beq.n	80029b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80029a0:	4b07      	ldr	r3, [pc, #28]	; (80029c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80029a8:	4a05      	ldr	r2, [pc, #20]	; (80029c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029ae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3714      	adds	r7, #20
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	40007000 	.word	0x40007000
 80029c4:	20000000 	.word	0x20000000
 80029c8:	431bde83 	.word	0x431bde83

080029cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b088      	sub	sp, #32
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e3d4      	b.n	8003188 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029de:	4ba1      	ldr	r3, [pc, #644]	; (8002c64 <HAL_RCC_OscConfig+0x298>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f003 030c 	and.w	r3, r3, #12
 80029e6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029e8:	4b9e      	ldr	r3, [pc, #632]	; (8002c64 <HAL_RCC_OscConfig+0x298>)
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	f003 0303 	and.w	r3, r3, #3
 80029f0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0310 	and.w	r3, r3, #16
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	f000 80e4 	beq.w	8002bc8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d007      	beq.n	8002a16 <HAL_RCC_OscConfig+0x4a>
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	2b0c      	cmp	r3, #12
 8002a0a:	f040 808b 	bne.w	8002b24 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	f040 8087 	bne.w	8002b24 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a16:	4b93      	ldr	r3, [pc, #588]	; (8002c64 <HAL_RCC_OscConfig+0x298>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d005      	beq.n	8002a2e <HAL_RCC_OscConfig+0x62>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	699b      	ldr	r3, [r3, #24]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e3ac      	b.n	8003188 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a1a      	ldr	r2, [r3, #32]
 8002a32:	4b8c      	ldr	r3, [pc, #560]	; (8002c64 <HAL_RCC_OscConfig+0x298>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0308 	and.w	r3, r3, #8
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d004      	beq.n	8002a48 <HAL_RCC_OscConfig+0x7c>
 8002a3e:	4b89      	ldr	r3, [pc, #548]	; (8002c64 <HAL_RCC_OscConfig+0x298>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a46:	e005      	b.n	8002a54 <HAL_RCC_OscConfig+0x88>
 8002a48:	4b86      	ldr	r3, [pc, #536]	; (8002c64 <HAL_RCC_OscConfig+0x298>)
 8002a4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a4e:	091b      	lsrs	r3, r3, #4
 8002a50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d223      	bcs.n	8002aa0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a1b      	ldr	r3, [r3, #32]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f000 fd3f 	bl	80034e0 <RCC_SetFlashLatencyFromMSIRange>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e38d      	b.n	8003188 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a6c:	4b7d      	ldr	r3, [pc, #500]	; (8002c64 <HAL_RCC_OscConfig+0x298>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a7c      	ldr	r2, [pc, #496]	; (8002c64 <HAL_RCC_OscConfig+0x298>)
 8002a72:	f043 0308 	orr.w	r3, r3, #8
 8002a76:	6013      	str	r3, [r2, #0]
 8002a78:	4b7a      	ldr	r3, [pc, #488]	; (8002c64 <HAL_RCC_OscConfig+0x298>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a1b      	ldr	r3, [r3, #32]
 8002a84:	4977      	ldr	r1, [pc, #476]	; (8002c64 <HAL_RCC_OscConfig+0x298>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a8a:	4b76      	ldr	r3, [pc, #472]	; (8002c64 <HAL_RCC_OscConfig+0x298>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	69db      	ldr	r3, [r3, #28]
 8002a96:	021b      	lsls	r3, r3, #8
 8002a98:	4972      	ldr	r1, [pc, #456]	; (8002c64 <HAL_RCC_OscConfig+0x298>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	604b      	str	r3, [r1, #4]
 8002a9e:	e025      	b.n	8002aec <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002aa0:	4b70      	ldr	r3, [pc, #448]	; (8002c64 <HAL_RCC_OscConfig+0x298>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a6f      	ldr	r2, [pc, #444]	; (8002c64 <HAL_RCC_OscConfig+0x298>)
 8002aa6:	f043 0308 	orr.w	r3, r3, #8
 8002aaa:	6013      	str	r3, [r2, #0]
 8002aac:	4b6d      	ldr	r3, [pc, #436]	; (8002c64 <HAL_RCC_OscConfig+0x298>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a1b      	ldr	r3, [r3, #32]
 8002ab8:	496a      	ldr	r1, [pc, #424]	; (8002c64 <HAL_RCC_OscConfig+0x298>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002abe:	4b69      	ldr	r3, [pc, #420]	; (8002c64 <HAL_RCC_OscConfig+0x298>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	69db      	ldr	r3, [r3, #28]
 8002aca:	021b      	lsls	r3, r3, #8
 8002acc:	4965      	ldr	r1, [pc, #404]	; (8002c64 <HAL_RCC_OscConfig+0x298>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d109      	bne.n	8002aec <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a1b      	ldr	r3, [r3, #32]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f000 fcff 	bl	80034e0 <RCC_SetFlashLatencyFromMSIRange>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d001      	beq.n	8002aec <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e34d      	b.n	8003188 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002aec:	f000 fc36 	bl	800335c <HAL_RCC_GetSysClockFreq>
 8002af0:	4601      	mov	r1, r0
 8002af2:	4b5c      	ldr	r3, [pc, #368]	; (8002c64 <HAL_RCC_OscConfig+0x298>)
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	091b      	lsrs	r3, r3, #4
 8002af8:	f003 030f 	and.w	r3, r3, #15
 8002afc:	4a5a      	ldr	r2, [pc, #360]	; (8002c68 <HAL_RCC_OscConfig+0x29c>)
 8002afe:	5cd3      	ldrb	r3, [r2, r3]
 8002b00:	f003 031f 	and.w	r3, r3, #31
 8002b04:	fa21 f303 	lsr.w	r3, r1, r3
 8002b08:	4a58      	ldr	r2, [pc, #352]	; (8002c6c <HAL_RCC_OscConfig+0x2a0>)
 8002b0a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b0c:	4b58      	ldr	r3, [pc, #352]	; (8002c70 <HAL_RCC_OscConfig+0x2a4>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7fe fe61 	bl	80017d8 <HAL_InitTick>
 8002b16:	4603      	mov	r3, r0
 8002b18:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002b1a:	7bfb      	ldrb	r3, [r7, #15]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d052      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002b20:	7bfb      	ldrb	r3, [r7, #15]
 8002b22:	e331      	b.n	8003188 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	699b      	ldr	r3, [r3, #24]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d032      	beq.n	8002b92 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b2c:	4b4d      	ldr	r3, [pc, #308]	; (8002c64 <HAL_RCC_OscConfig+0x298>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a4c      	ldr	r2, [pc, #304]	; (8002c64 <HAL_RCC_OscConfig+0x298>)
 8002b32:	f043 0301 	orr.w	r3, r3, #1
 8002b36:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b38:	f7fe fe9e 	bl	8001878 <HAL_GetTick>
 8002b3c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b3e:	e008      	b.n	8002b52 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b40:	f7fe fe9a 	bl	8001878 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e31a      	b.n	8003188 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b52:	4b44      	ldr	r3, [pc, #272]	; (8002c64 <HAL_RCC_OscConfig+0x298>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d0f0      	beq.n	8002b40 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b5e:	4b41      	ldr	r3, [pc, #260]	; (8002c64 <HAL_RCC_OscConfig+0x298>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a40      	ldr	r2, [pc, #256]	; (8002c64 <HAL_RCC_OscConfig+0x298>)
 8002b64:	f043 0308 	orr.w	r3, r3, #8
 8002b68:	6013      	str	r3, [r2, #0]
 8002b6a:	4b3e      	ldr	r3, [pc, #248]	; (8002c64 <HAL_RCC_OscConfig+0x298>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a1b      	ldr	r3, [r3, #32]
 8002b76:	493b      	ldr	r1, [pc, #236]	; (8002c64 <HAL_RCC_OscConfig+0x298>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b7c:	4b39      	ldr	r3, [pc, #228]	; (8002c64 <HAL_RCC_OscConfig+0x298>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	69db      	ldr	r3, [r3, #28]
 8002b88:	021b      	lsls	r3, r3, #8
 8002b8a:	4936      	ldr	r1, [pc, #216]	; (8002c64 <HAL_RCC_OscConfig+0x298>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	604b      	str	r3, [r1, #4]
 8002b90:	e01a      	b.n	8002bc8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b92:	4b34      	ldr	r3, [pc, #208]	; (8002c64 <HAL_RCC_OscConfig+0x298>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a33      	ldr	r2, [pc, #204]	; (8002c64 <HAL_RCC_OscConfig+0x298>)
 8002b98:	f023 0301 	bic.w	r3, r3, #1
 8002b9c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b9e:	f7fe fe6b 	bl	8001878 <HAL_GetTick>
 8002ba2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ba4:	e008      	b.n	8002bb8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ba6:	f7fe fe67 	bl	8001878 <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d901      	bls.n	8002bb8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e2e7      	b.n	8003188 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bb8:	4b2a      	ldr	r3, [pc, #168]	; (8002c64 <HAL_RCC_OscConfig+0x298>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0302 	and.w	r3, r3, #2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d1f0      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x1da>
 8002bc4:	e000      	b.n	8002bc8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002bc6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d074      	beq.n	8002cbe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	2b08      	cmp	r3, #8
 8002bd8:	d005      	beq.n	8002be6 <HAL_RCC_OscConfig+0x21a>
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	2b0c      	cmp	r3, #12
 8002bde:	d10e      	bne.n	8002bfe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	2b03      	cmp	r3, #3
 8002be4:	d10b      	bne.n	8002bfe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002be6:	4b1f      	ldr	r3, [pc, #124]	; (8002c64 <HAL_RCC_OscConfig+0x298>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d064      	beq.n	8002cbc <HAL_RCC_OscConfig+0x2f0>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d160      	bne.n	8002cbc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e2c4      	b.n	8003188 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c06:	d106      	bne.n	8002c16 <HAL_RCC_OscConfig+0x24a>
 8002c08:	4b16      	ldr	r3, [pc, #88]	; (8002c64 <HAL_RCC_OscConfig+0x298>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a15      	ldr	r2, [pc, #84]	; (8002c64 <HAL_RCC_OscConfig+0x298>)
 8002c0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c12:	6013      	str	r3, [r2, #0]
 8002c14:	e01d      	b.n	8002c52 <HAL_RCC_OscConfig+0x286>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c1e:	d10c      	bne.n	8002c3a <HAL_RCC_OscConfig+0x26e>
 8002c20:	4b10      	ldr	r3, [pc, #64]	; (8002c64 <HAL_RCC_OscConfig+0x298>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a0f      	ldr	r2, [pc, #60]	; (8002c64 <HAL_RCC_OscConfig+0x298>)
 8002c26:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c2a:	6013      	str	r3, [r2, #0]
 8002c2c:	4b0d      	ldr	r3, [pc, #52]	; (8002c64 <HAL_RCC_OscConfig+0x298>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a0c      	ldr	r2, [pc, #48]	; (8002c64 <HAL_RCC_OscConfig+0x298>)
 8002c32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c36:	6013      	str	r3, [r2, #0]
 8002c38:	e00b      	b.n	8002c52 <HAL_RCC_OscConfig+0x286>
 8002c3a:	4b0a      	ldr	r3, [pc, #40]	; (8002c64 <HAL_RCC_OscConfig+0x298>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a09      	ldr	r2, [pc, #36]	; (8002c64 <HAL_RCC_OscConfig+0x298>)
 8002c40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c44:	6013      	str	r3, [r2, #0]
 8002c46:	4b07      	ldr	r3, [pc, #28]	; (8002c64 <HAL_RCC_OscConfig+0x298>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a06      	ldr	r2, [pc, #24]	; (8002c64 <HAL_RCC_OscConfig+0x298>)
 8002c4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c50:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d01c      	beq.n	8002c94 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c5a:	f7fe fe0d 	bl	8001878 <HAL_GetTick>
 8002c5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c60:	e011      	b.n	8002c86 <HAL_RCC_OscConfig+0x2ba>
 8002c62:	bf00      	nop
 8002c64:	40021000 	.word	0x40021000
 8002c68:	08005818 	.word	0x08005818
 8002c6c:	20000000 	.word	0x20000000
 8002c70:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c74:	f7fe fe00 	bl	8001878 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	2b64      	cmp	r3, #100	; 0x64
 8002c80:	d901      	bls.n	8002c86 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e280      	b.n	8003188 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c86:	4baf      	ldr	r3, [pc, #700]	; (8002f44 <HAL_RCC_OscConfig+0x578>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d0f0      	beq.n	8002c74 <HAL_RCC_OscConfig+0x2a8>
 8002c92:	e014      	b.n	8002cbe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c94:	f7fe fdf0 	bl	8001878 <HAL_GetTick>
 8002c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c9a:	e008      	b.n	8002cae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c9c:	f7fe fdec 	bl	8001878 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	2b64      	cmp	r3, #100	; 0x64
 8002ca8:	d901      	bls.n	8002cae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e26c      	b.n	8003188 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cae:	4ba5      	ldr	r3, [pc, #660]	; (8002f44 <HAL_RCC_OscConfig+0x578>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d1f0      	bne.n	8002c9c <HAL_RCC_OscConfig+0x2d0>
 8002cba:	e000      	b.n	8002cbe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d060      	beq.n	8002d8c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	2b04      	cmp	r3, #4
 8002cce:	d005      	beq.n	8002cdc <HAL_RCC_OscConfig+0x310>
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	2b0c      	cmp	r3, #12
 8002cd4:	d119      	bne.n	8002d0a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d116      	bne.n	8002d0a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cdc:	4b99      	ldr	r3, [pc, #612]	; (8002f44 <HAL_RCC_OscConfig+0x578>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d005      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x328>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d101      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e249      	b.n	8003188 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cf4:	4b93      	ldr	r3, [pc, #588]	; (8002f44 <HAL_RCC_OscConfig+0x578>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	691b      	ldr	r3, [r3, #16]
 8002d00:	061b      	lsls	r3, r3, #24
 8002d02:	4990      	ldr	r1, [pc, #576]	; (8002f44 <HAL_RCC_OscConfig+0x578>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d08:	e040      	b.n	8002d8c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d023      	beq.n	8002d5a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d12:	4b8c      	ldr	r3, [pc, #560]	; (8002f44 <HAL_RCC_OscConfig+0x578>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a8b      	ldr	r2, [pc, #556]	; (8002f44 <HAL_RCC_OscConfig+0x578>)
 8002d18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d1e:	f7fe fdab 	bl	8001878 <HAL_GetTick>
 8002d22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d24:	e008      	b.n	8002d38 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d26:	f7fe fda7 	bl	8001878 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d901      	bls.n	8002d38 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e227      	b.n	8003188 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d38:	4b82      	ldr	r3, [pc, #520]	; (8002f44 <HAL_RCC_OscConfig+0x578>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d0f0      	beq.n	8002d26 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d44:	4b7f      	ldr	r3, [pc, #508]	; (8002f44 <HAL_RCC_OscConfig+0x578>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	691b      	ldr	r3, [r3, #16]
 8002d50:	061b      	lsls	r3, r3, #24
 8002d52:	497c      	ldr	r1, [pc, #496]	; (8002f44 <HAL_RCC_OscConfig+0x578>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	604b      	str	r3, [r1, #4]
 8002d58:	e018      	b.n	8002d8c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d5a:	4b7a      	ldr	r3, [pc, #488]	; (8002f44 <HAL_RCC_OscConfig+0x578>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a79      	ldr	r2, [pc, #484]	; (8002f44 <HAL_RCC_OscConfig+0x578>)
 8002d60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d66:	f7fe fd87 	bl	8001878 <HAL_GetTick>
 8002d6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d6c:	e008      	b.n	8002d80 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d6e:	f7fe fd83 	bl	8001878 <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d901      	bls.n	8002d80 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e203      	b.n	8003188 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d80:	4b70      	ldr	r3, [pc, #448]	; (8002f44 <HAL_RCC_OscConfig+0x578>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d1f0      	bne.n	8002d6e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0308 	and.w	r3, r3, #8
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d03c      	beq.n	8002e12 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	695b      	ldr	r3, [r3, #20]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d01c      	beq.n	8002dda <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002da0:	4b68      	ldr	r3, [pc, #416]	; (8002f44 <HAL_RCC_OscConfig+0x578>)
 8002da2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002da6:	4a67      	ldr	r2, [pc, #412]	; (8002f44 <HAL_RCC_OscConfig+0x578>)
 8002da8:	f043 0301 	orr.w	r3, r3, #1
 8002dac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002db0:	f7fe fd62 	bl	8001878 <HAL_GetTick>
 8002db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002db6:	e008      	b.n	8002dca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002db8:	f7fe fd5e 	bl	8001878 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d901      	bls.n	8002dca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e1de      	b.n	8003188 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dca:	4b5e      	ldr	r3, [pc, #376]	; (8002f44 <HAL_RCC_OscConfig+0x578>)
 8002dcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dd0:	f003 0302 	and.w	r3, r3, #2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d0ef      	beq.n	8002db8 <HAL_RCC_OscConfig+0x3ec>
 8002dd8:	e01b      	b.n	8002e12 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dda:	4b5a      	ldr	r3, [pc, #360]	; (8002f44 <HAL_RCC_OscConfig+0x578>)
 8002ddc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002de0:	4a58      	ldr	r2, [pc, #352]	; (8002f44 <HAL_RCC_OscConfig+0x578>)
 8002de2:	f023 0301 	bic.w	r3, r3, #1
 8002de6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dea:	f7fe fd45 	bl	8001878 <HAL_GetTick>
 8002dee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002df0:	e008      	b.n	8002e04 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002df2:	f7fe fd41 	bl	8001878 <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d901      	bls.n	8002e04 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e1c1      	b.n	8003188 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e04:	4b4f      	ldr	r3, [pc, #316]	; (8002f44 <HAL_RCC_OscConfig+0x578>)
 8002e06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1ef      	bne.n	8002df2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0304 	and.w	r3, r3, #4
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	f000 80a6 	beq.w	8002f6c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e20:	2300      	movs	r3, #0
 8002e22:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002e24:	4b47      	ldr	r3, [pc, #284]	; (8002f44 <HAL_RCC_OscConfig+0x578>)
 8002e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d10d      	bne.n	8002e4c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e30:	4b44      	ldr	r3, [pc, #272]	; (8002f44 <HAL_RCC_OscConfig+0x578>)
 8002e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e34:	4a43      	ldr	r2, [pc, #268]	; (8002f44 <HAL_RCC_OscConfig+0x578>)
 8002e36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e3a:	6593      	str	r3, [r2, #88]	; 0x58
 8002e3c:	4b41      	ldr	r3, [pc, #260]	; (8002f44 <HAL_RCC_OscConfig+0x578>)
 8002e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e44:	60bb      	str	r3, [r7, #8]
 8002e46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e4c:	4b3e      	ldr	r3, [pc, #248]	; (8002f48 <HAL_RCC_OscConfig+0x57c>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d118      	bne.n	8002e8a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e58:	4b3b      	ldr	r3, [pc, #236]	; (8002f48 <HAL_RCC_OscConfig+0x57c>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a3a      	ldr	r2, [pc, #232]	; (8002f48 <HAL_RCC_OscConfig+0x57c>)
 8002e5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e62:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e64:	f7fe fd08 	bl	8001878 <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e6c:	f7fe fd04 	bl	8001878 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e184      	b.n	8003188 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e7e:	4b32      	ldr	r3, [pc, #200]	; (8002f48 <HAL_RCC_OscConfig+0x57c>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d0f0      	beq.n	8002e6c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d108      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x4d8>
 8002e92:	4b2c      	ldr	r3, [pc, #176]	; (8002f44 <HAL_RCC_OscConfig+0x578>)
 8002e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e98:	4a2a      	ldr	r2, [pc, #168]	; (8002f44 <HAL_RCC_OscConfig+0x578>)
 8002e9a:	f043 0301 	orr.w	r3, r3, #1
 8002e9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ea2:	e024      	b.n	8002eee <HAL_RCC_OscConfig+0x522>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	2b05      	cmp	r3, #5
 8002eaa:	d110      	bne.n	8002ece <HAL_RCC_OscConfig+0x502>
 8002eac:	4b25      	ldr	r3, [pc, #148]	; (8002f44 <HAL_RCC_OscConfig+0x578>)
 8002eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb2:	4a24      	ldr	r2, [pc, #144]	; (8002f44 <HAL_RCC_OscConfig+0x578>)
 8002eb4:	f043 0304 	orr.w	r3, r3, #4
 8002eb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ebc:	4b21      	ldr	r3, [pc, #132]	; (8002f44 <HAL_RCC_OscConfig+0x578>)
 8002ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec2:	4a20      	ldr	r2, [pc, #128]	; (8002f44 <HAL_RCC_OscConfig+0x578>)
 8002ec4:	f043 0301 	orr.w	r3, r3, #1
 8002ec8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ecc:	e00f      	b.n	8002eee <HAL_RCC_OscConfig+0x522>
 8002ece:	4b1d      	ldr	r3, [pc, #116]	; (8002f44 <HAL_RCC_OscConfig+0x578>)
 8002ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ed4:	4a1b      	ldr	r2, [pc, #108]	; (8002f44 <HAL_RCC_OscConfig+0x578>)
 8002ed6:	f023 0301 	bic.w	r3, r3, #1
 8002eda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ede:	4b19      	ldr	r3, [pc, #100]	; (8002f44 <HAL_RCC_OscConfig+0x578>)
 8002ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee4:	4a17      	ldr	r2, [pc, #92]	; (8002f44 <HAL_RCC_OscConfig+0x578>)
 8002ee6:	f023 0304 	bic.w	r3, r3, #4
 8002eea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d016      	beq.n	8002f24 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ef6:	f7fe fcbf 	bl	8001878 <HAL_GetTick>
 8002efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002efc:	e00a      	b.n	8002f14 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002efe:	f7fe fcbb 	bl	8001878 <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d901      	bls.n	8002f14 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e139      	b.n	8003188 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f14:	4b0b      	ldr	r3, [pc, #44]	; (8002f44 <HAL_RCC_OscConfig+0x578>)
 8002f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d0ed      	beq.n	8002efe <HAL_RCC_OscConfig+0x532>
 8002f22:	e01a      	b.n	8002f5a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f24:	f7fe fca8 	bl	8001878 <HAL_GetTick>
 8002f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f2a:	e00f      	b.n	8002f4c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f2c:	f7fe fca4 	bl	8001878 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d906      	bls.n	8002f4c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e122      	b.n	8003188 <HAL_RCC_OscConfig+0x7bc>
 8002f42:	bf00      	nop
 8002f44:	40021000 	.word	0x40021000
 8002f48:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f4c:	4b90      	ldr	r3, [pc, #576]	; (8003190 <HAL_RCC_OscConfig+0x7c4>)
 8002f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1e8      	bne.n	8002f2c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f5a:	7ffb      	ldrb	r3, [r7, #31]
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d105      	bne.n	8002f6c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f60:	4b8b      	ldr	r3, [pc, #556]	; (8003190 <HAL_RCC_OscConfig+0x7c4>)
 8002f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f64:	4a8a      	ldr	r2, [pc, #552]	; (8003190 <HAL_RCC_OscConfig+0x7c4>)
 8002f66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f6a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	f000 8108 	beq.w	8003186 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	f040 80d0 	bne.w	8003120 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002f80:	4b83      	ldr	r3, [pc, #524]	; (8003190 <HAL_RCC_OscConfig+0x7c4>)
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	f003 0203 	and.w	r2, r3, #3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d130      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d127      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fb0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d11f      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002fc0:	2a07      	cmp	r2, #7
 8002fc2:	bf14      	ite	ne
 8002fc4:	2201      	movne	r2, #1
 8002fc6:	2200      	moveq	r2, #0
 8002fc8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d113      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fd8:	085b      	lsrs	r3, r3, #1
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d109      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fec:	085b      	lsrs	r3, r3, #1
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d06e      	beq.n	80030d4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	2b0c      	cmp	r3, #12
 8002ffa:	d069      	beq.n	80030d0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002ffc:	4b64      	ldr	r3, [pc, #400]	; (8003190 <HAL_RCC_OscConfig+0x7c4>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d105      	bne.n	8003014 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003008:	4b61      	ldr	r3, [pc, #388]	; (8003190 <HAL_RCC_OscConfig+0x7c4>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d001      	beq.n	8003018 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e0b7      	b.n	8003188 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003018:	4b5d      	ldr	r3, [pc, #372]	; (8003190 <HAL_RCC_OscConfig+0x7c4>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a5c      	ldr	r2, [pc, #368]	; (8003190 <HAL_RCC_OscConfig+0x7c4>)
 800301e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003022:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003024:	f7fe fc28 	bl	8001878 <HAL_GetTick>
 8003028:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800302a:	e008      	b.n	800303e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800302c:	f7fe fc24 	bl	8001878 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e0a4      	b.n	8003188 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800303e:	4b54      	ldr	r3, [pc, #336]	; (8003190 <HAL_RCC_OscConfig+0x7c4>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1f0      	bne.n	800302c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800304a:	4b51      	ldr	r3, [pc, #324]	; (8003190 <HAL_RCC_OscConfig+0x7c4>)
 800304c:	68da      	ldr	r2, [r3, #12]
 800304e:	4b51      	ldr	r3, [pc, #324]	; (8003194 <HAL_RCC_OscConfig+0x7c8>)
 8003050:	4013      	ands	r3, r2
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800305a:	3a01      	subs	r2, #1
 800305c:	0112      	lsls	r2, r2, #4
 800305e:	4311      	orrs	r1, r2
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003064:	0212      	lsls	r2, r2, #8
 8003066:	4311      	orrs	r1, r2
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800306c:	0852      	lsrs	r2, r2, #1
 800306e:	3a01      	subs	r2, #1
 8003070:	0552      	lsls	r2, r2, #21
 8003072:	4311      	orrs	r1, r2
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003078:	0852      	lsrs	r2, r2, #1
 800307a:	3a01      	subs	r2, #1
 800307c:	0652      	lsls	r2, r2, #25
 800307e:	4311      	orrs	r1, r2
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003084:	0912      	lsrs	r2, r2, #4
 8003086:	0452      	lsls	r2, r2, #17
 8003088:	430a      	orrs	r2, r1
 800308a:	4941      	ldr	r1, [pc, #260]	; (8003190 <HAL_RCC_OscConfig+0x7c4>)
 800308c:	4313      	orrs	r3, r2
 800308e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003090:	4b3f      	ldr	r3, [pc, #252]	; (8003190 <HAL_RCC_OscConfig+0x7c4>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a3e      	ldr	r2, [pc, #248]	; (8003190 <HAL_RCC_OscConfig+0x7c4>)
 8003096:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800309a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800309c:	4b3c      	ldr	r3, [pc, #240]	; (8003190 <HAL_RCC_OscConfig+0x7c4>)
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	4a3b      	ldr	r2, [pc, #236]	; (8003190 <HAL_RCC_OscConfig+0x7c4>)
 80030a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030a6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030a8:	f7fe fbe6 	bl	8001878 <HAL_GetTick>
 80030ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030ae:	e008      	b.n	80030c2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030b0:	f7fe fbe2 	bl	8001878 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e062      	b.n	8003188 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030c2:	4b33      	ldr	r3, [pc, #204]	; (8003190 <HAL_RCC_OscConfig+0x7c4>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d0f0      	beq.n	80030b0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030ce:	e05a      	b.n	8003186 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e059      	b.n	8003188 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030d4:	4b2e      	ldr	r3, [pc, #184]	; (8003190 <HAL_RCC_OscConfig+0x7c4>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d152      	bne.n	8003186 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80030e0:	4b2b      	ldr	r3, [pc, #172]	; (8003190 <HAL_RCC_OscConfig+0x7c4>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a2a      	ldr	r2, [pc, #168]	; (8003190 <HAL_RCC_OscConfig+0x7c4>)
 80030e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030ea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030ec:	4b28      	ldr	r3, [pc, #160]	; (8003190 <HAL_RCC_OscConfig+0x7c4>)
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	4a27      	ldr	r2, [pc, #156]	; (8003190 <HAL_RCC_OscConfig+0x7c4>)
 80030f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030f6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80030f8:	f7fe fbbe 	bl	8001878 <HAL_GetTick>
 80030fc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030fe:	e008      	b.n	8003112 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003100:	f7fe fbba 	bl	8001878 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b02      	cmp	r3, #2
 800310c:	d901      	bls.n	8003112 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e03a      	b.n	8003188 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003112:	4b1f      	ldr	r3, [pc, #124]	; (8003190 <HAL_RCC_OscConfig+0x7c4>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d0f0      	beq.n	8003100 <HAL_RCC_OscConfig+0x734>
 800311e:	e032      	b.n	8003186 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	2b0c      	cmp	r3, #12
 8003124:	d02d      	beq.n	8003182 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003126:	4b1a      	ldr	r3, [pc, #104]	; (8003190 <HAL_RCC_OscConfig+0x7c4>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a19      	ldr	r2, [pc, #100]	; (8003190 <HAL_RCC_OscConfig+0x7c4>)
 800312c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003130:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003132:	4b17      	ldr	r3, [pc, #92]	; (8003190 <HAL_RCC_OscConfig+0x7c4>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d105      	bne.n	800314a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800313e:	4b14      	ldr	r3, [pc, #80]	; (8003190 <HAL_RCC_OscConfig+0x7c4>)
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	4a13      	ldr	r2, [pc, #76]	; (8003190 <HAL_RCC_OscConfig+0x7c4>)
 8003144:	f023 0303 	bic.w	r3, r3, #3
 8003148:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800314a:	4b11      	ldr	r3, [pc, #68]	; (8003190 <HAL_RCC_OscConfig+0x7c4>)
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	4a10      	ldr	r2, [pc, #64]	; (8003190 <HAL_RCC_OscConfig+0x7c4>)
 8003150:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003154:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003158:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800315a:	f7fe fb8d 	bl	8001878 <HAL_GetTick>
 800315e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003160:	e008      	b.n	8003174 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003162:	f7fe fb89 	bl	8001878 <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	2b02      	cmp	r3, #2
 800316e:	d901      	bls.n	8003174 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e009      	b.n	8003188 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003174:	4b06      	ldr	r3, [pc, #24]	; (8003190 <HAL_RCC_OscConfig+0x7c4>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d1f0      	bne.n	8003162 <HAL_RCC_OscConfig+0x796>
 8003180:	e001      	b.n	8003186 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e000      	b.n	8003188 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003186:	2300      	movs	r3, #0
}
 8003188:	4618      	mov	r0, r3
 800318a:	3720      	adds	r7, #32
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	40021000 	.word	0x40021000
 8003194:	f99d808c 	.word	0xf99d808c

08003198 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d101      	bne.n	80031ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e0c8      	b.n	800333e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031ac:	4b66      	ldr	r3, [pc, #408]	; (8003348 <HAL_RCC_ClockConfig+0x1b0>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0307 	and.w	r3, r3, #7
 80031b4:	683a      	ldr	r2, [r7, #0]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d910      	bls.n	80031dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ba:	4b63      	ldr	r3, [pc, #396]	; (8003348 <HAL_RCC_ClockConfig+0x1b0>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f023 0207 	bic.w	r2, r3, #7
 80031c2:	4961      	ldr	r1, [pc, #388]	; (8003348 <HAL_RCC_ClockConfig+0x1b0>)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ca:	4b5f      	ldr	r3, [pc, #380]	; (8003348 <HAL_RCC_ClockConfig+0x1b0>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0307 	and.w	r3, r3, #7
 80031d2:	683a      	ldr	r2, [r7, #0]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d001      	beq.n	80031dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e0b0      	b.n	800333e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0301 	and.w	r3, r3, #1
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d04c      	beq.n	8003282 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	2b03      	cmp	r3, #3
 80031ee:	d107      	bne.n	8003200 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031f0:	4b56      	ldr	r3, [pc, #344]	; (800334c <HAL_RCC_ClockConfig+0x1b4>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d121      	bne.n	8003240 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e09e      	b.n	800333e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	2b02      	cmp	r3, #2
 8003206:	d107      	bne.n	8003218 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003208:	4b50      	ldr	r3, [pc, #320]	; (800334c <HAL_RCC_ClockConfig+0x1b4>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d115      	bne.n	8003240 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e092      	b.n	800333e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d107      	bne.n	8003230 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003220:	4b4a      	ldr	r3, [pc, #296]	; (800334c <HAL_RCC_ClockConfig+0x1b4>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0302 	and.w	r3, r3, #2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d109      	bne.n	8003240 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e086      	b.n	800333e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003230:	4b46      	ldr	r3, [pc, #280]	; (800334c <HAL_RCC_ClockConfig+0x1b4>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003238:	2b00      	cmp	r3, #0
 800323a:	d101      	bne.n	8003240 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e07e      	b.n	800333e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003240:	4b42      	ldr	r3, [pc, #264]	; (800334c <HAL_RCC_ClockConfig+0x1b4>)
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f023 0203 	bic.w	r2, r3, #3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	493f      	ldr	r1, [pc, #252]	; (800334c <HAL_RCC_ClockConfig+0x1b4>)
 800324e:	4313      	orrs	r3, r2
 8003250:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003252:	f7fe fb11 	bl	8001878 <HAL_GetTick>
 8003256:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003258:	e00a      	b.n	8003270 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800325a:	f7fe fb0d 	bl	8001878 <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	f241 3288 	movw	r2, #5000	; 0x1388
 8003268:	4293      	cmp	r3, r2
 800326a:	d901      	bls.n	8003270 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e066      	b.n	800333e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003270:	4b36      	ldr	r3, [pc, #216]	; (800334c <HAL_RCC_ClockConfig+0x1b4>)
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f003 020c 	and.w	r2, r3, #12
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	429a      	cmp	r2, r3
 8003280:	d1eb      	bne.n	800325a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d008      	beq.n	80032a0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800328e:	4b2f      	ldr	r3, [pc, #188]	; (800334c <HAL_RCC_ClockConfig+0x1b4>)
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	492c      	ldr	r1, [pc, #176]	; (800334c <HAL_RCC_ClockConfig+0x1b4>)
 800329c:	4313      	orrs	r3, r2
 800329e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032a0:	4b29      	ldr	r3, [pc, #164]	; (8003348 <HAL_RCC_ClockConfig+0x1b0>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0307 	and.w	r3, r3, #7
 80032a8:	683a      	ldr	r2, [r7, #0]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d210      	bcs.n	80032d0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ae:	4b26      	ldr	r3, [pc, #152]	; (8003348 <HAL_RCC_ClockConfig+0x1b0>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f023 0207 	bic.w	r2, r3, #7
 80032b6:	4924      	ldr	r1, [pc, #144]	; (8003348 <HAL_RCC_ClockConfig+0x1b0>)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032be:	4b22      	ldr	r3, [pc, #136]	; (8003348 <HAL_RCC_ClockConfig+0x1b0>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0307 	and.w	r3, r3, #7
 80032c6:	683a      	ldr	r2, [r7, #0]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d001      	beq.n	80032d0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e036      	b.n	800333e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0304 	and.w	r3, r3, #4
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d008      	beq.n	80032ee <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032dc:	4b1b      	ldr	r3, [pc, #108]	; (800334c <HAL_RCC_ClockConfig+0x1b4>)
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	4918      	ldr	r1, [pc, #96]	; (800334c <HAL_RCC_ClockConfig+0x1b4>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0308 	and.w	r3, r3, #8
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d009      	beq.n	800330e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032fa:	4b14      	ldr	r3, [pc, #80]	; (800334c <HAL_RCC_ClockConfig+0x1b4>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	4910      	ldr	r1, [pc, #64]	; (800334c <HAL_RCC_ClockConfig+0x1b4>)
 800330a:	4313      	orrs	r3, r2
 800330c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800330e:	f000 f825 	bl	800335c <HAL_RCC_GetSysClockFreq>
 8003312:	4601      	mov	r1, r0
 8003314:	4b0d      	ldr	r3, [pc, #52]	; (800334c <HAL_RCC_ClockConfig+0x1b4>)
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	091b      	lsrs	r3, r3, #4
 800331a:	f003 030f 	and.w	r3, r3, #15
 800331e:	4a0c      	ldr	r2, [pc, #48]	; (8003350 <HAL_RCC_ClockConfig+0x1b8>)
 8003320:	5cd3      	ldrb	r3, [r2, r3]
 8003322:	f003 031f 	and.w	r3, r3, #31
 8003326:	fa21 f303 	lsr.w	r3, r1, r3
 800332a:	4a0a      	ldr	r2, [pc, #40]	; (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 800332c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800332e:	4b0a      	ldr	r3, [pc, #40]	; (8003358 <HAL_RCC_ClockConfig+0x1c0>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4618      	mov	r0, r3
 8003334:	f7fe fa50 	bl	80017d8 <HAL_InitTick>
 8003338:	4603      	mov	r3, r0
 800333a:	72fb      	strb	r3, [r7, #11]

  return status;
 800333c:	7afb      	ldrb	r3, [r7, #11]
}
 800333e:	4618      	mov	r0, r3
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	40022000 	.word	0x40022000
 800334c:	40021000 	.word	0x40021000
 8003350:	08005818 	.word	0x08005818
 8003354:	20000000 	.word	0x20000000
 8003358:	20000004 	.word	0x20000004

0800335c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800335c:	b480      	push	{r7}
 800335e:	b089      	sub	sp, #36	; 0x24
 8003360:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003362:	2300      	movs	r3, #0
 8003364:	61fb      	str	r3, [r7, #28]
 8003366:	2300      	movs	r3, #0
 8003368:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800336a:	4b3d      	ldr	r3, [pc, #244]	; (8003460 <HAL_RCC_GetSysClockFreq+0x104>)
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f003 030c 	and.w	r3, r3, #12
 8003372:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003374:	4b3a      	ldr	r3, [pc, #232]	; (8003460 <HAL_RCC_GetSysClockFreq+0x104>)
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	f003 0303 	and.w	r3, r3, #3
 800337c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d005      	beq.n	8003390 <HAL_RCC_GetSysClockFreq+0x34>
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	2b0c      	cmp	r3, #12
 8003388:	d121      	bne.n	80033ce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d11e      	bne.n	80033ce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003390:	4b33      	ldr	r3, [pc, #204]	; (8003460 <HAL_RCC_GetSysClockFreq+0x104>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0308 	and.w	r3, r3, #8
 8003398:	2b00      	cmp	r3, #0
 800339a:	d107      	bne.n	80033ac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800339c:	4b30      	ldr	r3, [pc, #192]	; (8003460 <HAL_RCC_GetSysClockFreq+0x104>)
 800339e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033a2:	0a1b      	lsrs	r3, r3, #8
 80033a4:	f003 030f 	and.w	r3, r3, #15
 80033a8:	61fb      	str	r3, [r7, #28]
 80033aa:	e005      	b.n	80033b8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80033ac:	4b2c      	ldr	r3, [pc, #176]	; (8003460 <HAL_RCC_GetSysClockFreq+0x104>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	091b      	lsrs	r3, r3, #4
 80033b2:	f003 030f 	and.w	r3, r3, #15
 80033b6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80033b8:	4a2a      	ldr	r2, [pc, #168]	; (8003464 <HAL_RCC_GetSysClockFreq+0x108>)
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033c0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d10d      	bne.n	80033e4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033cc:	e00a      	b.n	80033e4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	2b04      	cmp	r3, #4
 80033d2:	d102      	bne.n	80033da <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80033d4:	4b24      	ldr	r3, [pc, #144]	; (8003468 <HAL_RCC_GetSysClockFreq+0x10c>)
 80033d6:	61bb      	str	r3, [r7, #24]
 80033d8:	e004      	b.n	80033e4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	2b08      	cmp	r3, #8
 80033de:	d101      	bne.n	80033e4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80033e0:	4b22      	ldr	r3, [pc, #136]	; (800346c <HAL_RCC_GetSysClockFreq+0x110>)
 80033e2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	2b0c      	cmp	r3, #12
 80033e8:	d133      	bne.n	8003452 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80033ea:	4b1d      	ldr	r3, [pc, #116]	; (8003460 <HAL_RCC_GetSysClockFreq+0x104>)
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	f003 0303 	and.w	r3, r3, #3
 80033f2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d002      	beq.n	8003400 <HAL_RCC_GetSysClockFreq+0xa4>
 80033fa:	2b03      	cmp	r3, #3
 80033fc:	d003      	beq.n	8003406 <HAL_RCC_GetSysClockFreq+0xaa>
 80033fe:	e005      	b.n	800340c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003400:	4b19      	ldr	r3, [pc, #100]	; (8003468 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003402:	617b      	str	r3, [r7, #20]
      break;
 8003404:	e005      	b.n	8003412 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003406:	4b19      	ldr	r3, [pc, #100]	; (800346c <HAL_RCC_GetSysClockFreq+0x110>)
 8003408:	617b      	str	r3, [r7, #20]
      break;
 800340a:	e002      	b.n	8003412 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	617b      	str	r3, [r7, #20]
      break;
 8003410:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003412:	4b13      	ldr	r3, [pc, #76]	; (8003460 <HAL_RCC_GetSysClockFreq+0x104>)
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	091b      	lsrs	r3, r3, #4
 8003418:	f003 0307 	and.w	r3, r3, #7
 800341c:	3301      	adds	r3, #1
 800341e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003420:	4b0f      	ldr	r3, [pc, #60]	; (8003460 <HAL_RCC_GetSysClockFreq+0x104>)
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	0a1b      	lsrs	r3, r3, #8
 8003426:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800342a:	697a      	ldr	r2, [r7, #20]
 800342c:	fb02 f203 	mul.w	r2, r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	fbb2 f3f3 	udiv	r3, r2, r3
 8003436:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003438:	4b09      	ldr	r3, [pc, #36]	; (8003460 <HAL_RCC_GetSysClockFreq+0x104>)
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	0e5b      	lsrs	r3, r3, #25
 800343e:	f003 0303 	and.w	r3, r3, #3
 8003442:	3301      	adds	r3, #1
 8003444:	005b      	lsls	r3, r3, #1
 8003446:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003448:	697a      	ldr	r2, [r7, #20]
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003450:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003452:	69bb      	ldr	r3, [r7, #24]
}
 8003454:	4618      	mov	r0, r3
 8003456:	3724      	adds	r7, #36	; 0x24
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr
 8003460:	40021000 	.word	0x40021000
 8003464:	08005830 	.word	0x08005830
 8003468:	00f42400 	.word	0x00f42400
 800346c:	007a1200 	.word	0x007a1200

08003470 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003470:	b480      	push	{r7}
 8003472:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003474:	4b03      	ldr	r3, [pc, #12]	; (8003484 <HAL_RCC_GetHCLKFreq+0x14>)
 8003476:	681b      	ldr	r3, [r3, #0]
}
 8003478:	4618      	mov	r0, r3
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	20000000 	.word	0x20000000

08003488 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800348c:	f7ff fff0 	bl	8003470 <HAL_RCC_GetHCLKFreq>
 8003490:	4601      	mov	r1, r0
 8003492:	4b06      	ldr	r3, [pc, #24]	; (80034ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	0a1b      	lsrs	r3, r3, #8
 8003498:	f003 0307 	and.w	r3, r3, #7
 800349c:	4a04      	ldr	r2, [pc, #16]	; (80034b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800349e:	5cd3      	ldrb	r3, [r2, r3]
 80034a0:	f003 031f 	and.w	r3, r3, #31
 80034a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	40021000 	.word	0x40021000
 80034b0:	08005828 	.word	0x08005828

080034b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80034b8:	f7ff ffda 	bl	8003470 <HAL_RCC_GetHCLKFreq>
 80034bc:	4601      	mov	r1, r0
 80034be:	4b06      	ldr	r3, [pc, #24]	; (80034d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	0adb      	lsrs	r3, r3, #11
 80034c4:	f003 0307 	and.w	r3, r3, #7
 80034c8:	4a04      	ldr	r2, [pc, #16]	; (80034dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80034ca:	5cd3      	ldrb	r3, [r2, r3]
 80034cc:	f003 031f 	and.w	r3, r3, #31
 80034d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	40021000 	.word	0x40021000
 80034dc:	08005828 	.word	0x08005828

080034e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b086      	sub	sp, #24
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80034e8:	2300      	movs	r3, #0
 80034ea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80034ec:	4b2a      	ldr	r3, [pc, #168]	; (8003598 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d003      	beq.n	8003500 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80034f8:	f7ff fa04 	bl	8002904 <HAL_PWREx_GetVoltageRange>
 80034fc:	6178      	str	r0, [r7, #20]
 80034fe:	e014      	b.n	800352a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003500:	4b25      	ldr	r3, [pc, #148]	; (8003598 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003504:	4a24      	ldr	r2, [pc, #144]	; (8003598 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003506:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800350a:	6593      	str	r3, [r2, #88]	; 0x58
 800350c:	4b22      	ldr	r3, [pc, #136]	; (8003598 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800350e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003510:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003514:	60fb      	str	r3, [r7, #12]
 8003516:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003518:	f7ff f9f4 	bl	8002904 <HAL_PWREx_GetVoltageRange>
 800351c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800351e:	4b1e      	ldr	r3, [pc, #120]	; (8003598 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003522:	4a1d      	ldr	r2, [pc, #116]	; (8003598 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003524:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003528:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003530:	d10b      	bne.n	800354a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2b80      	cmp	r3, #128	; 0x80
 8003536:	d919      	bls.n	800356c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2ba0      	cmp	r3, #160	; 0xa0
 800353c:	d902      	bls.n	8003544 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800353e:	2302      	movs	r3, #2
 8003540:	613b      	str	r3, [r7, #16]
 8003542:	e013      	b.n	800356c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003544:	2301      	movs	r3, #1
 8003546:	613b      	str	r3, [r7, #16]
 8003548:	e010      	b.n	800356c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2b80      	cmp	r3, #128	; 0x80
 800354e:	d902      	bls.n	8003556 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003550:	2303      	movs	r3, #3
 8003552:	613b      	str	r3, [r7, #16]
 8003554:	e00a      	b.n	800356c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2b80      	cmp	r3, #128	; 0x80
 800355a:	d102      	bne.n	8003562 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800355c:	2302      	movs	r3, #2
 800355e:	613b      	str	r3, [r7, #16]
 8003560:	e004      	b.n	800356c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2b70      	cmp	r3, #112	; 0x70
 8003566:	d101      	bne.n	800356c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003568:	2301      	movs	r3, #1
 800356a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800356c:	4b0b      	ldr	r3, [pc, #44]	; (800359c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f023 0207 	bic.w	r2, r3, #7
 8003574:	4909      	ldr	r1, [pc, #36]	; (800359c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	4313      	orrs	r3, r2
 800357a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800357c:	4b07      	ldr	r3, [pc, #28]	; (800359c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0307 	and.w	r3, r3, #7
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	429a      	cmp	r2, r3
 8003588:	d001      	beq.n	800358e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e000      	b.n	8003590 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800358e:	2300      	movs	r3, #0
}
 8003590:	4618      	mov	r0, r3
 8003592:	3718      	adds	r7, #24
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	40021000 	.word	0x40021000
 800359c:	40022000 	.word	0x40022000

080035a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b086      	sub	sp, #24
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80035a8:	2300      	movs	r3, #0
 80035aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035ac:	2300      	movs	r3, #0
 80035ae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d03f      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035c4:	d01c      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80035c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035ca:	d802      	bhi.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00e      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80035d0:	e01f      	b.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80035d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035d6:	d003      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80035d8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80035dc:	d01c      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80035de:	e018      	b.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80035e0:	4b85      	ldr	r3, [pc, #532]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	4a84      	ldr	r2, [pc, #528]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035ea:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035ec:	e015      	b.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	3304      	adds	r3, #4
 80035f2:	2100      	movs	r1, #0
 80035f4:	4618      	mov	r0, r3
 80035f6:	f000 fab9 	bl	8003b6c <RCCEx_PLLSAI1_Config>
 80035fa:	4603      	mov	r3, r0
 80035fc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035fe:	e00c      	b.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	3320      	adds	r3, #32
 8003604:	2100      	movs	r1, #0
 8003606:	4618      	mov	r0, r3
 8003608:	f000 fba0 	bl	8003d4c <RCCEx_PLLSAI2_Config>
 800360c:	4603      	mov	r3, r0
 800360e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003610:	e003      	b.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	74fb      	strb	r3, [r7, #19]
      break;
 8003616:	e000      	b.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003618:	bf00      	nop
    }

    if(ret == HAL_OK)
 800361a:	7cfb      	ldrb	r3, [r7, #19]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d10b      	bne.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003620:	4b75      	ldr	r3, [pc, #468]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003626:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800362e:	4972      	ldr	r1, [pc, #456]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003630:	4313      	orrs	r3, r2
 8003632:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003636:	e001      	b.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003638:	7cfb      	ldrb	r3, [r7, #19]
 800363a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d03f      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800364c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003650:	d01c      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003652:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003656:	d802      	bhi.n	800365e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8003658:	2b00      	cmp	r3, #0
 800365a:	d00e      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0xda>
 800365c:	e01f      	b.n	800369e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800365e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003662:	d003      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8003664:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003668:	d01c      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800366a:	e018      	b.n	800369e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800366c:	4b62      	ldr	r3, [pc, #392]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	4a61      	ldr	r2, [pc, #388]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003672:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003676:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003678:	e015      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	3304      	adds	r3, #4
 800367e:	2100      	movs	r1, #0
 8003680:	4618      	mov	r0, r3
 8003682:	f000 fa73 	bl	8003b6c <RCCEx_PLLSAI1_Config>
 8003686:	4603      	mov	r3, r0
 8003688:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800368a:	e00c      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	3320      	adds	r3, #32
 8003690:	2100      	movs	r1, #0
 8003692:	4618      	mov	r0, r3
 8003694:	f000 fb5a 	bl	8003d4c <RCCEx_PLLSAI2_Config>
 8003698:	4603      	mov	r3, r0
 800369a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800369c:	e003      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	74fb      	strb	r3, [r7, #19]
      break;
 80036a2:	e000      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80036a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036a6:	7cfb      	ldrb	r3, [r7, #19]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d10b      	bne.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80036ac:	4b52      	ldr	r3, [pc, #328]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036ba:	494f      	ldr	r1, [pc, #316]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80036c2:	e001      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036c4:	7cfb      	ldrb	r3, [r7, #19]
 80036c6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	f000 80a0 	beq.w	8003816 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036d6:	2300      	movs	r3, #0
 80036d8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80036da:	4b47      	ldr	r3, [pc, #284]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d101      	bne.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80036e6:	2301      	movs	r3, #1
 80036e8:	e000      	b.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80036ea:	2300      	movs	r3, #0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d00d      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036f0:	4b41      	ldr	r3, [pc, #260]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f4:	4a40      	ldr	r2, [pc, #256]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036fa:	6593      	str	r3, [r2, #88]	; 0x58
 80036fc:	4b3e      	ldr	r3, [pc, #248]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003704:	60bb      	str	r3, [r7, #8]
 8003706:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003708:	2301      	movs	r3, #1
 800370a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800370c:	4b3b      	ldr	r3, [pc, #236]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a3a      	ldr	r2, [pc, #232]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003712:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003716:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003718:	f7fe f8ae 	bl	8001878 <HAL_GetTick>
 800371c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800371e:	e009      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003720:	f7fe f8aa 	bl	8001878 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b02      	cmp	r3, #2
 800372c:	d902      	bls.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	74fb      	strb	r3, [r7, #19]
        break;
 8003732:	e005      	b.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003734:	4b31      	ldr	r3, [pc, #196]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800373c:	2b00      	cmp	r3, #0
 800373e:	d0ef      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8003740:	7cfb      	ldrb	r3, [r7, #19]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d15c      	bne.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003746:	4b2c      	ldr	r3, [pc, #176]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800374c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003750:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d01f      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800375e:	697a      	ldr	r2, [r7, #20]
 8003760:	429a      	cmp	r2, r3
 8003762:	d019      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003764:	4b24      	ldr	r3, [pc, #144]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800376a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800376e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003770:	4b21      	ldr	r3, [pc, #132]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003776:	4a20      	ldr	r2, [pc, #128]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003778:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800377c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003780:	4b1d      	ldr	r3, [pc, #116]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003786:	4a1c      	ldr	r2, [pc, #112]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003788:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800378c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003790:	4a19      	ldr	r2, [pc, #100]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	f003 0301 	and.w	r3, r3, #1
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d016      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a2:	f7fe f869 	bl	8001878 <HAL_GetTick>
 80037a6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037a8:	e00b      	b.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037aa:	f7fe f865 	bl	8001878 <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d902      	bls.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	74fb      	strb	r3, [r7, #19]
            break;
 80037c0:	e006      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037c2:	4b0d      	ldr	r3, [pc, #52]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c8:	f003 0302 	and.w	r3, r3, #2
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d0ec      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80037d0:	7cfb      	ldrb	r3, [r7, #19]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d10c      	bne.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037d6:	4b08      	ldr	r3, [pc, #32]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037e6:	4904      	ldr	r1, [pc, #16]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80037ee:	e009      	b.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80037f0:	7cfb      	ldrb	r3, [r7, #19]
 80037f2:	74bb      	strb	r3, [r7, #18]
 80037f4:	e006      	b.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80037f6:	bf00      	nop
 80037f8:	40021000 	.word	0x40021000
 80037fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003800:	7cfb      	ldrb	r3, [r7, #19]
 8003802:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003804:	7c7b      	ldrb	r3, [r7, #17]
 8003806:	2b01      	cmp	r3, #1
 8003808:	d105      	bne.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800380a:	4b9e      	ldr	r3, [pc, #632]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800380c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800380e:	4a9d      	ldr	r2, [pc, #628]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003810:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003814:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0301 	and.w	r3, r3, #1
 800381e:	2b00      	cmp	r3, #0
 8003820:	d00a      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003822:	4b98      	ldr	r3, [pc, #608]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003828:	f023 0203 	bic.w	r2, r3, #3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003830:	4994      	ldr	r1, [pc, #592]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003832:	4313      	orrs	r3, r2
 8003834:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0302 	and.w	r3, r3, #2
 8003840:	2b00      	cmp	r3, #0
 8003842:	d00a      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003844:	4b8f      	ldr	r3, [pc, #572]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800384a:	f023 020c 	bic.w	r2, r3, #12
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003852:	498c      	ldr	r1, [pc, #560]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003854:	4313      	orrs	r3, r2
 8003856:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0304 	and.w	r3, r3, #4
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00a      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003866:	4b87      	ldr	r3, [pc, #540]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800386c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003874:	4983      	ldr	r1, [pc, #524]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003876:	4313      	orrs	r3, r2
 8003878:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0308 	and.w	r3, r3, #8
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00a      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003888:	4b7e      	ldr	r3, [pc, #504]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800388a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800388e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003896:	497b      	ldr	r1, [pc, #492]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003898:	4313      	orrs	r3, r2
 800389a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0310 	and.w	r3, r3, #16
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00a      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80038aa:	4b76      	ldr	r3, [pc, #472]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038b8:	4972      	ldr	r1, [pc, #456]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0320 	and.w	r3, r3, #32
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d00a      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80038cc:	4b6d      	ldr	r3, [pc, #436]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038da:	496a      	ldr	r1, [pc, #424]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00a      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80038ee:	4b65      	ldr	r3, [pc, #404]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038fc:	4961      	ldr	r1, [pc, #388]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00a      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003910:	4b5c      	ldr	r3, [pc, #368]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003916:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800391e:	4959      	ldr	r1, [pc, #356]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003920:	4313      	orrs	r3, r2
 8003922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00a      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003932:	4b54      	ldr	r3, [pc, #336]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003938:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003940:	4950      	ldr	r1, [pc, #320]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003942:	4313      	orrs	r3, r2
 8003944:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00a      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003954:	4b4b      	ldr	r3, [pc, #300]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800395a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003962:	4948      	ldr	r1, [pc, #288]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003964:	4313      	orrs	r3, r2
 8003966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00a      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003976:	4b43      	ldr	r3, [pc, #268]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800397c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003984:	493f      	ldr	r1, [pc, #252]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003986:	4313      	orrs	r3, r2
 8003988:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d028      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003998:	4b3a      	ldr	r3, [pc, #232]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800399a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800399e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039a6:	4937      	ldr	r1, [pc, #220]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039a8:	4313      	orrs	r3, r2
 80039aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039b6:	d106      	bne.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039b8:	4b32      	ldr	r3, [pc, #200]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	4a31      	ldr	r2, [pc, #196]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039c2:	60d3      	str	r3, [r2, #12]
 80039c4:	e011      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039ce:	d10c      	bne.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	3304      	adds	r3, #4
 80039d4:	2101      	movs	r1, #1
 80039d6:	4618      	mov	r0, r3
 80039d8:	f000 f8c8 	bl	8003b6c <RCCEx_PLLSAI1_Config>
 80039dc:	4603      	mov	r3, r0
 80039de:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80039e0:	7cfb      	ldrb	r3, [r7, #19]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d001      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80039e6:	7cfb      	ldrb	r3, [r7, #19]
 80039e8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d028      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80039f6:	4b23      	ldr	r3, [pc, #140]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039fc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a04:	491f      	ldr	r1, [pc, #124]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a14:	d106      	bne.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a16:	4b1b      	ldr	r3, [pc, #108]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	4a1a      	ldr	r2, [pc, #104]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a20:	60d3      	str	r3, [r2, #12]
 8003a22:	e011      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a2c:	d10c      	bne.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	3304      	adds	r3, #4
 8003a32:	2101      	movs	r1, #1
 8003a34:	4618      	mov	r0, r3
 8003a36:	f000 f899 	bl	8003b6c <RCCEx_PLLSAI1_Config>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a3e:	7cfb      	ldrb	r3, [r7, #19]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d001      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8003a44:	7cfb      	ldrb	r3, [r7, #19]
 8003a46:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d02b      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a54:	4b0b      	ldr	r3, [pc, #44]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a5a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a62:	4908      	ldr	r1, [pc, #32]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a64:	4313      	orrs	r3, r2
 8003a66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a72:	d109      	bne.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a74:	4b03      	ldr	r3, [pc, #12]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	4a02      	ldr	r2, [pc, #8]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a7e:	60d3      	str	r3, [r2, #12]
 8003a80:	e014      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8003a82:	bf00      	nop
 8003a84:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a8c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a90:	d10c      	bne.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	3304      	adds	r3, #4
 8003a96:	2101      	movs	r1, #1
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f000 f867 	bl	8003b6c <RCCEx_PLLSAI1_Config>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003aa2:	7cfb      	ldrb	r3, [r7, #19]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d001      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8003aa8:	7cfb      	ldrb	r3, [r7, #19]
 8003aaa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d02f      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ab8:	4b2b      	ldr	r3, [pc, #172]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003abe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ac6:	4928      	ldr	r1, [pc, #160]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ad2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ad6:	d10d      	bne.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	3304      	adds	r3, #4
 8003adc:	2102      	movs	r1, #2
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f000 f844 	bl	8003b6c <RCCEx_PLLSAI1_Config>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ae8:	7cfb      	ldrb	r3, [r7, #19]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d014      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003aee:	7cfb      	ldrb	r3, [r7, #19]
 8003af0:	74bb      	strb	r3, [r7, #18]
 8003af2:	e011      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003af8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003afc:	d10c      	bne.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	3320      	adds	r3, #32
 8003b02:	2102      	movs	r1, #2
 8003b04:	4618      	mov	r0, r3
 8003b06:	f000 f921 	bl	8003d4c <RCCEx_PLLSAI2_Config>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b0e:	7cfb      	ldrb	r3, [r7, #19]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d001      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003b14:	7cfb      	ldrb	r3, [r7, #19]
 8003b16:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d00a      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003b24:	4b10      	ldr	r3, [pc, #64]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b2a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b32:	490d      	ldr	r1, [pc, #52]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b34:	4313      	orrs	r3, r2
 8003b36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d00b      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b46:	4b08      	ldr	r3, [pc, #32]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b4c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b56:	4904      	ldr	r1, [pc, #16]	; (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003b5e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3718      	adds	r7, #24
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	40021000 	.word	0x40021000

08003b6c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b76:	2300      	movs	r3, #0
 8003b78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b7a:	4b73      	ldr	r3, [pc, #460]	; (8003d48 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	f003 0303 	and.w	r3, r3, #3
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d018      	beq.n	8003bb8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003b86:	4b70      	ldr	r3, [pc, #448]	; (8003d48 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	f003 0203 	and.w	r2, r3, #3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d10d      	bne.n	8003bb2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
       ||
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d009      	beq.n	8003bb2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003b9e:	4b6a      	ldr	r3, [pc, #424]	; (8003d48 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	091b      	lsrs	r3, r3, #4
 8003ba4:	f003 0307 	and.w	r3, r3, #7
 8003ba8:	1c5a      	adds	r2, r3, #1
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
       ||
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d044      	beq.n	8003c3c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	73fb      	strb	r3, [r7, #15]
 8003bb6:	e041      	b.n	8003c3c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d00c      	beq.n	8003bda <RCCEx_PLLSAI1_Config+0x6e>
 8003bc0:	2b03      	cmp	r3, #3
 8003bc2:	d013      	beq.n	8003bec <RCCEx_PLLSAI1_Config+0x80>
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d120      	bne.n	8003c0a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003bc8:	4b5f      	ldr	r3, [pc, #380]	; (8003d48 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0302 	and.w	r3, r3, #2
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d11d      	bne.n	8003c10 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bd8:	e01a      	b.n	8003c10 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003bda:	4b5b      	ldr	r3, [pc, #364]	; (8003d48 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d116      	bne.n	8003c14 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bea:	e013      	b.n	8003c14 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003bec:	4b56      	ldr	r3, [pc, #344]	; (8003d48 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d10f      	bne.n	8003c18 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003bf8:	4b53      	ldr	r3, [pc, #332]	; (8003d48 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d109      	bne.n	8003c18 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c08:	e006      	b.n	8003c18 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	73fb      	strb	r3, [r7, #15]
      break;
 8003c0e:	e004      	b.n	8003c1a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003c10:	bf00      	nop
 8003c12:	e002      	b.n	8003c1a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003c14:	bf00      	nop
 8003c16:	e000      	b.n	8003c1a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003c18:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c1a:	7bfb      	ldrb	r3, [r7, #15]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d10d      	bne.n	8003c3c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003c20:	4b49      	ldr	r3, [pc, #292]	; (8003d48 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6819      	ldr	r1, [r3, #0]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	3b01      	subs	r3, #1
 8003c32:	011b      	lsls	r3, r3, #4
 8003c34:	430b      	orrs	r3, r1
 8003c36:	4944      	ldr	r1, [pc, #272]	; (8003d48 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003c3c:	7bfb      	ldrb	r3, [r7, #15]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d17d      	bne.n	8003d3e <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003c42:	4b41      	ldr	r3, [pc, #260]	; (8003d48 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a40      	ldr	r2, [pc, #256]	; (8003d48 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c48:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003c4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c4e:	f7fd fe13 	bl	8001878 <HAL_GetTick>
 8003c52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c54:	e009      	b.n	8003c6a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c56:	f7fd fe0f 	bl	8001878 <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d902      	bls.n	8003c6a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	73fb      	strb	r3, [r7, #15]
        break;
 8003c68:	e005      	b.n	8003c76 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c6a:	4b37      	ldr	r3, [pc, #220]	; (8003d48 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1ef      	bne.n	8003c56 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003c76:	7bfb      	ldrb	r3, [r7, #15]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d160      	bne.n	8003d3e <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d111      	bne.n	8003ca6 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c82:	4b31      	ldr	r3, [pc, #196]	; (8003d48 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003c8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	6892      	ldr	r2, [r2, #8]
 8003c92:	0211      	lsls	r1, r2, #8
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	68d2      	ldr	r2, [r2, #12]
 8003c98:	0912      	lsrs	r2, r2, #4
 8003c9a:	0452      	lsls	r2, r2, #17
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	492a      	ldr	r1, [pc, #168]	; (8003d48 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	610b      	str	r3, [r1, #16]
 8003ca4:	e027      	b.n	8003cf6 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d112      	bne.n	8003cd2 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003cac:	4b26      	ldr	r3, [pc, #152]	; (8003d48 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003cb4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	6892      	ldr	r2, [r2, #8]
 8003cbc:	0211      	lsls	r1, r2, #8
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	6912      	ldr	r2, [r2, #16]
 8003cc2:	0852      	lsrs	r2, r2, #1
 8003cc4:	3a01      	subs	r2, #1
 8003cc6:	0552      	lsls	r2, r2, #21
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	491f      	ldr	r1, [pc, #124]	; (8003d48 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	610b      	str	r3, [r1, #16]
 8003cd0:	e011      	b.n	8003cf6 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003cd2:	4b1d      	ldr	r3, [pc, #116]	; (8003d48 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003cda:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	6892      	ldr	r2, [r2, #8]
 8003ce2:	0211      	lsls	r1, r2, #8
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	6952      	ldr	r2, [r2, #20]
 8003ce8:	0852      	lsrs	r2, r2, #1
 8003cea:	3a01      	subs	r2, #1
 8003cec:	0652      	lsls	r2, r2, #25
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	4915      	ldr	r1, [pc, #84]	; (8003d48 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003cf6:	4b14      	ldr	r3, [pc, #80]	; (8003d48 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a13      	ldr	r2, [pc, #76]	; (8003d48 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003cfc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d00:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d02:	f7fd fdb9 	bl	8001878 <HAL_GetTick>
 8003d06:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d08:	e009      	b.n	8003d1e <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d0a:	f7fd fdb5 	bl	8001878 <HAL_GetTick>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d902      	bls.n	8003d1e <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	73fb      	strb	r3, [r7, #15]
          break;
 8003d1c:	e005      	b.n	8003d2a <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d1e:	4b0a      	ldr	r3, [pc, #40]	; (8003d48 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d0ef      	beq.n	8003d0a <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8003d2a:	7bfb      	ldrb	r3, [r7, #15]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d106      	bne.n	8003d3e <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003d30:	4b05      	ldr	r3, [pc, #20]	; (8003d48 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d32:	691a      	ldr	r2, [r3, #16]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	4903      	ldr	r1, [pc, #12]	; (8003d48 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3710      	adds	r7, #16
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	40021000 	.word	0x40021000

08003d4c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d56:	2300      	movs	r3, #0
 8003d58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d5a:	4b68      	ldr	r3, [pc, #416]	; (8003efc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	f003 0303 	and.w	r3, r3, #3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d018      	beq.n	8003d98 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003d66:	4b65      	ldr	r3, [pc, #404]	; (8003efc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	f003 0203 	and.w	r2, r3, #3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d10d      	bne.n	8003d92 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
       ||
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d009      	beq.n	8003d92 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003d7e:	4b5f      	ldr	r3, [pc, #380]	; (8003efc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	091b      	lsrs	r3, r3, #4
 8003d84:	f003 0307 	and.w	r3, r3, #7
 8003d88:	1c5a      	adds	r2, r3, #1
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	685b      	ldr	r3, [r3, #4]
       ||
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d044      	beq.n	8003e1c <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	73fb      	strb	r3, [r7, #15]
 8003d96:	e041      	b.n	8003e1c <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d00c      	beq.n	8003dba <RCCEx_PLLSAI2_Config+0x6e>
 8003da0:	2b03      	cmp	r3, #3
 8003da2:	d013      	beq.n	8003dcc <RCCEx_PLLSAI2_Config+0x80>
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d120      	bne.n	8003dea <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003da8:	4b54      	ldr	r3, [pc, #336]	; (8003efc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0302 	and.w	r3, r3, #2
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d11d      	bne.n	8003df0 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003db8:	e01a      	b.n	8003df0 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003dba:	4b50      	ldr	r3, [pc, #320]	; (8003efc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d116      	bne.n	8003df4 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dca:	e013      	b.n	8003df4 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003dcc:	4b4b      	ldr	r3, [pc, #300]	; (8003efc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d10f      	bne.n	8003df8 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003dd8:	4b48      	ldr	r3, [pc, #288]	; (8003efc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d109      	bne.n	8003df8 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003de8:	e006      	b.n	8003df8 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	73fb      	strb	r3, [r7, #15]
      break;
 8003dee:	e004      	b.n	8003dfa <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003df0:	bf00      	nop
 8003df2:	e002      	b.n	8003dfa <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003df4:	bf00      	nop
 8003df6:	e000      	b.n	8003dfa <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003df8:	bf00      	nop
    }

    if(status == HAL_OK)
 8003dfa:	7bfb      	ldrb	r3, [r7, #15]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d10d      	bne.n	8003e1c <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003e00:	4b3e      	ldr	r3, [pc, #248]	; (8003efc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6819      	ldr	r1, [r3, #0]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	3b01      	subs	r3, #1
 8003e12:	011b      	lsls	r3, r3, #4
 8003e14:	430b      	orrs	r3, r1
 8003e16:	4939      	ldr	r1, [pc, #228]	; (8003efc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003e1c:	7bfb      	ldrb	r3, [r7, #15]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d167      	bne.n	8003ef2 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003e22:	4b36      	ldr	r3, [pc, #216]	; (8003efc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a35      	ldr	r2, [pc, #212]	; (8003efc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003e28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e2e:	f7fd fd23 	bl	8001878 <HAL_GetTick>
 8003e32:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003e34:	e009      	b.n	8003e4a <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003e36:	f7fd fd1f 	bl	8001878 <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d902      	bls.n	8003e4a <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	73fb      	strb	r3, [r7, #15]
        break;
 8003e48:	e005      	b.n	8003e56 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003e4a:	4b2c      	ldr	r3, [pc, #176]	; (8003efc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d1ef      	bne.n	8003e36 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003e56:	7bfb      	ldrb	r3, [r7, #15]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d14a      	bne.n	8003ef2 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d111      	bne.n	8003e86 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e62:	4b26      	ldr	r3, [pc, #152]	; (8003efc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003e64:	695b      	ldr	r3, [r3, #20]
 8003e66:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003e6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	6892      	ldr	r2, [r2, #8]
 8003e72:	0211      	lsls	r1, r2, #8
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	68d2      	ldr	r2, [r2, #12]
 8003e78:	0912      	lsrs	r2, r2, #4
 8003e7a:	0452      	lsls	r2, r2, #17
 8003e7c:	430a      	orrs	r2, r1
 8003e7e:	491f      	ldr	r1, [pc, #124]	; (8003efc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003e80:	4313      	orrs	r3, r2
 8003e82:	614b      	str	r3, [r1, #20]
 8003e84:	e011      	b.n	8003eaa <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e86:	4b1d      	ldr	r3, [pc, #116]	; (8003efc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003e8e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	6892      	ldr	r2, [r2, #8]
 8003e96:	0211      	lsls	r1, r2, #8
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	6912      	ldr	r2, [r2, #16]
 8003e9c:	0852      	lsrs	r2, r2, #1
 8003e9e:	3a01      	subs	r2, #1
 8003ea0:	0652      	lsls	r2, r2, #25
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	4915      	ldr	r1, [pc, #84]	; (8003efc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003eaa:	4b14      	ldr	r3, [pc, #80]	; (8003efc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a13      	ldr	r2, [pc, #76]	; (8003efc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eb4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eb6:	f7fd fcdf 	bl	8001878 <HAL_GetTick>
 8003eba:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ebc:	e009      	b.n	8003ed2 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003ebe:	f7fd fcdb 	bl	8001878 <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d902      	bls.n	8003ed2 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	73fb      	strb	r3, [r7, #15]
          break;
 8003ed0:	e005      	b.n	8003ede <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ed2:	4b0a      	ldr	r3, [pc, #40]	; (8003efc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d0ef      	beq.n	8003ebe <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8003ede:	7bfb      	ldrb	r3, [r7, #15]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d106      	bne.n	8003ef2 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003ee4:	4b05      	ldr	r3, [pc, #20]	; (8003efc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ee6:	695a      	ldr	r2, [r3, #20]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	695b      	ldr	r3, [r3, #20]
 8003eec:	4903      	ldr	r1, [pc, #12]	; (8003efc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3710      	adds	r7, #16
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	40021000 	.word	0x40021000

08003f00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d101      	bne.n	8003f12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e040      	b.n	8003f94 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d106      	bne.n	8003f28 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f7fd fae4 	bl	80014f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2224      	movs	r2, #36	; 0x24
 8003f2c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f022 0201 	bic.w	r2, r2, #1
 8003f3c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 f8c0 	bl	80040c4 <UART_SetConfig>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d101      	bne.n	8003f4e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e022      	b.n	8003f94 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d002      	beq.n	8003f5c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 fb3e 	bl	80045d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	685a      	ldr	r2, [r3, #4]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	689a      	ldr	r2, [r3, #8]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f042 0201 	orr.w	r2, r2, #1
 8003f8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f000 fbc5 	bl	800471c <UART_CheckIdleState>
 8003f92:	4603      	mov	r3, r0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3708      	adds	r7, #8
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b08a      	sub	sp, #40	; 0x28
 8003fa0:	af02      	add	r7, sp, #8
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	603b      	str	r3, [r7, #0]
 8003fa8:	4613      	mov	r3, r2
 8003faa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fb0:	2b20      	cmp	r3, #32
 8003fb2:	f040 8081 	bne.w	80040b8 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d002      	beq.n	8003fc2 <HAL_UART_Transmit+0x26>
 8003fbc:	88fb      	ldrh	r3, [r7, #6]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d101      	bne.n	8003fc6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e079      	b.n	80040ba <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d101      	bne.n	8003fd4 <HAL_UART_Transmit+0x38>
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	e072      	b.n	80040ba <HAL_UART_Transmit+0x11e>
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2221      	movs	r2, #33	; 0x21
 8003fe6:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003fe8:	f7fd fc46 	bl	8001878 <HAL_GetTick>
 8003fec:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	88fa      	ldrh	r2, [r7, #6]
 8003ff2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	88fa      	ldrh	r2, [r7, #6]
 8003ffa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004006:	d108      	bne.n	800401a <HAL_UART_Transmit+0x7e>
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d104      	bne.n	800401a <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8004010:	2300      	movs	r3, #0
 8004012:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	61bb      	str	r3, [r7, #24]
 8004018:	e003      	b.n	8004022 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800401e:	2300      	movs	r3, #0
 8004020:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2200      	movs	r2, #0
 8004026:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800402a:	e02d      	b.n	8004088 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	9300      	str	r3, [sp, #0]
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	2200      	movs	r2, #0
 8004034:	2180      	movs	r1, #128	; 0x80
 8004036:	68f8      	ldr	r0, [r7, #12]
 8004038:	f000 fbb5 	bl	80047a6 <UART_WaitOnFlagUntilTimeout>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d001      	beq.n	8004046 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e039      	b.n	80040ba <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d10b      	bne.n	8004064 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	881a      	ldrh	r2, [r3, #0]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004058:	b292      	uxth	r2, r2
 800405a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	3302      	adds	r3, #2
 8004060:	61bb      	str	r3, [r7, #24]
 8004062:	e008      	b.n	8004076 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	781a      	ldrb	r2, [r3, #0]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	b292      	uxth	r2, r2
 800406e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	3301      	adds	r3, #1
 8004074:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800407c:	b29b      	uxth	r3, r3
 800407e:	3b01      	subs	r3, #1
 8004080:	b29a      	uxth	r2, r3
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800408e:	b29b      	uxth	r3, r3
 8004090:	2b00      	cmp	r3, #0
 8004092:	d1cb      	bne.n	800402c <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	9300      	str	r3, [sp, #0]
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	2200      	movs	r2, #0
 800409c:	2140      	movs	r1, #64	; 0x40
 800409e:	68f8      	ldr	r0, [r7, #12]
 80040a0:	f000 fb81 	bl	80047a6 <UART_WaitOnFlagUntilTimeout>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d001      	beq.n	80040ae <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e005      	b.n	80040ba <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2220      	movs	r2, #32
 80040b2:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80040b4:	2300      	movs	r3, #0
 80040b6:	e000      	b.n	80040ba <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80040b8:	2302      	movs	r3, #2
  }
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3720      	adds	r7, #32
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
	...

080040c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040c4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80040c8:	b088      	sub	sp, #32
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80040ce:	2300      	movs	r3, #0
 80040d0:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	689a      	ldr	r2, [r3, #8]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	431a      	orrs	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	695b      	ldr	r3, [r3, #20]
 80040e0:	431a      	orrs	r2, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	69db      	ldr	r3, [r3, #28]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	4bac      	ldr	r3, [pc, #688]	; (80043a4 <UART_SetConfig+0x2e0>)
 80040f2:	4013      	ands	r3, r2
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	6812      	ldr	r2, [r2, #0]
 80040f8:	69f9      	ldr	r1, [r7, #28]
 80040fa:	430b      	orrs	r3, r1
 80040fc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	68da      	ldr	r2, [r3, #12]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	430a      	orrs	r2, r1
 8004112:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4aa2      	ldr	r2, [pc, #648]	; (80043a8 <UART_SetConfig+0x2e4>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d004      	beq.n	800412e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a1b      	ldr	r3, [r3, #32]
 8004128:	69fa      	ldr	r2, [r7, #28]
 800412a:	4313      	orrs	r3, r2
 800412c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	69fa      	ldr	r2, [r7, #28]
 800413e:	430a      	orrs	r2, r1
 8004140:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a99      	ldr	r2, [pc, #612]	; (80043ac <UART_SetConfig+0x2e8>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d121      	bne.n	8004190 <UART_SetConfig+0xcc>
 800414c:	4b98      	ldr	r3, [pc, #608]	; (80043b0 <UART_SetConfig+0x2ec>)
 800414e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004152:	f003 0303 	and.w	r3, r3, #3
 8004156:	2b03      	cmp	r3, #3
 8004158:	d816      	bhi.n	8004188 <UART_SetConfig+0xc4>
 800415a:	a201      	add	r2, pc, #4	; (adr r2, 8004160 <UART_SetConfig+0x9c>)
 800415c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004160:	08004171 	.word	0x08004171
 8004164:	0800417d 	.word	0x0800417d
 8004168:	08004177 	.word	0x08004177
 800416c:	08004183 	.word	0x08004183
 8004170:	2301      	movs	r3, #1
 8004172:	76fb      	strb	r3, [r7, #27]
 8004174:	e0e8      	b.n	8004348 <UART_SetConfig+0x284>
 8004176:	2302      	movs	r3, #2
 8004178:	76fb      	strb	r3, [r7, #27]
 800417a:	e0e5      	b.n	8004348 <UART_SetConfig+0x284>
 800417c:	2304      	movs	r3, #4
 800417e:	76fb      	strb	r3, [r7, #27]
 8004180:	e0e2      	b.n	8004348 <UART_SetConfig+0x284>
 8004182:	2308      	movs	r3, #8
 8004184:	76fb      	strb	r3, [r7, #27]
 8004186:	e0df      	b.n	8004348 <UART_SetConfig+0x284>
 8004188:	2310      	movs	r3, #16
 800418a:	76fb      	strb	r3, [r7, #27]
 800418c:	bf00      	nop
 800418e:	e0db      	b.n	8004348 <UART_SetConfig+0x284>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a87      	ldr	r2, [pc, #540]	; (80043b4 <UART_SetConfig+0x2f0>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d134      	bne.n	8004204 <UART_SetConfig+0x140>
 800419a:	4b85      	ldr	r3, [pc, #532]	; (80043b0 <UART_SetConfig+0x2ec>)
 800419c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a0:	f003 030c 	and.w	r3, r3, #12
 80041a4:	2b0c      	cmp	r3, #12
 80041a6:	d829      	bhi.n	80041fc <UART_SetConfig+0x138>
 80041a8:	a201      	add	r2, pc, #4	; (adr r2, 80041b0 <UART_SetConfig+0xec>)
 80041aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ae:	bf00      	nop
 80041b0:	080041e5 	.word	0x080041e5
 80041b4:	080041fd 	.word	0x080041fd
 80041b8:	080041fd 	.word	0x080041fd
 80041bc:	080041fd 	.word	0x080041fd
 80041c0:	080041f1 	.word	0x080041f1
 80041c4:	080041fd 	.word	0x080041fd
 80041c8:	080041fd 	.word	0x080041fd
 80041cc:	080041fd 	.word	0x080041fd
 80041d0:	080041eb 	.word	0x080041eb
 80041d4:	080041fd 	.word	0x080041fd
 80041d8:	080041fd 	.word	0x080041fd
 80041dc:	080041fd 	.word	0x080041fd
 80041e0:	080041f7 	.word	0x080041f7
 80041e4:	2300      	movs	r3, #0
 80041e6:	76fb      	strb	r3, [r7, #27]
 80041e8:	e0ae      	b.n	8004348 <UART_SetConfig+0x284>
 80041ea:	2302      	movs	r3, #2
 80041ec:	76fb      	strb	r3, [r7, #27]
 80041ee:	e0ab      	b.n	8004348 <UART_SetConfig+0x284>
 80041f0:	2304      	movs	r3, #4
 80041f2:	76fb      	strb	r3, [r7, #27]
 80041f4:	e0a8      	b.n	8004348 <UART_SetConfig+0x284>
 80041f6:	2308      	movs	r3, #8
 80041f8:	76fb      	strb	r3, [r7, #27]
 80041fa:	e0a5      	b.n	8004348 <UART_SetConfig+0x284>
 80041fc:	2310      	movs	r3, #16
 80041fe:	76fb      	strb	r3, [r7, #27]
 8004200:	bf00      	nop
 8004202:	e0a1      	b.n	8004348 <UART_SetConfig+0x284>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a6b      	ldr	r2, [pc, #428]	; (80043b8 <UART_SetConfig+0x2f4>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d120      	bne.n	8004250 <UART_SetConfig+0x18c>
 800420e:	4b68      	ldr	r3, [pc, #416]	; (80043b0 <UART_SetConfig+0x2ec>)
 8004210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004214:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004218:	2b10      	cmp	r3, #16
 800421a:	d00f      	beq.n	800423c <UART_SetConfig+0x178>
 800421c:	2b10      	cmp	r3, #16
 800421e:	d802      	bhi.n	8004226 <UART_SetConfig+0x162>
 8004220:	2b00      	cmp	r3, #0
 8004222:	d005      	beq.n	8004230 <UART_SetConfig+0x16c>
 8004224:	e010      	b.n	8004248 <UART_SetConfig+0x184>
 8004226:	2b20      	cmp	r3, #32
 8004228:	d005      	beq.n	8004236 <UART_SetConfig+0x172>
 800422a:	2b30      	cmp	r3, #48	; 0x30
 800422c:	d009      	beq.n	8004242 <UART_SetConfig+0x17e>
 800422e:	e00b      	b.n	8004248 <UART_SetConfig+0x184>
 8004230:	2300      	movs	r3, #0
 8004232:	76fb      	strb	r3, [r7, #27]
 8004234:	e088      	b.n	8004348 <UART_SetConfig+0x284>
 8004236:	2302      	movs	r3, #2
 8004238:	76fb      	strb	r3, [r7, #27]
 800423a:	e085      	b.n	8004348 <UART_SetConfig+0x284>
 800423c:	2304      	movs	r3, #4
 800423e:	76fb      	strb	r3, [r7, #27]
 8004240:	e082      	b.n	8004348 <UART_SetConfig+0x284>
 8004242:	2308      	movs	r3, #8
 8004244:	76fb      	strb	r3, [r7, #27]
 8004246:	e07f      	b.n	8004348 <UART_SetConfig+0x284>
 8004248:	2310      	movs	r3, #16
 800424a:	76fb      	strb	r3, [r7, #27]
 800424c:	bf00      	nop
 800424e:	e07b      	b.n	8004348 <UART_SetConfig+0x284>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a59      	ldr	r2, [pc, #356]	; (80043bc <UART_SetConfig+0x2f8>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d120      	bne.n	800429c <UART_SetConfig+0x1d8>
 800425a:	4b55      	ldr	r3, [pc, #340]	; (80043b0 <UART_SetConfig+0x2ec>)
 800425c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004260:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004264:	2b40      	cmp	r3, #64	; 0x40
 8004266:	d00f      	beq.n	8004288 <UART_SetConfig+0x1c4>
 8004268:	2b40      	cmp	r3, #64	; 0x40
 800426a:	d802      	bhi.n	8004272 <UART_SetConfig+0x1ae>
 800426c:	2b00      	cmp	r3, #0
 800426e:	d005      	beq.n	800427c <UART_SetConfig+0x1b8>
 8004270:	e010      	b.n	8004294 <UART_SetConfig+0x1d0>
 8004272:	2b80      	cmp	r3, #128	; 0x80
 8004274:	d005      	beq.n	8004282 <UART_SetConfig+0x1be>
 8004276:	2bc0      	cmp	r3, #192	; 0xc0
 8004278:	d009      	beq.n	800428e <UART_SetConfig+0x1ca>
 800427a:	e00b      	b.n	8004294 <UART_SetConfig+0x1d0>
 800427c:	2300      	movs	r3, #0
 800427e:	76fb      	strb	r3, [r7, #27]
 8004280:	e062      	b.n	8004348 <UART_SetConfig+0x284>
 8004282:	2302      	movs	r3, #2
 8004284:	76fb      	strb	r3, [r7, #27]
 8004286:	e05f      	b.n	8004348 <UART_SetConfig+0x284>
 8004288:	2304      	movs	r3, #4
 800428a:	76fb      	strb	r3, [r7, #27]
 800428c:	e05c      	b.n	8004348 <UART_SetConfig+0x284>
 800428e:	2308      	movs	r3, #8
 8004290:	76fb      	strb	r3, [r7, #27]
 8004292:	e059      	b.n	8004348 <UART_SetConfig+0x284>
 8004294:	2310      	movs	r3, #16
 8004296:	76fb      	strb	r3, [r7, #27]
 8004298:	bf00      	nop
 800429a:	e055      	b.n	8004348 <UART_SetConfig+0x284>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a47      	ldr	r2, [pc, #284]	; (80043c0 <UART_SetConfig+0x2fc>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d124      	bne.n	80042f0 <UART_SetConfig+0x22c>
 80042a6:	4b42      	ldr	r3, [pc, #264]	; (80043b0 <UART_SetConfig+0x2ec>)
 80042a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042b4:	d012      	beq.n	80042dc <UART_SetConfig+0x218>
 80042b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042ba:	d802      	bhi.n	80042c2 <UART_SetConfig+0x1fe>
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d007      	beq.n	80042d0 <UART_SetConfig+0x20c>
 80042c0:	e012      	b.n	80042e8 <UART_SetConfig+0x224>
 80042c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042c6:	d006      	beq.n	80042d6 <UART_SetConfig+0x212>
 80042c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042cc:	d009      	beq.n	80042e2 <UART_SetConfig+0x21e>
 80042ce:	e00b      	b.n	80042e8 <UART_SetConfig+0x224>
 80042d0:	2300      	movs	r3, #0
 80042d2:	76fb      	strb	r3, [r7, #27]
 80042d4:	e038      	b.n	8004348 <UART_SetConfig+0x284>
 80042d6:	2302      	movs	r3, #2
 80042d8:	76fb      	strb	r3, [r7, #27]
 80042da:	e035      	b.n	8004348 <UART_SetConfig+0x284>
 80042dc:	2304      	movs	r3, #4
 80042de:	76fb      	strb	r3, [r7, #27]
 80042e0:	e032      	b.n	8004348 <UART_SetConfig+0x284>
 80042e2:	2308      	movs	r3, #8
 80042e4:	76fb      	strb	r3, [r7, #27]
 80042e6:	e02f      	b.n	8004348 <UART_SetConfig+0x284>
 80042e8:	2310      	movs	r3, #16
 80042ea:	76fb      	strb	r3, [r7, #27]
 80042ec:	bf00      	nop
 80042ee:	e02b      	b.n	8004348 <UART_SetConfig+0x284>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a2c      	ldr	r2, [pc, #176]	; (80043a8 <UART_SetConfig+0x2e4>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d124      	bne.n	8004344 <UART_SetConfig+0x280>
 80042fa:	4b2d      	ldr	r3, [pc, #180]	; (80043b0 <UART_SetConfig+0x2ec>)
 80042fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004300:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004304:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004308:	d012      	beq.n	8004330 <UART_SetConfig+0x26c>
 800430a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800430e:	d802      	bhi.n	8004316 <UART_SetConfig+0x252>
 8004310:	2b00      	cmp	r3, #0
 8004312:	d007      	beq.n	8004324 <UART_SetConfig+0x260>
 8004314:	e012      	b.n	800433c <UART_SetConfig+0x278>
 8004316:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800431a:	d006      	beq.n	800432a <UART_SetConfig+0x266>
 800431c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004320:	d009      	beq.n	8004336 <UART_SetConfig+0x272>
 8004322:	e00b      	b.n	800433c <UART_SetConfig+0x278>
 8004324:	2300      	movs	r3, #0
 8004326:	76fb      	strb	r3, [r7, #27]
 8004328:	e00e      	b.n	8004348 <UART_SetConfig+0x284>
 800432a:	2302      	movs	r3, #2
 800432c:	76fb      	strb	r3, [r7, #27]
 800432e:	e00b      	b.n	8004348 <UART_SetConfig+0x284>
 8004330:	2304      	movs	r3, #4
 8004332:	76fb      	strb	r3, [r7, #27]
 8004334:	e008      	b.n	8004348 <UART_SetConfig+0x284>
 8004336:	2308      	movs	r3, #8
 8004338:	76fb      	strb	r3, [r7, #27]
 800433a:	e005      	b.n	8004348 <UART_SetConfig+0x284>
 800433c:	2310      	movs	r3, #16
 800433e:	76fb      	strb	r3, [r7, #27]
 8004340:	bf00      	nop
 8004342:	e001      	b.n	8004348 <UART_SetConfig+0x284>
 8004344:	2310      	movs	r3, #16
 8004346:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a16      	ldr	r2, [pc, #88]	; (80043a8 <UART_SetConfig+0x2e4>)
 800434e:	4293      	cmp	r3, r2
 8004350:	f040 8087 	bne.w	8004462 <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004354:	7efb      	ldrb	r3, [r7, #27]
 8004356:	2b08      	cmp	r3, #8
 8004358:	d836      	bhi.n	80043c8 <UART_SetConfig+0x304>
 800435a:	a201      	add	r2, pc, #4	; (adr r2, 8004360 <UART_SetConfig+0x29c>)
 800435c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004360:	08004385 	.word	0x08004385
 8004364:	080043c9 	.word	0x080043c9
 8004368:	0800438d 	.word	0x0800438d
 800436c:	080043c9 	.word	0x080043c9
 8004370:	08004393 	.word	0x08004393
 8004374:	080043c9 	.word	0x080043c9
 8004378:	080043c9 	.word	0x080043c9
 800437c:	080043c9 	.word	0x080043c9
 8004380:	0800439b 	.word	0x0800439b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004384:	f7ff f880 	bl	8003488 <HAL_RCC_GetPCLK1Freq>
 8004388:	6178      	str	r0, [r7, #20]
        break;
 800438a:	e022      	b.n	80043d2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800438c:	4b0d      	ldr	r3, [pc, #52]	; (80043c4 <UART_SetConfig+0x300>)
 800438e:	617b      	str	r3, [r7, #20]
        break;
 8004390:	e01f      	b.n	80043d2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004392:	f7fe ffe3 	bl	800335c <HAL_RCC_GetSysClockFreq>
 8004396:	6178      	str	r0, [r7, #20]
        break;
 8004398:	e01b      	b.n	80043d2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800439a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800439e:	617b      	str	r3, [r7, #20]
        break;
 80043a0:	e017      	b.n	80043d2 <UART_SetConfig+0x30e>
 80043a2:	bf00      	nop
 80043a4:	efff69f3 	.word	0xefff69f3
 80043a8:	40008000 	.word	0x40008000
 80043ac:	40013800 	.word	0x40013800
 80043b0:	40021000 	.word	0x40021000
 80043b4:	40004400 	.word	0x40004400
 80043b8:	40004800 	.word	0x40004800
 80043bc:	40004c00 	.word	0x40004c00
 80043c0:	40005000 	.word	0x40005000
 80043c4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80043c8:	2300      	movs	r3, #0
 80043ca:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	76bb      	strb	r3, [r7, #26]
        break;
 80043d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	f000 80f1 	beq.w	80045bc <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	685a      	ldr	r2, [r3, #4]
 80043de:	4613      	mov	r3, r2
 80043e0:	005b      	lsls	r3, r3, #1
 80043e2:	4413      	add	r3, r2
 80043e4:	697a      	ldr	r2, [r7, #20]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d305      	bcc.n	80043f6 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80043f0:	697a      	ldr	r2, [r7, #20]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d902      	bls.n	80043fc <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	76bb      	strb	r3, [r7, #26]
 80043fa:	e0df      	b.n	80045bc <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	4619      	mov	r1, r3
 8004400:	f04f 0200 	mov.w	r2, #0
 8004404:	f04f 0300 	mov.w	r3, #0
 8004408:	f04f 0400 	mov.w	r4, #0
 800440c:	0214      	lsls	r4, r2, #8
 800440e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004412:	020b      	lsls	r3, r1, #8
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	6852      	ldr	r2, [r2, #4]
 8004418:	0852      	lsrs	r2, r2, #1
 800441a:	4611      	mov	r1, r2
 800441c:	f04f 0200 	mov.w	r2, #0
 8004420:	eb13 0b01 	adds.w	fp, r3, r1
 8004424:	eb44 0c02 	adc.w	ip, r4, r2
 8004428:	4658      	mov	r0, fp
 800442a:	4661      	mov	r1, ip
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	f04f 0400 	mov.w	r4, #0
 8004434:	461a      	mov	r2, r3
 8004436:	4623      	mov	r3, r4
 8004438:	f7fb ff1a 	bl	8000270 <__aeabi_uldivmod>
 800443c:	4603      	mov	r3, r0
 800443e:	460c      	mov	r4, r1
 8004440:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004448:	d308      	bcc.n	800445c <UART_SetConfig+0x398>
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004450:	d204      	bcs.n	800445c <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	60da      	str	r2, [r3, #12]
 800445a:	e0af      	b.n	80045bc <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	76bb      	strb	r3, [r7, #26]
 8004460:	e0ac      	b.n	80045bc <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	69db      	ldr	r3, [r3, #28]
 8004466:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800446a:	d15b      	bne.n	8004524 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800446c:	7efb      	ldrb	r3, [r7, #27]
 800446e:	2b08      	cmp	r3, #8
 8004470:	d827      	bhi.n	80044c2 <UART_SetConfig+0x3fe>
 8004472:	a201      	add	r2, pc, #4	; (adr r2, 8004478 <UART_SetConfig+0x3b4>)
 8004474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004478:	0800449d 	.word	0x0800449d
 800447c:	080044a5 	.word	0x080044a5
 8004480:	080044ad 	.word	0x080044ad
 8004484:	080044c3 	.word	0x080044c3
 8004488:	080044b3 	.word	0x080044b3
 800448c:	080044c3 	.word	0x080044c3
 8004490:	080044c3 	.word	0x080044c3
 8004494:	080044c3 	.word	0x080044c3
 8004498:	080044bb 	.word	0x080044bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800449c:	f7fe fff4 	bl	8003488 <HAL_RCC_GetPCLK1Freq>
 80044a0:	6178      	str	r0, [r7, #20]
        break;
 80044a2:	e013      	b.n	80044cc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044a4:	f7ff f806 	bl	80034b4 <HAL_RCC_GetPCLK2Freq>
 80044a8:	6178      	str	r0, [r7, #20]
        break;
 80044aa:	e00f      	b.n	80044cc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044ac:	4b49      	ldr	r3, [pc, #292]	; (80045d4 <UART_SetConfig+0x510>)
 80044ae:	617b      	str	r3, [r7, #20]
        break;
 80044b0:	e00c      	b.n	80044cc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044b2:	f7fe ff53 	bl	800335c <HAL_RCC_GetSysClockFreq>
 80044b6:	6178      	str	r0, [r7, #20]
        break;
 80044b8:	e008      	b.n	80044cc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044be:	617b      	str	r3, [r7, #20]
        break;
 80044c0:	e004      	b.n	80044cc <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80044c2:	2300      	movs	r3, #0
 80044c4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	76bb      	strb	r3, [r7, #26]
        break;
 80044ca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d074      	beq.n	80045bc <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	005a      	lsls	r2, r3, #1
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	085b      	lsrs	r3, r3, #1
 80044dc:	441a      	add	r2, r3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	2b0f      	cmp	r3, #15
 80044ee:	d916      	bls.n	800451e <UART_SetConfig+0x45a>
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044f6:	d212      	bcs.n	800451e <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	f023 030f 	bic.w	r3, r3, #15
 8004500:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	085b      	lsrs	r3, r3, #1
 8004506:	b29b      	uxth	r3, r3
 8004508:	f003 0307 	and.w	r3, r3, #7
 800450c:	b29a      	uxth	r2, r3
 800450e:	89fb      	ldrh	r3, [r7, #14]
 8004510:	4313      	orrs	r3, r2
 8004512:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	89fa      	ldrh	r2, [r7, #14]
 800451a:	60da      	str	r2, [r3, #12]
 800451c:	e04e      	b.n	80045bc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	76bb      	strb	r3, [r7, #26]
 8004522:	e04b      	b.n	80045bc <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004524:	7efb      	ldrb	r3, [r7, #27]
 8004526:	2b08      	cmp	r3, #8
 8004528:	d827      	bhi.n	800457a <UART_SetConfig+0x4b6>
 800452a:	a201      	add	r2, pc, #4	; (adr r2, 8004530 <UART_SetConfig+0x46c>)
 800452c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004530:	08004555 	.word	0x08004555
 8004534:	0800455d 	.word	0x0800455d
 8004538:	08004565 	.word	0x08004565
 800453c:	0800457b 	.word	0x0800457b
 8004540:	0800456b 	.word	0x0800456b
 8004544:	0800457b 	.word	0x0800457b
 8004548:	0800457b 	.word	0x0800457b
 800454c:	0800457b 	.word	0x0800457b
 8004550:	08004573 	.word	0x08004573
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004554:	f7fe ff98 	bl	8003488 <HAL_RCC_GetPCLK1Freq>
 8004558:	6178      	str	r0, [r7, #20]
        break;
 800455a:	e013      	b.n	8004584 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800455c:	f7fe ffaa 	bl	80034b4 <HAL_RCC_GetPCLK2Freq>
 8004560:	6178      	str	r0, [r7, #20]
        break;
 8004562:	e00f      	b.n	8004584 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004564:	4b1b      	ldr	r3, [pc, #108]	; (80045d4 <UART_SetConfig+0x510>)
 8004566:	617b      	str	r3, [r7, #20]
        break;
 8004568:	e00c      	b.n	8004584 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800456a:	f7fe fef7 	bl	800335c <HAL_RCC_GetSysClockFreq>
 800456e:	6178      	str	r0, [r7, #20]
        break;
 8004570:	e008      	b.n	8004584 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004572:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004576:	617b      	str	r3, [r7, #20]
        break;
 8004578:	e004      	b.n	8004584 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800457a:	2300      	movs	r3, #0
 800457c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	76bb      	strb	r3, [r7, #26]
        break;
 8004582:	bf00      	nop
    }

    if (pclk != 0U)
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d018      	beq.n	80045bc <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	085a      	lsrs	r2, r3, #1
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	441a      	add	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	fbb2 f3f3 	udiv	r3, r2, r3
 800459c:	b29b      	uxth	r3, r3
 800459e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	2b0f      	cmp	r3, #15
 80045a4:	d908      	bls.n	80045b8 <UART_SetConfig+0x4f4>
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045ac:	d204      	bcs.n	80045b8 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	693a      	ldr	r2, [r7, #16]
 80045b4:	60da      	str	r2, [r3, #12]
 80045b6:	e001      	b.n	80045bc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80045c8:	7ebb      	ldrb	r3, [r7, #26]
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3720      	adds	r7, #32
 80045ce:	46bd      	mov	sp, r7
 80045d0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80045d4:	00f42400 	.word	0x00f42400

080045d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e4:	f003 0301 	and.w	r3, r3, #1
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00a      	beq.n	8004602 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	430a      	orrs	r2, r1
 8004600:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004606:	f003 0302 	and.w	r3, r3, #2
 800460a:	2b00      	cmp	r3, #0
 800460c:	d00a      	beq.n	8004624 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	430a      	orrs	r2, r1
 8004622:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004628:	f003 0304 	and.w	r3, r3, #4
 800462c:	2b00      	cmp	r3, #0
 800462e:	d00a      	beq.n	8004646 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	430a      	orrs	r2, r1
 8004644:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464a:	f003 0308 	and.w	r3, r3, #8
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00a      	beq.n	8004668 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	430a      	orrs	r2, r1
 8004666:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466c:	f003 0310 	and.w	r3, r3, #16
 8004670:	2b00      	cmp	r3, #0
 8004672:	d00a      	beq.n	800468a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	430a      	orrs	r2, r1
 8004688:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468e:	f003 0320 	and.w	r3, r3, #32
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00a      	beq.n	80046ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	430a      	orrs	r2, r1
 80046aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d01a      	beq.n	80046ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	430a      	orrs	r2, r1
 80046cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046d6:	d10a      	bne.n	80046ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	430a      	orrs	r2, r1
 80046ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d00a      	beq.n	8004710 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	430a      	orrs	r2, r1
 800470e:	605a      	str	r2, [r3, #4]
  }
}
 8004710:	bf00      	nop
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b086      	sub	sp, #24
 8004720:	af02      	add	r7, sp, #8
 8004722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800472a:	f7fd f8a5 	bl	8001878 <HAL_GetTick>
 800472e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0308 	and.w	r3, r3, #8
 800473a:	2b08      	cmp	r3, #8
 800473c:	d10e      	bne.n	800475c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800473e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004742:	9300      	str	r3, [sp, #0]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2200      	movs	r2, #0
 8004748:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f000 f82a 	bl	80047a6 <UART_WaitOnFlagUntilTimeout>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d001      	beq.n	800475c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004758:	2303      	movs	r3, #3
 800475a:	e020      	b.n	800479e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0304 	and.w	r3, r3, #4
 8004766:	2b04      	cmp	r3, #4
 8004768:	d10e      	bne.n	8004788 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800476a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800476e:	9300      	str	r3, [sp, #0]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2200      	movs	r2, #0
 8004774:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f000 f814 	bl	80047a6 <UART_WaitOnFlagUntilTimeout>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d001      	beq.n	8004788 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e00a      	b.n	800479e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2220      	movs	r2, #32
 800478c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2220      	movs	r2, #32
 8004792:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3710      	adds	r7, #16
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}

080047a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047a6:	b580      	push	{r7, lr}
 80047a8:	b084      	sub	sp, #16
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	60f8      	str	r0, [r7, #12]
 80047ae:	60b9      	str	r1, [r7, #8]
 80047b0:	603b      	str	r3, [r7, #0]
 80047b2:	4613      	mov	r3, r2
 80047b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047b6:	e05d      	b.n	8004874 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047be:	d059      	beq.n	8004874 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047c0:	f7fd f85a 	bl	8001878 <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	69ba      	ldr	r2, [r7, #24]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d302      	bcc.n	80047d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d11b      	bne.n	800480e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80047e4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	689a      	ldr	r2, [r3, #8]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f022 0201 	bic.w	r2, r2, #1
 80047f4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2220      	movs	r2, #32
 80047fa:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2220      	movs	r2, #32
 8004800:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e042      	b.n	8004894 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0304 	and.w	r3, r3, #4
 8004818:	2b00      	cmp	r3, #0
 800481a:	d02b      	beq.n	8004874 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	69db      	ldr	r3, [r3, #28]
 8004822:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004826:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800482a:	d123      	bne.n	8004874 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004834:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004844:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	689a      	ldr	r2, [r3, #8]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f022 0201 	bic.w	r2, r2, #1
 8004854:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2220      	movs	r2, #32
 800485a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2220      	movs	r2, #32
 8004860:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2220      	movs	r2, #32
 8004866:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2200      	movs	r2, #0
 800486c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8004870:	2303      	movs	r3, #3
 8004872:	e00f      	b.n	8004894 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	69da      	ldr	r2, [r3, #28]
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	4013      	ands	r3, r2
 800487e:	68ba      	ldr	r2, [r7, #8]
 8004880:	429a      	cmp	r2, r3
 8004882:	bf0c      	ite	eq
 8004884:	2301      	moveq	r3, #1
 8004886:	2300      	movne	r3, #0
 8004888:	b2db      	uxtb	r3, r3
 800488a:	461a      	mov	r2, r3
 800488c:	79fb      	ldrb	r3, [r7, #7]
 800488e:	429a      	cmp	r2, r3
 8004890:	d092      	beq.n	80047b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004892:	2300      	movs	r3, #0
}
 8004894:	4618      	mov	r0, r3
 8004896:	3710      	adds	r7, #16
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <__errno>:
 800489c:	4b01      	ldr	r3, [pc, #4]	; (80048a4 <__errno+0x8>)
 800489e:	6818      	ldr	r0, [r3, #0]
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	2000000c 	.word	0x2000000c

080048a8 <__libc_init_array>:
 80048a8:	b570      	push	{r4, r5, r6, lr}
 80048aa:	4e0d      	ldr	r6, [pc, #52]	; (80048e0 <__libc_init_array+0x38>)
 80048ac:	4c0d      	ldr	r4, [pc, #52]	; (80048e4 <__libc_init_array+0x3c>)
 80048ae:	1ba4      	subs	r4, r4, r6
 80048b0:	10a4      	asrs	r4, r4, #2
 80048b2:	2500      	movs	r5, #0
 80048b4:	42a5      	cmp	r5, r4
 80048b6:	d109      	bne.n	80048cc <__libc_init_array+0x24>
 80048b8:	4e0b      	ldr	r6, [pc, #44]	; (80048e8 <__libc_init_array+0x40>)
 80048ba:	4c0c      	ldr	r4, [pc, #48]	; (80048ec <__libc_init_array+0x44>)
 80048bc:	f000 ff68 	bl	8005790 <_init>
 80048c0:	1ba4      	subs	r4, r4, r6
 80048c2:	10a4      	asrs	r4, r4, #2
 80048c4:	2500      	movs	r5, #0
 80048c6:	42a5      	cmp	r5, r4
 80048c8:	d105      	bne.n	80048d6 <__libc_init_array+0x2e>
 80048ca:	bd70      	pop	{r4, r5, r6, pc}
 80048cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80048d0:	4798      	blx	r3
 80048d2:	3501      	adds	r5, #1
 80048d4:	e7ee      	b.n	80048b4 <__libc_init_array+0xc>
 80048d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80048da:	4798      	blx	r3
 80048dc:	3501      	adds	r5, #1
 80048de:	e7f2      	b.n	80048c6 <__libc_init_array+0x1e>
 80048e0:	08005900 	.word	0x08005900
 80048e4:	08005900 	.word	0x08005900
 80048e8:	08005900 	.word	0x08005900
 80048ec:	08005904 	.word	0x08005904

080048f0 <memset>:
 80048f0:	4402      	add	r2, r0
 80048f2:	4603      	mov	r3, r0
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d100      	bne.n	80048fa <memset+0xa>
 80048f8:	4770      	bx	lr
 80048fa:	f803 1b01 	strb.w	r1, [r3], #1
 80048fe:	e7f9      	b.n	80048f4 <memset+0x4>

08004900 <iprintf>:
 8004900:	b40f      	push	{r0, r1, r2, r3}
 8004902:	4b0a      	ldr	r3, [pc, #40]	; (800492c <iprintf+0x2c>)
 8004904:	b513      	push	{r0, r1, r4, lr}
 8004906:	681c      	ldr	r4, [r3, #0]
 8004908:	b124      	cbz	r4, 8004914 <iprintf+0x14>
 800490a:	69a3      	ldr	r3, [r4, #24]
 800490c:	b913      	cbnz	r3, 8004914 <iprintf+0x14>
 800490e:	4620      	mov	r0, r4
 8004910:	f000 fa22 	bl	8004d58 <__sinit>
 8004914:	ab05      	add	r3, sp, #20
 8004916:	9a04      	ldr	r2, [sp, #16]
 8004918:	68a1      	ldr	r1, [r4, #8]
 800491a:	9301      	str	r3, [sp, #4]
 800491c:	4620      	mov	r0, r4
 800491e:	f000 fbdb 	bl	80050d8 <_vfiprintf_r>
 8004922:	b002      	add	sp, #8
 8004924:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004928:	b004      	add	sp, #16
 800492a:	4770      	bx	lr
 800492c:	2000000c 	.word	0x2000000c

08004930 <_puts_r>:
 8004930:	b570      	push	{r4, r5, r6, lr}
 8004932:	460e      	mov	r6, r1
 8004934:	4605      	mov	r5, r0
 8004936:	b118      	cbz	r0, 8004940 <_puts_r+0x10>
 8004938:	6983      	ldr	r3, [r0, #24]
 800493a:	b90b      	cbnz	r3, 8004940 <_puts_r+0x10>
 800493c:	f000 fa0c 	bl	8004d58 <__sinit>
 8004940:	69ab      	ldr	r3, [r5, #24]
 8004942:	68ac      	ldr	r4, [r5, #8]
 8004944:	b913      	cbnz	r3, 800494c <_puts_r+0x1c>
 8004946:	4628      	mov	r0, r5
 8004948:	f000 fa06 	bl	8004d58 <__sinit>
 800494c:	4b23      	ldr	r3, [pc, #140]	; (80049dc <_puts_r+0xac>)
 800494e:	429c      	cmp	r4, r3
 8004950:	d117      	bne.n	8004982 <_puts_r+0x52>
 8004952:	686c      	ldr	r4, [r5, #4]
 8004954:	89a3      	ldrh	r3, [r4, #12]
 8004956:	071b      	lsls	r3, r3, #28
 8004958:	d51d      	bpl.n	8004996 <_puts_r+0x66>
 800495a:	6923      	ldr	r3, [r4, #16]
 800495c:	b1db      	cbz	r3, 8004996 <_puts_r+0x66>
 800495e:	3e01      	subs	r6, #1
 8004960:	68a3      	ldr	r3, [r4, #8]
 8004962:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004966:	3b01      	subs	r3, #1
 8004968:	60a3      	str	r3, [r4, #8]
 800496a:	b9e9      	cbnz	r1, 80049a8 <_puts_r+0x78>
 800496c:	2b00      	cmp	r3, #0
 800496e:	da2e      	bge.n	80049ce <_puts_r+0x9e>
 8004970:	4622      	mov	r2, r4
 8004972:	210a      	movs	r1, #10
 8004974:	4628      	mov	r0, r5
 8004976:	f000 f83f 	bl	80049f8 <__swbuf_r>
 800497a:	3001      	adds	r0, #1
 800497c:	d011      	beq.n	80049a2 <_puts_r+0x72>
 800497e:	200a      	movs	r0, #10
 8004980:	e011      	b.n	80049a6 <_puts_r+0x76>
 8004982:	4b17      	ldr	r3, [pc, #92]	; (80049e0 <_puts_r+0xb0>)
 8004984:	429c      	cmp	r4, r3
 8004986:	d101      	bne.n	800498c <_puts_r+0x5c>
 8004988:	68ac      	ldr	r4, [r5, #8]
 800498a:	e7e3      	b.n	8004954 <_puts_r+0x24>
 800498c:	4b15      	ldr	r3, [pc, #84]	; (80049e4 <_puts_r+0xb4>)
 800498e:	429c      	cmp	r4, r3
 8004990:	bf08      	it	eq
 8004992:	68ec      	ldreq	r4, [r5, #12]
 8004994:	e7de      	b.n	8004954 <_puts_r+0x24>
 8004996:	4621      	mov	r1, r4
 8004998:	4628      	mov	r0, r5
 800499a:	f000 f87f 	bl	8004a9c <__swsetup_r>
 800499e:	2800      	cmp	r0, #0
 80049a0:	d0dd      	beq.n	800495e <_puts_r+0x2e>
 80049a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80049a6:	bd70      	pop	{r4, r5, r6, pc}
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	da04      	bge.n	80049b6 <_puts_r+0x86>
 80049ac:	69a2      	ldr	r2, [r4, #24]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	dc06      	bgt.n	80049c0 <_puts_r+0x90>
 80049b2:	290a      	cmp	r1, #10
 80049b4:	d004      	beq.n	80049c0 <_puts_r+0x90>
 80049b6:	6823      	ldr	r3, [r4, #0]
 80049b8:	1c5a      	adds	r2, r3, #1
 80049ba:	6022      	str	r2, [r4, #0]
 80049bc:	7019      	strb	r1, [r3, #0]
 80049be:	e7cf      	b.n	8004960 <_puts_r+0x30>
 80049c0:	4622      	mov	r2, r4
 80049c2:	4628      	mov	r0, r5
 80049c4:	f000 f818 	bl	80049f8 <__swbuf_r>
 80049c8:	3001      	adds	r0, #1
 80049ca:	d1c9      	bne.n	8004960 <_puts_r+0x30>
 80049cc:	e7e9      	b.n	80049a2 <_puts_r+0x72>
 80049ce:	6823      	ldr	r3, [r4, #0]
 80049d0:	200a      	movs	r0, #10
 80049d2:	1c5a      	adds	r2, r3, #1
 80049d4:	6022      	str	r2, [r4, #0]
 80049d6:	7018      	strb	r0, [r3, #0]
 80049d8:	e7e5      	b.n	80049a6 <_puts_r+0x76>
 80049da:	bf00      	nop
 80049dc:	08005884 	.word	0x08005884
 80049e0:	080058a4 	.word	0x080058a4
 80049e4:	08005864 	.word	0x08005864

080049e8 <puts>:
 80049e8:	4b02      	ldr	r3, [pc, #8]	; (80049f4 <puts+0xc>)
 80049ea:	4601      	mov	r1, r0
 80049ec:	6818      	ldr	r0, [r3, #0]
 80049ee:	f7ff bf9f 	b.w	8004930 <_puts_r>
 80049f2:	bf00      	nop
 80049f4:	2000000c 	.word	0x2000000c

080049f8 <__swbuf_r>:
 80049f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049fa:	460e      	mov	r6, r1
 80049fc:	4614      	mov	r4, r2
 80049fe:	4605      	mov	r5, r0
 8004a00:	b118      	cbz	r0, 8004a0a <__swbuf_r+0x12>
 8004a02:	6983      	ldr	r3, [r0, #24]
 8004a04:	b90b      	cbnz	r3, 8004a0a <__swbuf_r+0x12>
 8004a06:	f000 f9a7 	bl	8004d58 <__sinit>
 8004a0a:	4b21      	ldr	r3, [pc, #132]	; (8004a90 <__swbuf_r+0x98>)
 8004a0c:	429c      	cmp	r4, r3
 8004a0e:	d12a      	bne.n	8004a66 <__swbuf_r+0x6e>
 8004a10:	686c      	ldr	r4, [r5, #4]
 8004a12:	69a3      	ldr	r3, [r4, #24]
 8004a14:	60a3      	str	r3, [r4, #8]
 8004a16:	89a3      	ldrh	r3, [r4, #12]
 8004a18:	071a      	lsls	r2, r3, #28
 8004a1a:	d52e      	bpl.n	8004a7a <__swbuf_r+0x82>
 8004a1c:	6923      	ldr	r3, [r4, #16]
 8004a1e:	b363      	cbz	r3, 8004a7a <__swbuf_r+0x82>
 8004a20:	6923      	ldr	r3, [r4, #16]
 8004a22:	6820      	ldr	r0, [r4, #0]
 8004a24:	1ac0      	subs	r0, r0, r3
 8004a26:	6963      	ldr	r3, [r4, #20]
 8004a28:	b2f6      	uxtb	r6, r6
 8004a2a:	4283      	cmp	r3, r0
 8004a2c:	4637      	mov	r7, r6
 8004a2e:	dc04      	bgt.n	8004a3a <__swbuf_r+0x42>
 8004a30:	4621      	mov	r1, r4
 8004a32:	4628      	mov	r0, r5
 8004a34:	f000 f926 	bl	8004c84 <_fflush_r>
 8004a38:	bb28      	cbnz	r0, 8004a86 <__swbuf_r+0x8e>
 8004a3a:	68a3      	ldr	r3, [r4, #8]
 8004a3c:	3b01      	subs	r3, #1
 8004a3e:	60a3      	str	r3, [r4, #8]
 8004a40:	6823      	ldr	r3, [r4, #0]
 8004a42:	1c5a      	adds	r2, r3, #1
 8004a44:	6022      	str	r2, [r4, #0]
 8004a46:	701e      	strb	r6, [r3, #0]
 8004a48:	6963      	ldr	r3, [r4, #20]
 8004a4a:	3001      	adds	r0, #1
 8004a4c:	4283      	cmp	r3, r0
 8004a4e:	d004      	beq.n	8004a5a <__swbuf_r+0x62>
 8004a50:	89a3      	ldrh	r3, [r4, #12]
 8004a52:	07db      	lsls	r3, r3, #31
 8004a54:	d519      	bpl.n	8004a8a <__swbuf_r+0x92>
 8004a56:	2e0a      	cmp	r6, #10
 8004a58:	d117      	bne.n	8004a8a <__swbuf_r+0x92>
 8004a5a:	4621      	mov	r1, r4
 8004a5c:	4628      	mov	r0, r5
 8004a5e:	f000 f911 	bl	8004c84 <_fflush_r>
 8004a62:	b190      	cbz	r0, 8004a8a <__swbuf_r+0x92>
 8004a64:	e00f      	b.n	8004a86 <__swbuf_r+0x8e>
 8004a66:	4b0b      	ldr	r3, [pc, #44]	; (8004a94 <__swbuf_r+0x9c>)
 8004a68:	429c      	cmp	r4, r3
 8004a6a:	d101      	bne.n	8004a70 <__swbuf_r+0x78>
 8004a6c:	68ac      	ldr	r4, [r5, #8]
 8004a6e:	e7d0      	b.n	8004a12 <__swbuf_r+0x1a>
 8004a70:	4b09      	ldr	r3, [pc, #36]	; (8004a98 <__swbuf_r+0xa0>)
 8004a72:	429c      	cmp	r4, r3
 8004a74:	bf08      	it	eq
 8004a76:	68ec      	ldreq	r4, [r5, #12]
 8004a78:	e7cb      	b.n	8004a12 <__swbuf_r+0x1a>
 8004a7a:	4621      	mov	r1, r4
 8004a7c:	4628      	mov	r0, r5
 8004a7e:	f000 f80d 	bl	8004a9c <__swsetup_r>
 8004a82:	2800      	cmp	r0, #0
 8004a84:	d0cc      	beq.n	8004a20 <__swbuf_r+0x28>
 8004a86:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004a8a:	4638      	mov	r0, r7
 8004a8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	08005884 	.word	0x08005884
 8004a94:	080058a4 	.word	0x080058a4
 8004a98:	08005864 	.word	0x08005864

08004a9c <__swsetup_r>:
 8004a9c:	4b32      	ldr	r3, [pc, #200]	; (8004b68 <__swsetup_r+0xcc>)
 8004a9e:	b570      	push	{r4, r5, r6, lr}
 8004aa0:	681d      	ldr	r5, [r3, #0]
 8004aa2:	4606      	mov	r6, r0
 8004aa4:	460c      	mov	r4, r1
 8004aa6:	b125      	cbz	r5, 8004ab2 <__swsetup_r+0x16>
 8004aa8:	69ab      	ldr	r3, [r5, #24]
 8004aaa:	b913      	cbnz	r3, 8004ab2 <__swsetup_r+0x16>
 8004aac:	4628      	mov	r0, r5
 8004aae:	f000 f953 	bl	8004d58 <__sinit>
 8004ab2:	4b2e      	ldr	r3, [pc, #184]	; (8004b6c <__swsetup_r+0xd0>)
 8004ab4:	429c      	cmp	r4, r3
 8004ab6:	d10f      	bne.n	8004ad8 <__swsetup_r+0x3c>
 8004ab8:	686c      	ldr	r4, [r5, #4]
 8004aba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004abe:	b29a      	uxth	r2, r3
 8004ac0:	0715      	lsls	r5, r2, #28
 8004ac2:	d42c      	bmi.n	8004b1e <__swsetup_r+0x82>
 8004ac4:	06d0      	lsls	r0, r2, #27
 8004ac6:	d411      	bmi.n	8004aec <__swsetup_r+0x50>
 8004ac8:	2209      	movs	r2, #9
 8004aca:	6032      	str	r2, [r6, #0]
 8004acc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ad0:	81a3      	strh	r3, [r4, #12]
 8004ad2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ad6:	e03e      	b.n	8004b56 <__swsetup_r+0xba>
 8004ad8:	4b25      	ldr	r3, [pc, #148]	; (8004b70 <__swsetup_r+0xd4>)
 8004ada:	429c      	cmp	r4, r3
 8004adc:	d101      	bne.n	8004ae2 <__swsetup_r+0x46>
 8004ade:	68ac      	ldr	r4, [r5, #8]
 8004ae0:	e7eb      	b.n	8004aba <__swsetup_r+0x1e>
 8004ae2:	4b24      	ldr	r3, [pc, #144]	; (8004b74 <__swsetup_r+0xd8>)
 8004ae4:	429c      	cmp	r4, r3
 8004ae6:	bf08      	it	eq
 8004ae8:	68ec      	ldreq	r4, [r5, #12]
 8004aea:	e7e6      	b.n	8004aba <__swsetup_r+0x1e>
 8004aec:	0751      	lsls	r1, r2, #29
 8004aee:	d512      	bpl.n	8004b16 <__swsetup_r+0x7a>
 8004af0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004af2:	b141      	cbz	r1, 8004b06 <__swsetup_r+0x6a>
 8004af4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004af8:	4299      	cmp	r1, r3
 8004afa:	d002      	beq.n	8004b02 <__swsetup_r+0x66>
 8004afc:	4630      	mov	r0, r6
 8004afe:	f000 fa19 	bl	8004f34 <_free_r>
 8004b02:	2300      	movs	r3, #0
 8004b04:	6363      	str	r3, [r4, #52]	; 0x34
 8004b06:	89a3      	ldrh	r3, [r4, #12]
 8004b08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004b0c:	81a3      	strh	r3, [r4, #12]
 8004b0e:	2300      	movs	r3, #0
 8004b10:	6063      	str	r3, [r4, #4]
 8004b12:	6923      	ldr	r3, [r4, #16]
 8004b14:	6023      	str	r3, [r4, #0]
 8004b16:	89a3      	ldrh	r3, [r4, #12]
 8004b18:	f043 0308 	orr.w	r3, r3, #8
 8004b1c:	81a3      	strh	r3, [r4, #12]
 8004b1e:	6923      	ldr	r3, [r4, #16]
 8004b20:	b94b      	cbnz	r3, 8004b36 <__swsetup_r+0x9a>
 8004b22:	89a3      	ldrh	r3, [r4, #12]
 8004b24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004b28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b2c:	d003      	beq.n	8004b36 <__swsetup_r+0x9a>
 8004b2e:	4621      	mov	r1, r4
 8004b30:	4630      	mov	r0, r6
 8004b32:	f000 f9bf 	bl	8004eb4 <__smakebuf_r>
 8004b36:	89a2      	ldrh	r2, [r4, #12]
 8004b38:	f012 0301 	ands.w	r3, r2, #1
 8004b3c:	d00c      	beq.n	8004b58 <__swsetup_r+0xbc>
 8004b3e:	2300      	movs	r3, #0
 8004b40:	60a3      	str	r3, [r4, #8]
 8004b42:	6963      	ldr	r3, [r4, #20]
 8004b44:	425b      	negs	r3, r3
 8004b46:	61a3      	str	r3, [r4, #24]
 8004b48:	6923      	ldr	r3, [r4, #16]
 8004b4a:	b953      	cbnz	r3, 8004b62 <__swsetup_r+0xc6>
 8004b4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b50:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004b54:	d1ba      	bne.n	8004acc <__swsetup_r+0x30>
 8004b56:	bd70      	pop	{r4, r5, r6, pc}
 8004b58:	0792      	lsls	r2, r2, #30
 8004b5a:	bf58      	it	pl
 8004b5c:	6963      	ldrpl	r3, [r4, #20]
 8004b5e:	60a3      	str	r3, [r4, #8]
 8004b60:	e7f2      	b.n	8004b48 <__swsetup_r+0xac>
 8004b62:	2000      	movs	r0, #0
 8004b64:	e7f7      	b.n	8004b56 <__swsetup_r+0xba>
 8004b66:	bf00      	nop
 8004b68:	2000000c 	.word	0x2000000c
 8004b6c:	08005884 	.word	0x08005884
 8004b70:	080058a4 	.word	0x080058a4
 8004b74:	08005864 	.word	0x08005864

08004b78 <__sflush_r>:
 8004b78:	898a      	ldrh	r2, [r1, #12]
 8004b7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b7e:	4605      	mov	r5, r0
 8004b80:	0710      	lsls	r0, r2, #28
 8004b82:	460c      	mov	r4, r1
 8004b84:	d458      	bmi.n	8004c38 <__sflush_r+0xc0>
 8004b86:	684b      	ldr	r3, [r1, #4]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	dc05      	bgt.n	8004b98 <__sflush_r+0x20>
 8004b8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	dc02      	bgt.n	8004b98 <__sflush_r+0x20>
 8004b92:	2000      	movs	r0, #0
 8004b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b9a:	2e00      	cmp	r6, #0
 8004b9c:	d0f9      	beq.n	8004b92 <__sflush_r+0x1a>
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004ba4:	682f      	ldr	r7, [r5, #0]
 8004ba6:	6a21      	ldr	r1, [r4, #32]
 8004ba8:	602b      	str	r3, [r5, #0]
 8004baa:	d032      	beq.n	8004c12 <__sflush_r+0x9a>
 8004bac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004bae:	89a3      	ldrh	r3, [r4, #12]
 8004bb0:	075a      	lsls	r2, r3, #29
 8004bb2:	d505      	bpl.n	8004bc0 <__sflush_r+0x48>
 8004bb4:	6863      	ldr	r3, [r4, #4]
 8004bb6:	1ac0      	subs	r0, r0, r3
 8004bb8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004bba:	b10b      	cbz	r3, 8004bc0 <__sflush_r+0x48>
 8004bbc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004bbe:	1ac0      	subs	r0, r0, r3
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004bc6:	6a21      	ldr	r1, [r4, #32]
 8004bc8:	4628      	mov	r0, r5
 8004bca:	47b0      	blx	r6
 8004bcc:	1c43      	adds	r3, r0, #1
 8004bce:	89a3      	ldrh	r3, [r4, #12]
 8004bd0:	d106      	bne.n	8004be0 <__sflush_r+0x68>
 8004bd2:	6829      	ldr	r1, [r5, #0]
 8004bd4:	291d      	cmp	r1, #29
 8004bd6:	d848      	bhi.n	8004c6a <__sflush_r+0xf2>
 8004bd8:	4a29      	ldr	r2, [pc, #164]	; (8004c80 <__sflush_r+0x108>)
 8004bda:	40ca      	lsrs	r2, r1
 8004bdc:	07d6      	lsls	r6, r2, #31
 8004bde:	d544      	bpl.n	8004c6a <__sflush_r+0xf2>
 8004be0:	2200      	movs	r2, #0
 8004be2:	6062      	str	r2, [r4, #4]
 8004be4:	04d9      	lsls	r1, r3, #19
 8004be6:	6922      	ldr	r2, [r4, #16]
 8004be8:	6022      	str	r2, [r4, #0]
 8004bea:	d504      	bpl.n	8004bf6 <__sflush_r+0x7e>
 8004bec:	1c42      	adds	r2, r0, #1
 8004bee:	d101      	bne.n	8004bf4 <__sflush_r+0x7c>
 8004bf0:	682b      	ldr	r3, [r5, #0]
 8004bf2:	b903      	cbnz	r3, 8004bf6 <__sflush_r+0x7e>
 8004bf4:	6560      	str	r0, [r4, #84]	; 0x54
 8004bf6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004bf8:	602f      	str	r7, [r5, #0]
 8004bfa:	2900      	cmp	r1, #0
 8004bfc:	d0c9      	beq.n	8004b92 <__sflush_r+0x1a>
 8004bfe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c02:	4299      	cmp	r1, r3
 8004c04:	d002      	beq.n	8004c0c <__sflush_r+0x94>
 8004c06:	4628      	mov	r0, r5
 8004c08:	f000 f994 	bl	8004f34 <_free_r>
 8004c0c:	2000      	movs	r0, #0
 8004c0e:	6360      	str	r0, [r4, #52]	; 0x34
 8004c10:	e7c0      	b.n	8004b94 <__sflush_r+0x1c>
 8004c12:	2301      	movs	r3, #1
 8004c14:	4628      	mov	r0, r5
 8004c16:	47b0      	blx	r6
 8004c18:	1c41      	adds	r1, r0, #1
 8004c1a:	d1c8      	bne.n	8004bae <__sflush_r+0x36>
 8004c1c:	682b      	ldr	r3, [r5, #0]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d0c5      	beq.n	8004bae <__sflush_r+0x36>
 8004c22:	2b1d      	cmp	r3, #29
 8004c24:	d001      	beq.n	8004c2a <__sflush_r+0xb2>
 8004c26:	2b16      	cmp	r3, #22
 8004c28:	d101      	bne.n	8004c2e <__sflush_r+0xb6>
 8004c2a:	602f      	str	r7, [r5, #0]
 8004c2c:	e7b1      	b.n	8004b92 <__sflush_r+0x1a>
 8004c2e:	89a3      	ldrh	r3, [r4, #12]
 8004c30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c34:	81a3      	strh	r3, [r4, #12]
 8004c36:	e7ad      	b.n	8004b94 <__sflush_r+0x1c>
 8004c38:	690f      	ldr	r7, [r1, #16]
 8004c3a:	2f00      	cmp	r7, #0
 8004c3c:	d0a9      	beq.n	8004b92 <__sflush_r+0x1a>
 8004c3e:	0793      	lsls	r3, r2, #30
 8004c40:	680e      	ldr	r6, [r1, #0]
 8004c42:	bf08      	it	eq
 8004c44:	694b      	ldreq	r3, [r1, #20]
 8004c46:	600f      	str	r7, [r1, #0]
 8004c48:	bf18      	it	ne
 8004c4a:	2300      	movne	r3, #0
 8004c4c:	eba6 0807 	sub.w	r8, r6, r7
 8004c50:	608b      	str	r3, [r1, #8]
 8004c52:	f1b8 0f00 	cmp.w	r8, #0
 8004c56:	dd9c      	ble.n	8004b92 <__sflush_r+0x1a>
 8004c58:	4643      	mov	r3, r8
 8004c5a:	463a      	mov	r2, r7
 8004c5c:	6a21      	ldr	r1, [r4, #32]
 8004c5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004c60:	4628      	mov	r0, r5
 8004c62:	47b0      	blx	r6
 8004c64:	2800      	cmp	r0, #0
 8004c66:	dc06      	bgt.n	8004c76 <__sflush_r+0xfe>
 8004c68:	89a3      	ldrh	r3, [r4, #12]
 8004c6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c6e:	81a3      	strh	r3, [r4, #12]
 8004c70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c74:	e78e      	b.n	8004b94 <__sflush_r+0x1c>
 8004c76:	4407      	add	r7, r0
 8004c78:	eba8 0800 	sub.w	r8, r8, r0
 8004c7c:	e7e9      	b.n	8004c52 <__sflush_r+0xda>
 8004c7e:	bf00      	nop
 8004c80:	20400001 	.word	0x20400001

08004c84 <_fflush_r>:
 8004c84:	b538      	push	{r3, r4, r5, lr}
 8004c86:	690b      	ldr	r3, [r1, #16]
 8004c88:	4605      	mov	r5, r0
 8004c8a:	460c      	mov	r4, r1
 8004c8c:	b1db      	cbz	r3, 8004cc6 <_fflush_r+0x42>
 8004c8e:	b118      	cbz	r0, 8004c98 <_fflush_r+0x14>
 8004c90:	6983      	ldr	r3, [r0, #24]
 8004c92:	b90b      	cbnz	r3, 8004c98 <_fflush_r+0x14>
 8004c94:	f000 f860 	bl	8004d58 <__sinit>
 8004c98:	4b0c      	ldr	r3, [pc, #48]	; (8004ccc <_fflush_r+0x48>)
 8004c9a:	429c      	cmp	r4, r3
 8004c9c:	d109      	bne.n	8004cb2 <_fflush_r+0x2e>
 8004c9e:	686c      	ldr	r4, [r5, #4]
 8004ca0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ca4:	b17b      	cbz	r3, 8004cc6 <_fflush_r+0x42>
 8004ca6:	4621      	mov	r1, r4
 8004ca8:	4628      	mov	r0, r5
 8004caa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004cae:	f7ff bf63 	b.w	8004b78 <__sflush_r>
 8004cb2:	4b07      	ldr	r3, [pc, #28]	; (8004cd0 <_fflush_r+0x4c>)
 8004cb4:	429c      	cmp	r4, r3
 8004cb6:	d101      	bne.n	8004cbc <_fflush_r+0x38>
 8004cb8:	68ac      	ldr	r4, [r5, #8]
 8004cba:	e7f1      	b.n	8004ca0 <_fflush_r+0x1c>
 8004cbc:	4b05      	ldr	r3, [pc, #20]	; (8004cd4 <_fflush_r+0x50>)
 8004cbe:	429c      	cmp	r4, r3
 8004cc0:	bf08      	it	eq
 8004cc2:	68ec      	ldreq	r4, [r5, #12]
 8004cc4:	e7ec      	b.n	8004ca0 <_fflush_r+0x1c>
 8004cc6:	2000      	movs	r0, #0
 8004cc8:	bd38      	pop	{r3, r4, r5, pc}
 8004cca:	bf00      	nop
 8004ccc:	08005884 	.word	0x08005884
 8004cd0:	080058a4 	.word	0x080058a4
 8004cd4:	08005864 	.word	0x08005864

08004cd8 <std>:
 8004cd8:	2300      	movs	r3, #0
 8004cda:	b510      	push	{r4, lr}
 8004cdc:	4604      	mov	r4, r0
 8004cde:	e9c0 3300 	strd	r3, r3, [r0]
 8004ce2:	6083      	str	r3, [r0, #8]
 8004ce4:	8181      	strh	r1, [r0, #12]
 8004ce6:	6643      	str	r3, [r0, #100]	; 0x64
 8004ce8:	81c2      	strh	r2, [r0, #14]
 8004cea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004cee:	6183      	str	r3, [r0, #24]
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	2208      	movs	r2, #8
 8004cf4:	305c      	adds	r0, #92	; 0x5c
 8004cf6:	f7ff fdfb 	bl	80048f0 <memset>
 8004cfa:	4b05      	ldr	r3, [pc, #20]	; (8004d10 <std+0x38>)
 8004cfc:	6263      	str	r3, [r4, #36]	; 0x24
 8004cfe:	4b05      	ldr	r3, [pc, #20]	; (8004d14 <std+0x3c>)
 8004d00:	62a3      	str	r3, [r4, #40]	; 0x28
 8004d02:	4b05      	ldr	r3, [pc, #20]	; (8004d18 <std+0x40>)
 8004d04:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004d06:	4b05      	ldr	r3, [pc, #20]	; (8004d1c <std+0x44>)
 8004d08:	6224      	str	r4, [r4, #32]
 8004d0a:	6323      	str	r3, [r4, #48]	; 0x30
 8004d0c:	bd10      	pop	{r4, pc}
 8004d0e:	bf00      	nop
 8004d10:	08005635 	.word	0x08005635
 8004d14:	08005657 	.word	0x08005657
 8004d18:	0800568f 	.word	0x0800568f
 8004d1c:	080056b3 	.word	0x080056b3

08004d20 <_cleanup_r>:
 8004d20:	4901      	ldr	r1, [pc, #4]	; (8004d28 <_cleanup_r+0x8>)
 8004d22:	f000 b885 	b.w	8004e30 <_fwalk_reent>
 8004d26:	bf00      	nop
 8004d28:	08004c85 	.word	0x08004c85

08004d2c <__sfmoreglue>:
 8004d2c:	b570      	push	{r4, r5, r6, lr}
 8004d2e:	1e4a      	subs	r2, r1, #1
 8004d30:	2568      	movs	r5, #104	; 0x68
 8004d32:	4355      	muls	r5, r2
 8004d34:	460e      	mov	r6, r1
 8004d36:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004d3a:	f000 f949 	bl	8004fd0 <_malloc_r>
 8004d3e:	4604      	mov	r4, r0
 8004d40:	b140      	cbz	r0, 8004d54 <__sfmoreglue+0x28>
 8004d42:	2100      	movs	r1, #0
 8004d44:	e9c0 1600 	strd	r1, r6, [r0]
 8004d48:	300c      	adds	r0, #12
 8004d4a:	60a0      	str	r0, [r4, #8]
 8004d4c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004d50:	f7ff fdce 	bl	80048f0 <memset>
 8004d54:	4620      	mov	r0, r4
 8004d56:	bd70      	pop	{r4, r5, r6, pc}

08004d58 <__sinit>:
 8004d58:	6983      	ldr	r3, [r0, #24]
 8004d5a:	b510      	push	{r4, lr}
 8004d5c:	4604      	mov	r4, r0
 8004d5e:	bb33      	cbnz	r3, 8004dae <__sinit+0x56>
 8004d60:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004d64:	6503      	str	r3, [r0, #80]	; 0x50
 8004d66:	4b12      	ldr	r3, [pc, #72]	; (8004db0 <__sinit+0x58>)
 8004d68:	4a12      	ldr	r2, [pc, #72]	; (8004db4 <__sinit+0x5c>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	6282      	str	r2, [r0, #40]	; 0x28
 8004d6e:	4298      	cmp	r0, r3
 8004d70:	bf04      	itt	eq
 8004d72:	2301      	moveq	r3, #1
 8004d74:	6183      	streq	r3, [r0, #24]
 8004d76:	f000 f81f 	bl	8004db8 <__sfp>
 8004d7a:	6060      	str	r0, [r4, #4]
 8004d7c:	4620      	mov	r0, r4
 8004d7e:	f000 f81b 	bl	8004db8 <__sfp>
 8004d82:	60a0      	str	r0, [r4, #8]
 8004d84:	4620      	mov	r0, r4
 8004d86:	f000 f817 	bl	8004db8 <__sfp>
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	60e0      	str	r0, [r4, #12]
 8004d8e:	2104      	movs	r1, #4
 8004d90:	6860      	ldr	r0, [r4, #4]
 8004d92:	f7ff ffa1 	bl	8004cd8 <std>
 8004d96:	2201      	movs	r2, #1
 8004d98:	2109      	movs	r1, #9
 8004d9a:	68a0      	ldr	r0, [r4, #8]
 8004d9c:	f7ff ff9c 	bl	8004cd8 <std>
 8004da0:	2202      	movs	r2, #2
 8004da2:	2112      	movs	r1, #18
 8004da4:	68e0      	ldr	r0, [r4, #12]
 8004da6:	f7ff ff97 	bl	8004cd8 <std>
 8004daa:	2301      	movs	r3, #1
 8004dac:	61a3      	str	r3, [r4, #24]
 8004dae:	bd10      	pop	{r4, pc}
 8004db0:	08005860 	.word	0x08005860
 8004db4:	08004d21 	.word	0x08004d21

08004db8 <__sfp>:
 8004db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dba:	4b1b      	ldr	r3, [pc, #108]	; (8004e28 <__sfp+0x70>)
 8004dbc:	681e      	ldr	r6, [r3, #0]
 8004dbe:	69b3      	ldr	r3, [r6, #24]
 8004dc0:	4607      	mov	r7, r0
 8004dc2:	b913      	cbnz	r3, 8004dca <__sfp+0x12>
 8004dc4:	4630      	mov	r0, r6
 8004dc6:	f7ff ffc7 	bl	8004d58 <__sinit>
 8004dca:	3648      	adds	r6, #72	; 0x48
 8004dcc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004dd0:	3b01      	subs	r3, #1
 8004dd2:	d503      	bpl.n	8004ddc <__sfp+0x24>
 8004dd4:	6833      	ldr	r3, [r6, #0]
 8004dd6:	b133      	cbz	r3, 8004de6 <__sfp+0x2e>
 8004dd8:	6836      	ldr	r6, [r6, #0]
 8004dda:	e7f7      	b.n	8004dcc <__sfp+0x14>
 8004ddc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004de0:	b16d      	cbz	r5, 8004dfe <__sfp+0x46>
 8004de2:	3468      	adds	r4, #104	; 0x68
 8004de4:	e7f4      	b.n	8004dd0 <__sfp+0x18>
 8004de6:	2104      	movs	r1, #4
 8004de8:	4638      	mov	r0, r7
 8004dea:	f7ff ff9f 	bl	8004d2c <__sfmoreglue>
 8004dee:	6030      	str	r0, [r6, #0]
 8004df0:	2800      	cmp	r0, #0
 8004df2:	d1f1      	bne.n	8004dd8 <__sfp+0x20>
 8004df4:	230c      	movs	r3, #12
 8004df6:	603b      	str	r3, [r7, #0]
 8004df8:	4604      	mov	r4, r0
 8004dfa:	4620      	mov	r0, r4
 8004dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004dfe:	4b0b      	ldr	r3, [pc, #44]	; (8004e2c <__sfp+0x74>)
 8004e00:	6665      	str	r5, [r4, #100]	; 0x64
 8004e02:	e9c4 5500 	strd	r5, r5, [r4]
 8004e06:	60a5      	str	r5, [r4, #8]
 8004e08:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004e0c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004e10:	2208      	movs	r2, #8
 8004e12:	4629      	mov	r1, r5
 8004e14:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004e18:	f7ff fd6a 	bl	80048f0 <memset>
 8004e1c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004e20:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004e24:	e7e9      	b.n	8004dfa <__sfp+0x42>
 8004e26:	bf00      	nop
 8004e28:	08005860 	.word	0x08005860
 8004e2c:	ffff0001 	.word	0xffff0001

08004e30 <_fwalk_reent>:
 8004e30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e34:	4680      	mov	r8, r0
 8004e36:	4689      	mov	r9, r1
 8004e38:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004e3c:	2600      	movs	r6, #0
 8004e3e:	b914      	cbnz	r4, 8004e46 <_fwalk_reent+0x16>
 8004e40:	4630      	mov	r0, r6
 8004e42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e46:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004e4a:	3f01      	subs	r7, #1
 8004e4c:	d501      	bpl.n	8004e52 <_fwalk_reent+0x22>
 8004e4e:	6824      	ldr	r4, [r4, #0]
 8004e50:	e7f5      	b.n	8004e3e <_fwalk_reent+0xe>
 8004e52:	89ab      	ldrh	r3, [r5, #12]
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d907      	bls.n	8004e68 <_fwalk_reent+0x38>
 8004e58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004e5c:	3301      	adds	r3, #1
 8004e5e:	d003      	beq.n	8004e68 <_fwalk_reent+0x38>
 8004e60:	4629      	mov	r1, r5
 8004e62:	4640      	mov	r0, r8
 8004e64:	47c8      	blx	r9
 8004e66:	4306      	orrs	r6, r0
 8004e68:	3568      	adds	r5, #104	; 0x68
 8004e6a:	e7ee      	b.n	8004e4a <_fwalk_reent+0x1a>

08004e6c <__swhatbuf_r>:
 8004e6c:	b570      	push	{r4, r5, r6, lr}
 8004e6e:	460e      	mov	r6, r1
 8004e70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e74:	2900      	cmp	r1, #0
 8004e76:	b096      	sub	sp, #88	; 0x58
 8004e78:	4614      	mov	r4, r2
 8004e7a:	461d      	mov	r5, r3
 8004e7c:	da07      	bge.n	8004e8e <__swhatbuf_r+0x22>
 8004e7e:	2300      	movs	r3, #0
 8004e80:	602b      	str	r3, [r5, #0]
 8004e82:	89b3      	ldrh	r3, [r6, #12]
 8004e84:	061a      	lsls	r2, r3, #24
 8004e86:	d410      	bmi.n	8004eaa <__swhatbuf_r+0x3e>
 8004e88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e8c:	e00e      	b.n	8004eac <__swhatbuf_r+0x40>
 8004e8e:	466a      	mov	r2, sp
 8004e90:	f000 fc36 	bl	8005700 <_fstat_r>
 8004e94:	2800      	cmp	r0, #0
 8004e96:	dbf2      	blt.n	8004e7e <__swhatbuf_r+0x12>
 8004e98:	9a01      	ldr	r2, [sp, #4]
 8004e9a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004e9e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004ea2:	425a      	negs	r2, r3
 8004ea4:	415a      	adcs	r2, r3
 8004ea6:	602a      	str	r2, [r5, #0]
 8004ea8:	e7ee      	b.n	8004e88 <__swhatbuf_r+0x1c>
 8004eaa:	2340      	movs	r3, #64	; 0x40
 8004eac:	2000      	movs	r0, #0
 8004eae:	6023      	str	r3, [r4, #0]
 8004eb0:	b016      	add	sp, #88	; 0x58
 8004eb2:	bd70      	pop	{r4, r5, r6, pc}

08004eb4 <__smakebuf_r>:
 8004eb4:	898b      	ldrh	r3, [r1, #12]
 8004eb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004eb8:	079d      	lsls	r5, r3, #30
 8004eba:	4606      	mov	r6, r0
 8004ebc:	460c      	mov	r4, r1
 8004ebe:	d507      	bpl.n	8004ed0 <__smakebuf_r+0x1c>
 8004ec0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004ec4:	6023      	str	r3, [r4, #0]
 8004ec6:	6123      	str	r3, [r4, #16]
 8004ec8:	2301      	movs	r3, #1
 8004eca:	6163      	str	r3, [r4, #20]
 8004ecc:	b002      	add	sp, #8
 8004ece:	bd70      	pop	{r4, r5, r6, pc}
 8004ed0:	ab01      	add	r3, sp, #4
 8004ed2:	466a      	mov	r2, sp
 8004ed4:	f7ff ffca 	bl	8004e6c <__swhatbuf_r>
 8004ed8:	9900      	ldr	r1, [sp, #0]
 8004eda:	4605      	mov	r5, r0
 8004edc:	4630      	mov	r0, r6
 8004ede:	f000 f877 	bl	8004fd0 <_malloc_r>
 8004ee2:	b948      	cbnz	r0, 8004ef8 <__smakebuf_r+0x44>
 8004ee4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ee8:	059a      	lsls	r2, r3, #22
 8004eea:	d4ef      	bmi.n	8004ecc <__smakebuf_r+0x18>
 8004eec:	f023 0303 	bic.w	r3, r3, #3
 8004ef0:	f043 0302 	orr.w	r3, r3, #2
 8004ef4:	81a3      	strh	r3, [r4, #12]
 8004ef6:	e7e3      	b.n	8004ec0 <__smakebuf_r+0xc>
 8004ef8:	4b0d      	ldr	r3, [pc, #52]	; (8004f30 <__smakebuf_r+0x7c>)
 8004efa:	62b3      	str	r3, [r6, #40]	; 0x28
 8004efc:	89a3      	ldrh	r3, [r4, #12]
 8004efe:	6020      	str	r0, [r4, #0]
 8004f00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f04:	81a3      	strh	r3, [r4, #12]
 8004f06:	9b00      	ldr	r3, [sp, #0]
 8004f08:	6163      	str	r3, [r4, #20]
 8004f0a:	9b01      	ldr	r3, [sp, #4]
 8004f0c:	6120      	str	r0, [r4, #16]
 8004f0e:	b15b      	cbz	r3, 8004f28 <__smakebuf_r+0x74>
 8004f10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f14:	4630      	mov	r0, r6
 8004f16:	f000 fc05 	bl	8005724 <_isatty_r>
 8004f1a:	b128      	cbz	r0, 8004f28 <__smakebuf_r+0x74>
 8004f1c:	89a3      	ldrh	r3, [r4, #12]
 8004f1e:	f023 0303 	bic.w	r3, r3, #3
 8004f22:	f043 0301 	orr.w	r3, r3, #1
 8004f26:	81a3      	strh	r3, [r4, #12]
 8004f28:	89a3      	ldrh	r3, [r4, #12]
 8004f2a:	431d      	orrs	r5, r3
 8004f2c:	81a5      	strh	r5, [r4, #12]
 8004f2e:	e7cd      	b.n	8004ecc <__smakebuf_r+0x18>
 8004f30:	08004d21 	.word	0x08004d21

08004f34 <_free_r>:
 8004f34:	b538      	push	{r3, r4, r5, lr}
 8004f36:	4605      	mov	r5, r0
 8004f38:	2900      	cmp	r1, #0
 8004f3a:	d045      	beq.n	8004fc8 <_free_r+0x94>
 8004f3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f40:	1f0c      	subs	r4, r1, #4
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	bfb8      	it	lt
 8004f46:	18e4      	addlt	r4, r4, r3
 8004f48:	f000 fc0e 	bl	8005768 <__malloc_lock>
 8004f4c:	4a1f      	ldr	r2, [pc, #124]	; (8004fcc <_free_r+0x98>)
 8004f4e:	6813      	ldr	r3, [r2, #0]
 8004f50:	4610      	mov	r0, r2
 8004f52:	b933      	cbnz	r3, 8004f62 <_free_r+0x2e>
 8004f54:	6063      	str	r3, [r4, #4]
 8004f56:	6014      	str	r4, [r2, #0]
 8004f58:	4628      	mov	r0, r5
 8004f5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f5e:	f000 bc04 	b.w	800576a <__malloc_unlock>
 8004f62:	42a3      	cmp	r3, r4
 8004f64:	d90c      	bls.n	8004f80 <_free_r+0x4c>
 8004f66:	6821      	ldr	r1, [r4, #0]
 8004f68:	1862      	adds	r2, r4, r1
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	bf04      	itt	eq
 8004f6e:	681a      	ldreq	r2, [r3, #0]
 8004f70:	685b      	ldreq	r3, [r3, #4]
 8004f72:	6063      	str	r3, [r4, #4]
 8004f74:	bf04      	itt	eq
 8004f76:	1852      	addeq	r2, r2, r1
 8004f78:	6022      	streq	r2, [r4, #0]
 8004f7a:	6004      	str	r4, [r0, #0]
 8004f7c:	e7ec      	b.n	8004f58 <_free_r+0x24>
 8004f7e:	4613      	mov	r3, r2
 8004f80:	685a      	ldr	r2, [r3, #4]
 8004f82:	b10a      	cbz	r2, 8004f88 <_free_r+0x54>
 8004f84:	42a2      	cmp	r2, r4
 8004f86:	d9fa      	bls.n	8004f7e <_free_r+0x4a>
 8004f88:	6819      	ldr	r1, [r3, #0]
 8004f8a:	1858      	adds	r0, r3, r1
 8004f8c:	42a0      	cmp	r0, r4
 8004f8e:	d10b      	bne.n	8004fa8 <_free_r+0x74>
 8004f90:	6820      	ldr	r0, [r4, #0]
 8004f92:	4401      	add	r1, r0
 8004f94:	1858      	adds	r0, r3, r1
 8004f96:	4282      	cmp	r2, r0
 8004f98:	6019      	str	r1, [r3, #0]
 8004f9a:	d1dd      	bne.n	8004f58 <_free_r+0x24>
 8004f9c:	6810      	ldr	r0, [r2, #0]
 8004f9e:	6852      	ldr	r2, [r2, #4]
 8004fa0:	605a      	str	r2, [r3, #4]
 8004fa2:	4401      	add	r1, r0
 8004fa4:	6019      	str	r1, [r3, #0]
 8004fa6:	e7d7      	b.n	8004f58 <_free_r+0x24>
 8004fa8:	d902      	bls.n	8004fb0 <_free_r+0x7c>
 8004faa:	230c      	movs	r3, #12
 8004fac:	602b      	str	r3, [r5, #0]
 8004fae:	e7d3      	b.n	8004f58 <_free_r+0x24>
 8004fb0:	6820      	ldr	r0, [r4, #0]
 8004fb2:	1821      	adds	r1, r4, r0
 8004fb4:	428a      	cmp	r2, r1
 8004fb6:	bf04      	itt	eq
 8004fb8:	6811      	ldreq	r1, [r2, #0]
 8004fba:	6852      	ldreq	r2, [r2, #4]
 8004fbc:	6062      	str	r2, [r4, #4]
 8004fbe:	bf04      	itt	eq
 8004fc0:	1809      	addeq	r1, r1, r0
 8004fc2:	6021      	streq	r1, [r4, #0]
 8004fc4:	605c      	str	r4, [r3, #4]
 8004fc6:	e7c7      	b.n	8004f58 <_free_r+0x24>
 8004fc8:	bd38      	pop	{r3, r4, r5, pc}
 8004fca:	bf00      	nop
 8004fcc:	20000090 	.word	0x20000090

08004fd0 <_malloc_r>:
 8004fd0:	b570      	push	{r4, r5, r6, lr}
 8004fd2:	1ccd      	adds	r5, r1, #3
 8004fd4:	f025 0503 	bic.w	r5, r5, #3
 8004fd8:	3508      	adds	r5, #8
 8004fda:	2d0c      	cmp	r5, #12
 8004fdc:	bf38      	it	cc
 8004fde:	250c      	movcc	r5, #12
 8004fe0:	2d00      	cmp	r5, #0
 8004fe2:	4606      	mov	r6, r0
 8004fe4:	db01      	blt.n	8004fea <_malloc_r+0x1a>
 8004fe6:	42a9      	cmp	r1, r5
 8004fe8:	d903      	bls.n	8004ff2 <_malloc_r+0x22>
 8004fea:	230c      	movs	r3, #12
 8004fec:	6033      	str	r3, [r6, #0]
 8004fee:	2000      	movs	r0, #0
 8004ff0:	bd70      	pop	{r4, r5, r6, pc}
 8004ff2:	f000 fbb9 	bl	8005768 <__malloc_lock>
 8004ff6:	4a21      	ldr	r2, [pc, #132]	; (800507c <_malloc_r+0xac>)
 8004ff8:	6814      	ldr	r4, [r2, #0]
 8004ffa:	4621      	mov	r1, r4
 8004ffc:	b991      	cbnz	r1, 8005024 <_malloc_r+0x54>
 8004ffe:	4c20      	ldr	r4, [pc, #128]	; (8005080 <_malloc_r+0xb0>)
 8005000:	6823      	ldr	r3, [r4, #0]
 8005002:	b91b      	cbnz	r3, 800500c <_malloc_r+0x3c>
 8005004:	4630      	mov	r0, r6
 8005006:	f000 fb05 	bl	8005614 <_sbrk_r>
 800500a:	6020      	str	r0, [r4, #0]
 800500c:	4629      	mov	r1, r5
 800500e:	4630      	mov	r0, r6
 8005010:	f000 fb00 	bl	8005614 <_sbrk_r>
 8005014:	1c43      	adds	r3, r0, #1
 8005016:	d124      	bne.n	8005062 <_malloc_r+0x92>
 8005018:	230c      	movs	r3, #12
 800501a:	6033      	str	r3, [r6, #0]
 800501c:	4630      	mov	r0, r6
 800501e:	f000 fba4 	bl	800576a <__malloc_unlock>
 8005022:	e7e4      	b.n	8004fee <_malloc_r+0x1e>
 8005024:	680b      	ldr	r3, [r1, #0]
 8005026:	1b5b      	subs	r3, r3, r5
 8005028:	d418      	bmi.n	800505c <_malloc_r+0x8c>
 800502a:	2b0b      	cmp	r3, #11
 800502c:	d90f      	bls.n	800504e <_malloc_r+0x7e>
 800502e:	600b      	str	r3, [r1, #0]
 8005030:	50cd      	str	r5, [r1, r3]
 8005032:	18cc      	adds	r4, r1, r3
 8005034:	4630      	mov	r0, r6
 8005036:	f000 fb98 	bl	800576a <__malloc_unlock>
 800503a:	f104 000b 	add.w	r0, r4, #11
 800503e:	1d23      	adds	r3, r4, #4
 8005040:	f020 0007 	bic.w	r0, r0, #7
 8005044:	1ac3      	subs	r3, r0, r3
 8005046:	d0d3      	beq.n	8004ff0 <_malloc_r+0x20>
 8005048:	425a      	negs	r2, r3
 800504a:	50e2      	str	r2, [r4, r3]
 800504c:	e7d0      	b.n	8004ff0 <_malloc_r+0x20>
 800504e:	428c      	cmp	r4, r1
 8005050:	684b      	ldr	r3, [r1, #4]
 8005052:	bf16      	itet	ne
 8005054:	6063      	strne	r3, [r4, #4]
 8005056:	6013      	streq	r3, [r2, #0]
 8005058:	460c      	movne	r4, r1
 800505a:	e7eb      	b.n	8005034 <_malloc_r+0x64>
 800505c:	460c      	mov	r4, r1
 800505e:	6849      	ldr	r1, [r1, #4]
 8005060:	e7cc      	b.n	8004ffc <_malloc_r+0x2c>
 8005062:	1cc4      	adds	r4, r0, #3
 8005064:	f024 0403 	bic.w	r4, r4, #3
 8005068:	42a0      	cmp	r0, r4
 800506a:	d005      	beq.n	8005078 <_malloc_r+0xa8>
 800506c:	1a21      	subs	r1, r4, r0
 800506e:	4630      	mov	r0, r6
 8005070:	f000 fad0 	bl	8005614 <_sbrk_r>
 8005074:	3001      	adds	r0, #1
 8005076:	d0cf      	beq.n	8005018 <_malloc_r+0x48>
 8005078:	6025      	str	r5, [r4, #0]
 800507a:	e7db      	b.n	8005034 <_malloc_r+0x64>
 800507c:	20000090 	.word	0x20000090
 8005080:	20000094 	.word	0x20000094

08005084 <__sfputc_r>:
 8005084:	6893      	ldr	r3, [r2, #8]
 8005086:	3b01      	subs	r3, #1
 8005088:	2b00      	cmp	r3, #0
 800508a:	b410      	push	{r4}
 800508c:	6093      	str	r3, [r2, #8]
 800508e:	da08      	bge.n	80050a2 <__sfputc_r+0x1e>
 8005090:	6994      	ldr	r4, [r2, #24]
 8005092:	42a3      	cmp	r3, r4
 8005094:	db01      	blt.n	800509a <__sfputc_r+0x16>
 8005096:	290a      	cmp	r1, #10
 8005098:	d103      	bne.n	80050a2 <__sfputc_r+0x1e>
 800509a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800509e:	f7ff bcab 	b.w	80049f8 <__swbuf_r>
 80050a2:	6813      	ldr	r3, [r2, #0]
 80050a4:	1c58      	adds	r0, r3, #1
 80050a6:	6010      	str	r0, [r2, #0]
 80050a8:	7019      	strb	r1, [r3, #0]
 80050aa:	4608      	mov	r0, r1
 80050ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80050b0:	4770      	bx	lr

080050b2 <__sfputs_r>:
 80050b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050b4:	4606      	mov	r6, r0
 80050b6:	460f      	mov	r7, r1
 80050b8:	4614      	mov	r4, r2
 80050ba:	18d5      	adds	r5, r2, r3
 80050bc:	42ac      	cmp	r4, r5
 80050be:	d101      	bne.n	80050c4 <__sfputs_r+0x12>
 80050c0:	2000      	movs	r0, #0
 80050c2:	e007      	b.n	80050d4 <__sfputs_r+0x22>
 80050c4:	463a      	mov	r2, r7
 80050c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050ca:	4630      	mov	r0, r6
 80050cc:	f7ff ffda 	bl	8005084 <__sfputc_r>
 80050d0:	1c43      	adds	r3, r0, #1
 80050d2:	d1f3      	bne.n	80050bc <__sfputs_r+0xa>
 80050d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080050d8 <_vfiprintf_r>:
 80050d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050dc:	460c      	mov	r4, r1
 80050de:	b09d      	sub	sp, #116	; 0x74
 80050e0:	4617      	mov	r7, r2
 80050e2:	461d      	mov	r5, r3
 80050e4:	4606      	mov	r6, r0
 80050e6:	b118      	cbz	r0, 80050f0 <_vfiprintf_r+0x18>
 80050e8:	6983      	ldr	r3, [r0, #24]
 80050ea:	b90b      	cbnz	r3, 80050f0 <_vfiprintf_r+0x18>
 80050ec:	f7ff fe34 	bl	8004d58 <__sinit>
 80050f0:	4b7c      	ldr	r3, [pc, #496]	; (80052e4 <_vfiprintf_r+0x20c>)
 80050f2:	429c      	cmp	r4, r3
 80050f4:	d158      	bne.n	80051a8 <_vfiprintf_r+0xd0>
 80050f6:	6874      	ldr	r4, [r6, #4]
 80050f8:	89a3      	ldrh	r3, [r4, #12]
 80050fa:	0718      	lsls	r0, r3, #28
 80050fc:	d55e      	bpl.n	80051bc <_vfiprintf_r+0xe4>
 80050fe:	6923      	ldr	r3, [r4, #16]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d05b      	beq.n	80051bc <_vfiprintf_r+0xe4>
 8005104:	2300      	movs	r3, #0
 8005106:	9309      	str	r3, [sp, #36]	; 0x24
 8005108:	2320      	movs	r3, #32
 800510a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800510e:	2330      	movs	r3, #48	; 0x30
 8005110:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005114:	9503      	str	r5, [sp, #12]
 8005116:	f04f 0b01 	mov.w	fp, #1
 800511a:	46b8      	mov	r8, r7
 800511c:	4645      	mov	r5, r8
 800511e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005122:	b10b      	cbz	r3, 8005128 <_vfiprintf_r+0x50>
 8005124:	2b25      	cmp	r3, #37	; 0x25
 8005126:	d154      	bne.n	80051d2 <_vfiprintf_r+0xfa>
 8005128:	ebb8 0a07 	subs.w	sl, r8, r7
 800512c:	d00b      	beq.n	8005146 <_vfiprintf_r+0x6e>
 800512e:	4653      	mov	r3, sl
 8005130:	463a      	mov	r2, r7
 8005132:	4621      	mov	r1, r4
 8005134:	4630      	mov	r0, r6
 8005136:	f7ff ffbc 	bl	80050b2 <__sfputs_r>
 800513a:	3001      	adds	r0, #1
 800513c:	f000 80c2 	beq.w	80052c4 <_vfiprintf_r+0x1ec>
 8005140:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005142:	4453      	add	r3, sl
 8005144:	9309      	str	r3, [sp, #36]	; 0x24
 8005146:	f898 3000 	ldrb.w	r3, [r8]
 800514a:	2b00      	cmp	r3, #0
 800514c:	f000 80ba 	beq.w	80052c4 <_vfiprintf_r+0x1ec>
 8005150:	2300      	movs	r3, #0
 8005152:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005156:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800515a:	9304      	str	r3, [sp, #16]
 800515c:	9307      	str	r3, [sp, #28]
 800515e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005162:	931a      	str	r3, [sp, #104]	; 0x68
 8005164:	46a8      	mov	r8, r5
 8005166:	2205      	movs	r2, #5
 8005168:	f818 1b01 	ldrb.w	r1, [r8], #1
 800516c:	485e      	ldr	r0, [pc, #376]	; (80052e8 <_vfiprintf_r+0x210>)
 800516e:	f7fb f82f 	bl	80001d0 <memchr>
 8005172:	9b04      	ldr	r3, [sp, #16]
 8005174:	bb78      	cbnz	r0, 80051d6 <_vfiprintf_r+0xfe>
 8005176:	06d9      	lsls	r1, r3, #27
 8005178:	bf44      	itt	mi
 800517a:	2220      	movmi	r2, #32
 800517c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005180:	071a      	lsls	r2, r3, #28
 8005182:	bf44      	itt	mi
 8005184:	222b      	movmi	r2, #43	; 0x2b
 8005186:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800518a:	782a      	ldrb	r2, [r5, #0]
 800518c:	2a2a      	cmp	r2, #42	; 0x2a
 800518e:	d02a      	beq.n	80051e6 <_vfiprintf_r+0x10e>
 8005190:	9a07      	ldr	r2, [sp, #28]
 8005192:	46a8      	mov	r8, r5
 8005194:	2000      	movs	r0, #0
 8005196:	250a      	movs	r5, #10
 8005198:	4641      	mov	r1, r8
 800519a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800519e:	3b30      	subs	r3, #48	; 0x30
 80051a0:	2b09      	cmp	r3, #9
 80051a2:	d969      	bls.n	8005278 <_vfiprintf_r+0x1a0>
 80051a4:	b360      	cbz	r0, 8005200 <_vfiprintf_r+0x128>
 80051a6:	e024      	b.n	80051f2 <_vfiprintf_r+0x11a>
 80051a8:	4b50      	ldr	r3, [pc, #320]	; (80052ec <_vfiprintf_r+0x214>)
 80051aa:	429c      	cmp	r4, r3
 80051ac:	d101      	bne.n	80051b2 <_vfiprintf_r+0xda>
 80051ae:	68b4      	ldr	r4, [r6, #8]
 80051b0:	e7a2      	b.n	80050f8 <_vfiprintf_r+0x20>
 80051b2:	4b4f      	ldr	r3, [pc, #316]	; (80052f0 <_vfiprintf_r+0x218>)
 80051b4:	429c      	cmp	r4, r3
 80051b6:	bf08      	it	eq
 80051b8:	68f4      	ldreq	r4, [r6, #12]
 80051ba:	e79d      	b.n	80050f8 <_vfiprintf_r+0x20>
 80051bc:	4621      	mov	r1, r4
 80051be:	4630      	mov	r0, r6
 80051c0:	f7ff fc6c 	bl	8004a9c <__swsetup_r>
 80051c4:	2800      	cmp	r0, #0
 80051c6:	d09d      	beq.n	8005104 <_vfiprintf_r+0x2c>
 80051c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80051cc:	b01d      	add	sp, #116	; 0x74
 80051ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051d2:	46a8      	mov	r8, r5
 80051d4:	e7a2      	b.n	800511c <_vfiprintf_r+0x44>
 80051d6:	4a44      	ldr	r2, [pc, #272]	; (80052e8 <_vfiprintf_r+0x210>)
 80051d8:	1a80      	subs	r0, r0, r2
 80051da:	fa0b f000 	lsl.w	r0, fp, r0
 80051de:	4318      	orrs	r0, r3
 80051e0:	9004      	str	r0, [sp, #16]
 80051e2:	4645      	mov	r5, r8
 80051e4:	e7be      	b.n	8005164 <_vfiprintf_r+0x8c>
 80051e6:	9a03      	ldr	r2, [sp, #12]
 80051e8:	1d11      	adds	r1, r2, #4
 80051ea:	6812      	ldr	r2, [r2, #0]
 80051ec:	9103      	str	r1, [sp, #12]
 80051ee:	2a00      	cmp	r2, #0
 80051f0:	db01      	blt.n	80051f6 <_vfiprintf_r+0x11e>
 80051f2:	9207      	str	r2, [sp, #28]
 80051f4:	e004      	b.n	8005200 <_vfiprintf_r+0x128>
 80051f6:	4252      	negs	r2, r2
 80051f8:	f043 0302 	orr.w	r3, r3, #2
 80051fc:	9207      	str	r2, [sp, #28]
 80051fe:	9304      	str	r3, [sp, #16]
 8005200:	f898 3000 	ldrb.w	r3, [r8]
 8005204:	2b2e      	cmp	r3, #46	; 0x2e
 8005206:	d10e      	bne.n	8005226 <_vfiprintf_r+0x14e>
 8005208:	f898 3001 	ldrb.w	r3, [r8, #1]
 800520c:	2b2a      	cmp	r3, #42	; 0x2a
 800520e:	d138      	bne.n	8005282 <_vfiprintf_r+0x1aa>
 8005210:	9b03      	ldr	r3, [sp, #12]
 8005212:	1d1a      	adds	r2, r3, #4
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	9203      	str	r2, [sp, #12]
 8005218:	2b00      	cmp	r3, #0
 800521a:	bfb8      	it	lt
 800521c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005220:	f108 0802 	add.w	r8, r8, #2
 8005224:	9305      	str	r3, [sp, #20]
 8005226:	4d33      	ldr	r5, [pc, #204]	; (80052f4 <_vfiprintf_r+0x21c>)
 8005228:	f898 1000 	ldrb.w	r1, [r8]
 800522c:	2203      	movs	r2, #3
 800522e:	4628      	mov	r0, r5
 8005230:	f7fa ffce 	bl	80001d0 <memchr>
 8005234:	b140      	cbz	r0, 8005248 <_vfiprintf_r+0x170>
 8005236:	2340      	movs	r3, #64	; 0x40
 8005238:	1b40      	subs	r0, r0, r5
 800523a:	fa03 f000 	lsl.w	r0, r3, r0
 800523e:	9b04      	ldr	r3, [sp, #16]
 8005240:	4303      	orrs	r3, r0
 8005242:	f108 0801 	add.w	r8, r8, #1
 8005246:	9304      	str	r3, [sp, #16]
 8005248:	f898 1000 	ldrb.w	r1, [r8]
 800524c:	482a      	ldr	r0, [pc, #168]	; (80052f8 <_vfiprintf_r+0x220>)
 800524e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005252:	2206      	movs	r2, #6
 8005254:	f108 0701 	add.w	r7, r8, #1
 8005258:	f7fa ffba 	bl	80001d0 <memchr>
 800525c:	2800      	cmp	r0, #0
 800525e:	d037      	beq.n	80052d0 <_vfiprintf_r+0x1f8>
 8005260:	4b26      	ldr	r3, [pc, #152]	; (80052fc <_vfiprintf_r+0x224>)
 8005262:	bb1b      	cbnz	r3, 80052ac <_vfiprintf_r+0x1d4>
 8005264:	9b03      	ldr	r3, [sp, #12]
 8005266:	3307      	adds	r3, #7
 8005268:	f023 0307 	bic.w	r3, r3, #7
 800526c:	3308      	adds	r3, #8
 800526e:	9303      	str	r3, [sp, #12]
 8005270:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005272:	444b      	add	r3, r9
 8005274:	9309      	str	r3, [sp, #36]	; 0x24
 8005276:	e750      	b.n	800511a <_vfiprintf_r+0x42>
 8005278:	fb05 3202 	mla	r2, r5, r2, r3
 800527c:	2001      	movs	r0, #1
 800527e:	4688      	mov	r8, r1
 8005280:	e78a      	b.n	8005198 <_vfiprintf_r+0xc0>
 8005282:	2300      	movs	r3, #0
 8005284:	f108 0801 	add.w	r8, r8, #1
 8005288:	9305      	str	r3, [sp, #20]
 800528a:	4619      	mov	r1, r3
 800528c:	250a      	movs	r5, #10
 800528e:	4640      	mov	r0, r8
 8005290:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005294:	3a30      	subs	r2, #48	; 0x30
 8005296:	2a09      	cmp	r2, #9
 8005298:	d903      	bls.n	80052a2 <_vfiprintf_r+0x1ca>
 800529a:	2b00      	cmp	r3, #0
 800529c:	d0c3      	beq.n	8005226 <_vfiprintf_r+0x14e>
 800529e:	9105      	str	r1, [sp, #20]
 80052a0:	e7c1      	b.n	8005226 <_vfiprintf_r+0x14e>
 80052a2:	fb05 2101 	mla	r1, r5, r1, r2
 80052a6:	2301      	movs	r3, #1
 80052a8:	4680      	mov	r8, r0
 80052aa:	e7f0      	b.n	800528e <_vfiprintf_r+0x1b6>
 80052ac:	ab03      	add	r3, sp, #12
 80052ae:	9300      	str	r3, [sp, #0]
 80052b0:	4622      	mov	r2, r4
 80052b2:	4b13      	ldr	r3, [pc, #76]	; (8005300 <_vfiprintf_r+0x228>)
 80052b4:	a904      	add	r1, sp, #16
 80052b6:	4630      	mov	r0, r6
 80052b8:	f3af 8000 	nop.w
 80052bc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80052c0:	4681      	mov	r9, r0
 80052c2:	d1d5      	bne.n	8005270 <_vfiprintf_r+0x198>
 80052c4:	89a3      	ldrh	r3, [r4, #12]
 80052c6:	065b      	lsls	r3, r3, #25
 80052c8:	f53f af7e 	bmi.w	80051c8 <_vfiprintf_r+0xf0>
 80052cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80052ce:	e77d      	b.n	80051cc <_vfiprintf_r+0xf4>
 80052d0:	ab03      	add	r3, sp, #12
 80052d2:	9300      	str	r3, [sp, #0]
 80052d4:	4622      	mov	r2, r4
 80052d6:	4b0a      	ldr	r3, [pc, #40]	; (8005300 <_vfiprintf_r+0x228>)
 80052d8:	a904      	add	r1, sp, #16
 80052da:	4630      	mov	r0, r6
 80052dc:	f000 f888 	bl	80053f0 <_printf_i>
 80052e0:	e7ec      	b.n	80052bc <_vfiprintf_r+0x1e4>
 80052e2:	bf00      	nop
 80052e4:	08005884 	.word	0x08005884
 80052e8:	080058c4 	.word	0x080058c4
 80052ec:	080058a4 	.word	0x080058a4
 80052f0:	08005864 	.word	0x08005864
 80052f4:	080058ca 	.word	0x080058ca
 80052f8:	080058ce 	.word	0x080058ce
 80052fc:	00000000 	.word	0x00000000
 8005300:	080050b3 	.word	0x080050b3

08005304 <_printf_common>:
 8005304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005308:	4691      	mov	r9, r2
 800530a:	461f      	mov	r7, r3
 800530c:	688a      	ldr	r2, [r1, #8]
 800530e:	690b      	ldr	r3, [r1, #16]
 8005310:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005314:	4293      	cmp	r3, r2
 8005316:	bfb8      	it	lt
 8005318:	4613      	movlt	r3, r2
 800531a:	f8c9 3000 	str.w	r3, [r9]
 800531e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005322:	4606      	mov	r6, r0
 8005324:	460c      	mov	r4, r1
 8005326:	b112      	cbz	r2, 800532e <_printf_common+0x2a>
 8005328:	3301      	adds	r3, #1
 800532a:	f8c9 3000 	str.w	r3, [r9]
 800532e:	6823      	ldr	r3, [r4, #0]
 8005330:	0699      	lsls	r1, r3, #26
 8005332:	bf42      	ittt	mi
 8005334:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005338:	3302      	addmi	r3, #2
 800533a:	f8c9 3000 	strmi.w	r3, [r9]
 800533e:	6825      	ldr	r5, [r4, #0]
 8005340:	f015 0506 	ands.w	r5, r5, #6
 8005344:	d107      	bne.n	8005356 <_printf_common+0x52>
 8005346:	f104 0a19 	add.w	sl, r4, #25
 800534a:	68e3      	ldr	r3, [r4, #12]
 800534c:	f8d9 2000 	ldr.w	r2, [r9]
 8005350:	1a9b      	subs	r3, r3, r2
 8005352:	42ab      	cmp	r3, r5
 8005354:	dc28      	bgt.n	80053a8 <_printf_common+0xa4>
 8005356:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800535a:	6822      	ldr	r2, [r4, #0]
 800535c:	3300      	adds	r3, #0
 800535e:	bf18      	it	ne
 8005360:	2301      	movne	r3, #1
 8005362:	0692      	lsls	r2, r2, #26
 8005364:	d42d      	bmi.n	80053c2 <_printf_common+0xbe>
 8005366:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800536a:	4639      	mov	r1, r7
 800536c:	4630      	mov	r0, r6
 800536e:	47c0      	blx	r8
 8005370:	3001      	adds	r0, #1
 8005372:	d020      	beq.n	80053b6 <_printf_common+0xb2>
 8005374:	6823      	ldr	r3, [r4, #0]
 8005376:	68e5      	ldr	r5, [r4, #12]
 8005378:	f8d9 2000 	ldr.w	r2, [r9]
 800537c:	f003 0306 	and.w	r3, r3, #6
 8005380:	2b04      	cmp	r3, #4
 8005382:	bf08      	it	eq
 8005384:	1aad      	subeq	r5, r5, r2
 8005386:	68a3      	ldr	r3, [r4, #8]
 8005388:	6922      	ldr	r2, [r4, #16]
 800538a:	bf0c      	ite	eq
 800538c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005390:	2500      	movne	r5, #0
 8005392:	4293      	cmp	r3, r2
 8005394:	bfc4      	itt	gt
 8005396:	1a9b      	subgt	r3, r3, r2
 8005398:	18ed      	addgt	r5, r5, r3
 800539a:	f04f 0900 	mov.w	r9, #0
 800539e:	341a      	adds	r4, #26
 80053a0:	454d      	cmp	r5, r9
 80053a2:	d11a      	bne.n	80053da <_printf_common+0xd6>
 80053a4:	2000      	movs	r0, #0
 80053a6:	e008      	b.n	80053ba <_printf_common+0xb6>
 80053a8:	2301      	movs	r3, #1
 80053aa:	4652      	mov	r2, sl
 80053ac:	4639      	mov	r1, r7
 80053ae:	4630      	mov	r0, r6
 80053b0:	47c0      	blx	r8
 80053b2:	3001      	adds	r0, #1
 80053b4:	d103      	bne.n	80053be <_printf_common+0xba>
 80053b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80053ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053be:	3501      	adds	r5, #1
 80053c0:	e7c3      	b.n	800534a <_printf_common+0x46>
 80053c2:	18e1      	adds	r1, r4, r3
 80053c4:	1c5a      	adds	r2, r3, #1
 80053c6:	2030      	movs	r0, #48	; 0x30
 80053c8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80053cc:	4422      	add	r2, r4
 80053ce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80053d2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80053d6:	3302      	adds	r3, #2
 80053d8:	e7c5      	b.n	8005366 <_printf_common+0x62>
 80053da:	2301      	movs	r3, #1
 80053dc:	4622      	mov	r2, r4
 80053de:	4639      	mov	r1, r7
 80053e0:	4630      	mov	r0, r6
 80053e2:	47c0      	blx	r8
 80053e4:	3001      	adds	r0, #1
 80053e6:	d0e6      	beq.n	80053b6 <_printf_common+0xb2>
 80053e8:	f109 0901 	add.w	r9, r9, #1
 80053ec:	e7d8      	b.n	80053a0 <_printf_common+0x9c>
	...

080053f0 <_printf_i>:
 80053f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80053f4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80053f8:	460c      	mov	r4, r1
 80053fa:	7e09      	ldrb	r1, [r1, #24]
 80053fc:	b085      	sub	sp, #20
 80053fe:	296e      	cmp	r1, #110	; 0x6e
 8005400:	4617      	mov	r7, r2
 8005402:	4606      	mov	r6, r0
 8005404:	4698      	mov	r8, r3
 8005406:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005408:	f000 80b3 	beq.w	8005572 <_printf_i+0x182>
 800540c:	d822      	bhi.n	8005454 <_printf_i+0x64>
 800540e:	2963      	cmp	r1, #99	; 0x63
 8005410:	d036      	beq.n	8005480 <_printf_i+0x90>
 8005412:	d80a      	bhi.n	800542a <_printf_i+0x3a>
 8005414:	2900      	cmp	r1, #0
 8005416:	f000 80b9 	beq.w	800558c <_printf_i+0x19c>
 800541a:	2958      	cmp	r1, #88	; 0x58
 800541c:	f000 8083 	beq.w	8005526 <_printf_i+0x136>
 8005420:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005424:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005428:	e032      	b.n	8005490 <_printf_i+0xa0>
 800542a:	2964      	cmp	r1, #100	; 0x64
 800542c:	d001      	beq.n	8005432 <_printf_i+0x42>
 800542e:	2969      	cmp	r1, #105	; 0x69
 8005430:	d1f6      	bne.n	8005420 <_printf_i+0x30>
 8005432:	6820      	ldr	r0, [r4, #0]
 8005434:	6813      	ldr	r3, [r2, #0]
 8005436:	0605      	lsls	r5, r0, #24
 8005438:	f103 0104 	add.w	r1, r3, #4
 800543c:	d52a      	bpl.n	8005494 <_printf_i+0xa4>
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	6011      	str	r1, [r2, #0]
 8005442:	2b00      	cmp	r3, #0
 8005444:	da03      	bge.n	800544e <_printf_i+0x5e>
 8005446:	222d      	movs	r2, #45	; 0x2d
 8005448:	425b      	negs	r3, r3
 800544a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800544e:	486f      	ldr	r0, [pc, #444]	; (800560c <_printf_i+0x21c>)
 8005450:	220a      	movs	r2, #10
 8005452:	e039      	b.n	80054c8 <_printf_i+0xd8>
 8005454:	2973      	cmp	r1, #115	; 0x73
 8005456:	f000 809d 	beq.w	8005594 <_printf_i+0x1a4>
 800545a:	d808      	bhi.n	800546e <_printf_i+0x7e>
 800545c:	296f      	cmp	r1, #111	; 0x6f
 800545e:	d020      	beq.n	80054a2 <_printf_i+0xb2>
 8005460:	2970      	cmp	r1, #112	; 0x70
 8005462:	d1dd      	bne.n	8005420 <_printf_i+0x30>
 8005464:	6823      	ldr	r3, [r4, #0]
 8005466:	f043 0320 	orr.w	r3, r3, #32
 800546a:	6023      	str	r3, [r4, #0]
 800546c:	e003      	b.n	8005476 <_printf_i+0x86>
 800546e:	2975      	cmp	r1, #117	; 0x75
 8005470:	d017      	beq.n	80054a2 <_printf_i+0xb2>
 8005472:	2978      	cmp	r1, #120	; 0x78
 8005474:	d1d4      	bne.n	8005420 <_printf_i+0x30>
 8005476:	2378      	movs	r3, #120	; 0x78
 8005478:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800547c:	4864      	ldr	r0, [pc, #400]	; (8005610 <_printf_i+0x220>)
 800547e:	e055      	b.n	800552c <_printf_i+0x13c>
 8005480:	6813      	ldr	r3, [r2, #0]
 8005482:	1d19      	adds	r1, r3, #4
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	6011      	str	r1, [r2, #0]
 8005488:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800548c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005490:	2301      	movs	r3, #1
 8005492:	e08c      	b.n	80055ae <_printf_i+0x1be>
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	6011      	str	r1, [r2, #0]
 8005498:	f010 0f40 	tst.w	r0, #64	; 0x40
 800549c:	bf18      	it	ne
 800549e:	b21b      	sxthne	r3, r3
 80054a0:	e7cf      	b.n	8005442 <_printf_i+0x52>
 80054a2:	6813      	ldr	r3, [r2, #0]
 80054a4:	6825      	ldr	r5, [r4, #0]
 80054a6:	1d18      	adds	r0, r3, #4
 80054a8:	6010      	str	r0, [r2, #0]
 80054aa:	0628      	lsls	r0, r5, #24
 80054ac:	d501      	bpl.n	80054b2 <_printf_i+0xc2>
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	e002      	b.n	80054b8 <_printf_i+0xc8>
 80054b2:	0668      	lsls	r0, r5, #25
 80054b4:	d5fb      	bpl.n	80054ae <_printf_i+0xbe>
 80054b6:	881b      	ldrh	r3, [r3, #0]
 80054b8:	4854      	ldr	r0, [pc, #336]	; (800560c <_printf_i+0x21c>)
 80054ba:	296f      	cmp	r1, #111	; 0x6f
 80054bc:	bf14      	ite	ne
 80054be:	220a      	movne	r2, #10
 80054c0:	2208      	moveq	r2, #8
 80054c2:	2100      	movs	r1, #0
 80054c4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80054c8:	6865      	ldr	r5, [r4, #4]
 80054ca:	60a5      	str	r5, [r4, #8]
 80054cc:	2d00      	cmp	r5, #0
 80054ce:	f2c0 8095 	blt.w	80055fc <_printf_i+0x20c>
 80054d2:	6821      	ldr	r1, [r4, #0]
 80054d4:	f021 0104 	bic.w	r1, r1, #4
 80054d8:	6021      	str	r1, [r4, #0]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d13d      	bne.n	800555a <_printf_i+0x16a>
 80054de:	2d00      	cmp	r5, #0
 80054e0:	f040 808e 	bne.w	8005600 <_printf_i+0x210>
 80054e4:	4665      	mov	r5, ip
 80054e6:	2a08      	cmp	r2, #8
 80054e8:	d10b      	bne.n	8005502 <_printf_i+0x112>
 80054ea:	6823      	ldr	r3, [r4, #0]
 80054ec:	07db      	lsls	r3, r3, #31
 80054ee:	d508      	bpl.n	8005502 <_printf_i+0x112>
 80054f0:	6923      	ldr	r3, [r4, #16]
 80054f2:	6862      	ldr	r2, [r4, #4]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	bfde      	ittt	le
 80054f8:	2330      	movle	r3, #48	; 0x30
 80054fa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80054fe:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005502:	ebac 0305 	sub.w	r3, ip, r5
 8005506:	6123      	str	r3, [r4, #16]
 8005508:	f8cd 8000 	str.w	r8, [sp]
 800550c:	463b      	mov	r3, r7
 800550e:	aa03      	add	r2, sp, #12
 8005510:	4621      	mov	r1, r4
 8005512:	4630      	mov	r0, r6
 8005514:	f7ff fef6 	bl	8005304 <_printf_common>
 8005518:	3001      	adds	r0, #1
 800551a:	d14d      	bne.n	80055b8 <_printf_i+0x1c8>
 800551c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005520:	b005      	add	sp, #20
 8005522:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005526:	4839      	ldr	r0, [pc, #228]	; (800560c <_printf_i+0x21c>)
 8005528:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800552c:	6813      	ldr	r3, [r2, #0]
 800552e:	6821      	ldr	r1, [r4, #0]
 8005530:	1d1d      	adds	r5, r3, #4
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	6015      	str	r5, [r2, #0]
 8005536:	060a      	lsls	r2, r1, #24
 8005538:	d50b      	bpl.n	8005552 <_printf_i+0x162>
 800553a:	07ca      	lsls	r2, r1, #31
 800553c:	bf44      	itt	mi
 800553e:	f041 0120 	orrmi.w	r1, r1, #32
 8005542:	6021      	strmi	r1, [r4, #0]
 8005544:	b91b      	cbnz	r3, 800554e <_printf_i+0x15e>
 8005546:	6822      	ldr	r2, [r4, #0]
 8005548:	f022 0220 	bic.w	r2, r2, #32
 800554c:	6022      	str	r2, [r4, #0]
 800554e:	2210      	movs	r2, #16
 8005550:	e7b7      	b.n	80054c2 <_printf_i+0xd2>
 8005552:	064d      	lsls	r5, r1, #25
 8005554:	bf48      	it	mi
 8005556:	b29b      	uxthmi	r3, r3
 8005558:	e7ef      	b.n	800553a <_printf_i+0x14a>
 800555a:	4665      	mov	r5, ip
 800555c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005560:	fb02 3311 	mls	r3, r2, r1, r3
 8005564:	5cc3      	ldrb	r3, [r0, r3]
 8005566:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800556a:	460b      	mov	r3, r1
 800556c:	2900      	cmp	r1, #0
 800556e:	d1f5      	bne.n	800555c <_printf_i+0x16c>
 8005570:	e7b9      	b.n	80054e6 <_printf_i+0xf6>
 8005572:	6813      	ldr	r3, [r2, #0]
 8005574:	6825      	ldr	r5, [r4, #0]
 8005576:	6961      	ldr	r1, [r4, #20]
 8005578:	1d18      	adds	r0, r3, #4
 800557a:	6010      	str	r0, [r2, #0]
 800557c:	0628      	lsls	r0, r5, #24
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	d501      	bpl.n	8005586 <_printf_i+0x196>
 8005582:	6019      	str	r1, [r3, #0]
 8005584:	e002      	b.n	800558c <_printf_i+0x19c>
 8005586:	066a      	lsls	r2, r5, #25
 8005588:	d5fb      	bpl.n	8005582 <_printf_i+0x192>
 800558a:	8019      	strh	r1, [r3, #0]
 800558c:	2300      	movs	r3, #0
 800558e:	6123      	str	r3, [r4, #16]
 8005590:	4665      	mov	r5, ip
 8005592:	e7b9      	b.n	8005508 <_printf_i+0x118>
 8005594:	6813      	ldr	r3, [r2, #0]
 8005596:	1d19      	adds	r1, r3, #4
 8005598:	6011      	str	r1, [r2, #0]
 800559a:	681d      	ldr	r5, [r3, #0]
 800559c:	6862      	ldr	r2, [r4, #4]
 800559e:	2100      	movs	r1, #0
 80055a0:	4628      	mov	r0, r5
 80055a2:	f7fa fe15 	bl	80001d0 <memchr>
 80055a6:	b108      	cbz	r0, 80055ac <_printf_i+0x1bc>
 80055a8:	1b40      	subs	r0, r0, r5
 80055aa:	6060      	str	r0, [r4, #4]
 80055ac:	6863      	ldr	r3, [r4, #4]
 80055ae:	6123      	str	r3, [r4, #16]
 80055b0:	2300      	movs	r3, #0
 80055b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055b6:	e7a7      	b.n	8005508 <_printf_i+0x118>
 80055b8:	6923      	ldr	r3, [r4, #16]
 80055ba:	462a      	mov	r2, r5
 80055bc:	4639      	mov	r1, r7
 80055be:	4630      	mov	r0, r6
 80055c0:	47c0      	blx	r8
 80055c2:	3001      	adds	r0, #1
 80055c4:	d0aa      	beq.n	800551c <_printf_i+0x12c>
 80055c6:	6823      	ldr	r3, [r4, #0]
 80055c8:	079b      	lsls	r3, r3, #30
 80055ca:	d413      	bmi.n	80055f4 <_printf_i+0x204>
 80055cc:	68e0      	ldr	r0, [r4, #12]
 80055ce:	9b03      	ldr	r3, [sp, #12]
 80055d0:	4298      	cmp	r0, r3
 80055d2:	bfb8      	it	lt
 80055d4:	4618      	movlt	r0, r3
 80055d6:	e7a3      	b.n	8005520 <_printf_i+0x130>
 80055d8:	2301      	movs	r3, #1
 80055da:	464a      	mov	r2, r9
 80055dc:	4639      	mov	r1, r7
 80055de:	4630      	mov	r0, r6
 80055e0:	47c0      	blx	r8
 80055e2:	3001      	adds	r0, #1
 80055e4:	d09a      	beq.n	800551c <_printf_i+0x12c>
 80055e6:	3501      	adds	r5, #1
 80055e8:	68e3      	ldr	r3, [r4, #12]
 80055ea:	9a03      	ldr	r2, [sp, #12]
 80055ec:	1a9b      	subs	r3, r3, r2
 80055ee:	42ab      	cmp	r3, r5
 80055f0:	dcf2      	bgt.n	80055d8 <_printf_i+0x1e8>
 80055f2:	e7eb      	b.n	80055cc <_printf_i+0x1dc>
 80055f4:	2500      	movs	r5, #0
 80055f6:	f104 0919 	add.w	r9, r4, #25
 80055fa:	e7f5      	b.n	80055e8 <_printf_i+0x1f8>
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d1ac      	bne.n	800555a <_printf_i+0x16a>
 8005600:	7803      	ldrb	r3, [r0, #0]
 8005602:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005606:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800560a:	e76c      	b.n	80054e6 <_printf_i+0xf6>
 800560c:	080058d5 	.word	0x080058d5
 8005610:	080058e6 	.word	0x080058e6

08005614 <_sbrk_r>:
 8005614:	b538      	push	{r3, r4, r5, lr}
 8005616:	4c06      	ldr	r4, [pc, #24]	; (8005630 <_sbrk_r+0x1c>)
 8005618:	2300      	movs	r3, #0
 800561a:	4605      	mov	r5, r0
 800561c:	4608      	mov	r0, r1
 800561e:	6023      	str	r3, [r4, #0]
 8005620:	f7fc f824 	bl	800166c <_sbrk>
 8005624:	1c43      	adds	r3, r0, #1
 8005626:	d102      	bne.n	800562e <_sbrk_r+0x1a>
 8005628:	6823      	ldr	r3, [r4, #0]
 800562a:	b103      	cbz	r3, 800562e <_sbrk_r+0x1a>
 800562c:	602b      	str	r3, [r5, #0]
 800562e:	bd38      	pop	{r3, r4, r5, pc}
 8005630:	20000168 	.word	0x20000168

08005634 <__sread>:
 8005634:	b510      	push	{r4, lr}
 8005636:	460c      	mov	r4, r1
 8005638:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800563c:	f000 f896 	bl	800576c <_read_r>
 8005640:	2800      	cmp	r0, #0
 8005642:	bfab      	itete	ge
 8005644:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005646:	89a3      	ldrhlt	r3, [r4, #12]
 8005648:	181b      	addge	r3, r3, r0
 800564a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800564e:	bfac      	ite	ge
 8005650:	6563      	strge	r3, [r4, #84]	; 0x54
 8005652:	81a3      	strhlt	r3, [r4, #12]
 8005654:	bd10      	pop	{r4, pc}

08005656 <__swrite>:
 8005656:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800565a:	461f      	mov	r7, r3
 800565c:	898b      	ldrh	r3, [r1, #12]
 800565e:	05db      	lsls	r3, r3, #23
 8005660:	4605      	mov	r5, r0
 8005662:	460c      	mov	r4, r1
 8005664:	4616      	mov	r6, r2
 8005666:	d505      	bpl.n	8005674 <__swrite+0x1e>
 8005668:	2302      	movs	r3, #2
 800566a:	2200      	movs	r2, #0
 800566c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005670:	f000 f868 	bl	8005744 <_lseek_r>
 8005674:	89a3      	ldrh	r3, [r4, #12]
 8005676:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800567a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800567e:	81a3      	strh	r3, [r4, #12]
 8005680:	4632      	mov	r2, r6
 8005682:	463b      	mov	r3, r7
 8005684:	4628      	mov	r0, r5
 8005686:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800568a:	f000 b817 	b.w	80056bc <_write_r>

0800568e <__sseek>:
 800568e:	b510      	push	{r4, lr}
 8005690:	460c      	mov	r4, r1
 8005692:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005696:	f000 f855 	bl	8005744 <_lseek_r>
 800569a:	1c43      	adds	r3, r0, #1
 800569c:	89a3      	ldrh	r3, [r4, #12]
 800569e:	bf15      	itete	ne
 80056a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80056a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80056a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80056aa:	81a3      	strheq	r3, [r4, #12]
 80056ac:	bf18      	it	ne
 80056ae:	81a3      	strhne	r3, [r4, #12]
 80056b0:	bd10      	pop	{r4, pc}

080056b2 <__sclose>:
 80056b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056b6:	f000 b813 	b.w	80056e0 <_close_r>
	...

080056bc <_write_r>:
 80056bc:	b538      	push	{r3, r4, r5, lr}
 80056be:	4c07      	ldr	r4, [pc, #28]	; (80056dc <_write_r+0x20>)
 80056c0:	4605      	mov	r5, r0
 80056c2:	4608      	mov	r0, r1
 80056c4:	4611      	mov	r1, r2
 80056c6:	2200      	movs	r2, #0
 80056c8:	6022      	str	r2, [r4, #0]
 80056ca:	461a      	mov	r2, r3
 80056cc:	f7fb faea 	bl	8000ca4 <_write>
 80056d0:	1c43      	adds	r3, r0, #1
 80056d2:	d102      	bne.n	80056da <_write_r+0x1e>
 80056d4:	6823      	ldr	r3, [r4, #0]
 80056d6:	b103      	cbz	r3, 80056da <_write_r+0x1e>
 80056d8:	602b      	str	r3, [r5, #0]
 80056da:	bd38      	pop	{r3, r4, r5, pc}
 80056dc:	20000168 	.word	0x20000168

080056e0 <_close_r>:
 80056e0:	b538      	push	{r3, r4, r5, lr}
 80056e2:	4c06      	ldr	r4, [pc, #24]	; (80056fc <_close_r+0x1c>)
 80056e4:	2300      	movs	r3, #0
 80056e6:	4605      	mov	r5, r0
 80056e8:	4608      	mov	r0, r1
 80056ea:	6023      	str	r3, [r4, #0]
 80056ec:	f7fb ff89 	bl	8001602 <_close>
 80056f0:	1c43      	adds	r3, r0, #1
 80056f2:	d102      	bne.n	80056fa <_close_r+0x1a>
 80056f4:	6823      	ldr	r3, [r4, #0]
 80056f6:	b103      	cbz	r3, 80056fa <_close_r+0x1a>
 80056f8:	602b      	str	r3, [r5, #0]
 80056fa:	bd38      	pop	{r3, r4, r5, pc}
 80056fc:	20000168 	.word	0x20000168

08005700 <_fstat_r>:
 8005700:	b538      	push	{r3, r4, r5, lr}
 8005702:	4c07      	ldr	r4, [pc, #28]	; (8005720 <_fstat_r+0x20>)
 8005704:	2300      	movs	r3, #0
 8005706:	4605      	mov	r5, r0
 8005708:	4608      	mov	r0, r1
 800570a:	4611      	mov	r1, r2
 800570c:	6023      	str	r3, [r4, #0]
 800570e:	f7fb ff84 	bl	800161a <_fstat>
 8005712:	1c43      	adds	r3, r0, #1
 8005714:	d102      	bne.n	800571c <_fstat_r+0x1c>
 8005716:	6823      	ldr	r3, [r4, #0]
 8005718:	b103      	cbz	r3, 800571c <_fstat_r+0x1c>
 800571a:	602b      	str	r3, [r5, #0]
 800571c:	bd38      	pop	{r3, r4, r5, pc}
 800571e:	bf00      	nop
 8005720:	20000168 	.word	0x20000168

08005724 <_isatty_r>:
 8005724:	b538      	push	{r3, r4, r5, lr}
 8005726:	4c06      	ldr	r4, [pc, #24]	; (8005740 <_isatty_r+0x1c>)
 8005728:	2300      	movs	r3, #0
 800572a:	4605      	mov	r5, r0
 800572c:	4608      	mov	r0, r1
 800572e:	6023      	str	r3, [r4, #0]
 8005730:	f7fb ff83 	bl	800163a <_isatty>
 8005734:	1c43      	adds	r3, r0, #1
 8005736:	d102      	bne.n	800573e <_isatty_r+0x1a>
 8005738:	6823      	ldr	r3, [r4, #0]
 800573a:	b103      	cbz	r3, 800573e <_isatty_r+0x1a>
 800573c:	602b      	str	r3, [r5, #0]
 800573e:	bd38      	pop	{r3, r4, r5, pc}
 8005740:	20000168 	.word	0x20000168

08005744 <_lseek_r>:
 8005744:	b538      	push	{r3, r4, r5, lr}
 8005746:	4c07      	ldr	r4, [pc, #28]	; (8005764 <_lseek_r+0x20>)
 8005748:	4605      	mov	r5, r0
 800574a:	4608      	mov	r0, r1
 800574c:	4611      	mov	r1, r2
 800574e:	2200      	movs	r2, #0
 8005750:	6022      	str	r2, [r4, #0]
 8005752:	461a      	mov	r2, r3
 8005754:	f7fb ff7c 	bl	8001650 <_lseek>
 8005758:	1c43      	adds	r3, r0, #1
 800575a:	d102      	bne.n	8005762 <_lseek_r+0x1e>
 800575c:	6823      	ldr	r3, [r4, #0]
 800575e:	b103      	cbz	r3, 8005762 <_lseek_r+0x1e>
 8005760:	602b      	str	r3, [r5, #0]
 8005762:	bd38      	pop	{r3, r4, r5, pc}
 8005764:	20000168 	.word	0x20000168

08005768 <__malloc_lock>:
 8005768:	4770      	bx	lr

0800576a <__malloc_unlock>:
 800576a:	4770      	bx	lr

0800576c <_read_r>:
 800576c:	b538      	push	{r3, r4, r5, lr}
 800576e:	4c07      	ldr	r4, [pc, #28]	; (800578c <_read_r+0x20>)
 8005770:	4605      	mov	r5, r0
 8005772:	4608      	mov	r0, r1
 8005774:	4611      	mov	r1, r2
 8005776:	2200      	movs	r2, #0
 8005778:	6022      	str	r2, [r4, #0]
 800577a:	461a      	mov	r2, r3
 800577c:	f7fb ff24 	bl	80015c8 <_read>
 8005780:	1c43      	adds	r3, r0, #1
 8005782:	d102      	bne.n	800578a <_read_r+0x1e>
 8005784:	6823      	ldr	r3, [r4, #0]
 8005786:	b103      	cbz	r3, 800578a <_read_r+0x1e>
 8005788:	602b      	str	r3, [r5, #0]
 800578a:	bd38      	pop	{r3, r4, r5, pc}
 800578c:	20000168 	.word	0x20000168

08005790 <_init>:
 8005790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005792:	bf00      	nop
 8005794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005796:	bc08      	pop	{r3}
 8005798:	469e      	mov	lr, r3
 800579a:	4770      	bx	lr

0800579c <_fini>:
 800579c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800579e:	bf00      	nop
 80057a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057a2:	bc08      	pop	{r3}
 80057a4:	469e      	mov	lr, r3
 80057a6:	4770      	bx	lr
